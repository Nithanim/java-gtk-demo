// Generated by jextract

package gtk3;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public interface GErrorInitFunc {

    void apply(jdk.incubator.foreign.MemoryAddress error);
    static NativeSymbol allocate(GErrorInitFunc fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(GErrorInitFunc.class, fi, constants$24.GErrorInitFunc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
    }
    static GErrorInitFunc ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("GErrorInitFunc::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress error) -> {
            try {
                constants$24.GErrorInitFunc$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)error);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


