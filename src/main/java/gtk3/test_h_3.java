// Generated by jextract

package gtk3;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
 class test_h_3 extends test_h_2 {

    public static MethodHandle g_byte_array_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$20.g_byte_array_sort$MH,"g_byte_array_sort");
    }
    public static void g_byte_array_sort ( Addressable array,  Addressable compare_func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.g_byte_array_sort$MH, "g_byte_array_sort");
        try {
            mh$.invokeExact(array, compare_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_sort_with_data$MH() {
        return RuntimeHelper.requireNonNull(constants$20.g_byte_array_sort_with_data$MH,"g_byte_array_sort_with_data");
    }
    public static void g_byte_array_sort_with_data ( Addressable array,  Addressable compare_func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.g_byte_array_sort_with_data$MH, "g_byte_array_sort_with_data");
        try {
            mh$.invokeExact(array, compare_func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_get$MH() {
        return RuntimeHelper.requireNonNull(constants$20.g_atomic_int_get$MH,"g_atomic_int_get");
    }
    public static int g_atomic_int_get ( Addressable atomic) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.g_atomic_int_get$MH, "g_atomic_int_get");
        try {
            return (int)mh$.invokeExact(atomic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_set$MH() {
        return RuntimeHelper.requireNonNull(constants$20.g_atomic_int_set$MH,"g_atomic_int_set");
    }
    public static void g_atomic_int_set ( Addressable atomic,  int newval) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.g_atomic_int_set$MH, "g_atomic_int_set");
        try {
            mh$.invokeExact(atomic, newval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_inc$MH() {
        return RuntimeHelper.requireNonNull(constants$20.g_atomic_int_inc$MH,"g_atomic_int_inc");
    }
    public static void g_atomic_int_inc ( Addressable atomic) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.g_atomic_int_inc$MH, "g_atomic_int_inc");
        try {
            mh$.invokeExact(atomic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_dec_and_test$MH() {
        return RuntimeHelper.requireNonNull(constants$20.g_atomic_int_dec_and_test$MH,"g_atomic_int_dec_and_test");
    }
    public static int g_atomic_int_dec_and_test ( Addressable atomic) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.g_atomic_int_dec_and_test$MH, "g_atomic_int_dec_and_test");
        try {
            return (int)mh$.invokeExact(atomic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_compare_and_exchange$MH() {
        return RuntimeHelper.requireNonNull(constants$21.g_atomic_int_compare_and_exchange$MH,"g_atomic_int_compare_and_exchange");
    }
    public static int g_atomic_int_compare_and_exchange ( Addressable atomic,  int oldval,  int newval) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.g_atomic_int_compare_and_exchange$MH, "g_atomic_int_compare_and_exchange");
        try {
            return (int)mh$.invokeExact(atomic, oldval, newval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_add$MH() {
        return RuntimeHelper.requireNonNull(constants$21.g_atomic_int_add$MH,"g_atomic_int_add");
    }
    public static int g_atomic_int_add ( Addressable atomic,  int val) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.g_atomic_int_add$MH, "g_atomic_int_add");
        try {
            return (int)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_and$MH() {
        return RuntimeHelper.requireNonNull(constants$21.g_atomic_int_and$MH,"g_atomic_int_and");
    }
    public static int g_atomic_int_and ( Addressable atomic,  int val) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.g_atomic_int_and$MH, "g_atomic_int_and");
        try {
            return (int)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_or$MH() {
        return RuntimeHelper.requireNonNull(constants$21.g_atomic_int_or$MH,"g_atomic_int_or");
    }
    public static int g_atomic_int_or ( Addressable atomic,  int val) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.g_atomic_int_or$MH, "g_atomic_int_or");
        try {
            return (int)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_xor$MH() {
        return RuntimeHelper.requireNonNull(constants$21.g_atomic_int_xor$MH,"g_atomic_int_xor");
    }
    public static int g_atomic_int_xor ( Addressable atomic,  int val) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.g_atomic_int_xor$MH, "g_atomic_int_xor");
        try {
            return (int)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_pointer_get$MH() {
        return RuntimeHelper.requireNonNull(constants$21.g_atomic_pointer_get$MH,"g_atomic_pointer_get");
    }
    public static MemoryAddress g_atomic_pointer_get ( Addressable atomic) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.g_atomic_pointer_get$MH, "g_atomic_pointer_get");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(atomic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_pointer_set$MH() {
        return RuntimeHelper.requireNonNull(constants$22.g_atomic_pointer_set$MH,"g_atomic_pointer_set");
    }
    public static void g_atomic_pointer_set ( Addressable atomic,  Addressable newval) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.g_atomic_pointer_set$MH, "g_atomic_pointer_set");
        try {
            mh$.invokeExact(atomic, newval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_pointer_compare_and_exchange$MH() {
        return RuntimeHelper.requireNonNull(constants$22.g_atomic_pointer_compare_and_exchange$MH,"g_atomic_pointer_compare_and_exchange");
    }
    public static int g_atomic_pointer_compare_and_exchange ( Addressable atomic,  Addressable oldval,  Addressable newval) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.g_atomic_pointer_compare_and_exchange$MH, "g_atomic_pointer_compare_and_exchange");
        try {
            return (int)mh$.invokeExact(atomic, oldval, newval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_pointer_add$MH() {
        return RuntimeHelper.requireNonNull(constants$22.g_atomic_pointer_add$MH,"g_atomic_pointer_add");
    }
    public static long g_atomic_pointer_add ( Addressable atomic,  long val) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.g_atomic_pointer_add$MH, "g_atomic_pointer_add");
        try {
            return (long)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_pointer_and$MH() {
        return RuntimeHelper.requireNonNull(constants$22.g_atomic_pointer_and$MH,"g_atomic_pointer_and");
    }
    public static long g_atomic_pointer_and ( Addressable atomic,  long val) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.g_atomic_pointer_and$MH, "g_atomic_pointer_and");
        try {
            return (long)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_pointer_or$MH() {
        return RuntimeHelper.requireNonNull(constants$22.g_atomic_pointer_or$MH,"g_atomic_pointer_or");
    }
    public static long g_atomic_pointer_or ( Addressable atomic,  long val) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.g_atomic_pointer_or$MH, "g_atomic_pointer_or");
        try {
            return (long)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_pointer_xor$MH() {
        return RuntimeHelper.requireNonNull(constants$22.g_atomic_pointer_xor$MH,"g_atomic_pointer_xor");
    }
    public static long g_atomic_pointer_xor ( Addressable atomic,  long val) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.g_atomic_pointer_xor$MH, "g_atomic_pointer_xor");
        try {
            return (long)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_exchange_and_add$MH() {
        return RuntimeHelper.requireNonNull(constants$23.g_atomic_int_exchange_and_add$MH,"g_atomic_int_exchange_and_add");
    }
    public static int g_atomic_int_exchange_and_add ( Addressable atomic,  int val) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.g_atomic_int_exchange_and_add$MH, "g_atomic_int_exchange_and_add");
        try {
            return (int)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_quark_try_string$MH() {
        return RuntimeHelper.requireNonNull(constants$23.g_quark_try_string$MH,"g_quark_try_string");
    }
    public static int g_quark_try_string ( Addressable string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.g_quark_try_string$MH, "g_quark_try_string");
        try {
            return (int)mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_quark_from_static_string$MH() {
        return RuntimeHelper.requireNonNull(constants$23.g_quark_from_static_string$MH,"g_quark_from_static_string");
    }
    public static int g_quark_from_static_string ( Addressable string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.g_quark_from_static_string$MH, "g_quark_from_static_string");
        try {
            return (int)mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_quark_from_string$MH() {
        return RuntimeHelper.requireNonNull(constants$23.g_quark_from_string$MH,"g_quark_from_string");
    }
    public static int g_quark_from_string ( Addressable string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.g_quark_from_string$MH, "g_quark_from_string");
        try {
            return (int)mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_quark_to_string$MH() {
        return RuntimeHelper.requireNonNull(constants$23.g_quark_to_string$MH,"g_quark_to_string");
    }
    public static MemoryAddress g_quark_to_string ( int quark) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.g_quark_to_string$MH, "g_quark_to_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(quark);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_intern_string$MH() {
        return RuntimeHelper.requireNonNull(constants$23.g_intern_string$MH,"g_intern_string");
    }
    public static MemoryAddress g_intern_string ( Addressable string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.g_intern_string$MH, "g_intern_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_intern_static_string$MH() {
        return RuntimeHelper.requireNonNull(constants$24.g_intern_static_string$MH,"g_intern_static_string");
    }
    public static MemoryAddress g_intern_static_string ( Addressable string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.g_intern_static_string$MH, "g_intern_static_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_error_domain_register_static$MH() {
        return RuntimeHelper.requireNonNull(constants$25.g_error_domain_register_static$MH,"g_error_domain_register_static");
    }
    public static int g_error_domain_register_static ( Addressable error_type_name,  long error_type_private_size,  Addressable error_type_init,  Addressable error_type_copy,  Addressable error_type_clear) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.g_error_domain_register_static$MH, "g_error_domain_register_static");
        try {
            return (int)mh$.invokeExact(error_type_name, error_type_private_size, error_type_init, error_type_copy, error_type_clear);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_error_domain_register$MH() {
        return RuntimeHelper.requireNonNull(constants$25.g_error_domain_register$MH,"g_error_domain_register");
    }
    public static int g_error_domain_register ( Addressable error_type_name,  long error_type_private_size,  Addressable error_type_init,  Addressable error_type_copy,  Addressable error_type_clear) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.g_error_domain_register$MH, "g_error_domain_register");
        try {
            return (int)mh$.invokeExact(error_type_name, error_type_private_size, error_type_init, error_type_copy, error_type_clear);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_error_new$MH() {
        return RuntimeHelper.requireNonNull(constants$25.g_error_new$MH,"g_error_new");
    }
    public static MemoryAddress g_error_new ( int domain,  int code,  Addressable format, Object... x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.g_error_new$MH, "g_error_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(domain, code, format, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_error_new_literal$MH() {
        return RuntimeHelper.requireNonNull(constants$25.g_error_new_literal$MH,"g_error_new_literal");
    }
    public static MemoryAddress g_error_new_literal ( int domain,  int code,  Addressable message) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.g_error_new_literal$MH, "g_error_new_literal");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(domain, code, message);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_error_new_valist$MH() {
        return RuntimeHelper.requireNonNull(constants$25.g_error_new_valist$MH,"g_error_new_valist");
    }
    public static MemoryAddress g_error_new_valist ( int domain,  int code,  Addressable format,  Addressable args) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.g_error_new_valist$MH, "g_error_new_valist");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(domain, code, format, args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_error_free$MH() {
        return RuntimeHelper.requireNonNull(constants$26.g_error_free$MH,"g_error_free");
    }
    public static void g_error_free ( Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.g_error_free$MH, "g_error_free");
        try {
            mh$.invokeExact(error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_error_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$26.g_error_copy$MH,"g_error_copy");
    }
    public static MemoryAddress g_error_copy ( Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.g_error_copy$MH, "g_error_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_error_matches$MH() {
        return RuntimeHelper.requireNonNull(constants$26.g_error_matches$MH,"g_error_matches");
    }
    public static int g_error_matches ( Addressable error,  int domain,  int code) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.g_error_matches$MH, "g_error_matches");
        try {
            return (int)mh$.invokeExact(error, domain, code);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_set_error$MH() {
        return RuntimeHelper.requireNonNull(constants$26.g_set_error$MH,"g_set_error");
    }
    public static void g_set_error ( Addressable err,  int domain,  int code,  Addressable format, Object... x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.g_set_error$MH, "g_set_error");
        try {
            mh$.invokeExact(err, domain, code, format, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_set_error_literal$MH() {
        return RuntimeHelper.requireNonNull(constants$26.g_set_error_literal$MH,"g_set_error_literal");
    }
    public static void g_set_error_literal ( Addressable err,  int domain,  int code,  Addressable message) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.g_set_error_literal$MH, "g_set_error_literal");
        try {
            mh$.invokeExact(err, domain, code, message);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_propagate_error$MH() {
        return RuntimeHelper.requireNonNull(constants$26.g_propagate_error$MH,"g_propagate_error");
    }
    public static void g_propagate_error ( Addressable dest,  Addressable src) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.g_propagate_error$MH, "g_propagate_error");
        try {
            mh$.invokeExact(dest, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_clear_error$MH() {
        return RuntimeHelper.requireNonNull(constants$27.g_clear_error$MH,"g_clear_error");
    }
    public static void g_clear_error ( Addressable err) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.g_clear_error$MH, "g_clear_error");
        try {
            mh$.invokeExact(err);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_prefix_error$MH() {
        return RuntimeHelper.requireNonNull(constants$27.g_prefix_error$MH,"g_prefix_error");
    }
    public static void g_prefix_error ( Addressable err,  Addressable format, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.g_prefix_error$MH, "g_prefix_error");
        try {
            mh$.invokeExact(err, format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_propagate_prefixed_error$MH() {
        return RuntimeHelper.requireNonNull(constants$27.g_propagate_prefixed_error$MH,"g_propagate_prefixed_error");
    }
    public static void g_propagate_prefixed_error ( Addressable dest,  Addressable src,  Addressable format, Object... x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.g_propagate_prefixed_error$MH, "g_propagate_prefixed_error");
        try {
            mh$.invokeExact(dest, src, format, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_user_name$MH() {
        return RuntimeHelper.requireNonNull(constants$27.g_get_user_name$MH,"g_get_user_name");
    }
    public static MemoryAddress g_get_user_name () {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.g_get_user_name$MH, "g_get_user_name");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_real_name$MH() {
        return RuntimeHelper.requireNonNull(constants$27.g_get_real_name$MH,"g_get_real_name");
    }
    public static MemoryAddress g_get_real_name () {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.g_get_real_name$MH, "g_get_real_name");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_home_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$27.g_get_home_dir$MH,"g_get_home_dir");
    }
    public static MemoryAddress g_get_home_dir () {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.g_get_home_dir$MH, "g_get_home_dir");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_tmp_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$28.g_get_tmp_dir$MH,"g_get_tmp_dir");
    }
    public static MemoryAddress g_get_tmp_dir () {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.g_get_tmp_dir$MH, "g_get_tmp_dir");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_host_name$MH() {
        return RuntimeHelper.requireNonNull(constants$28.g_get_host_name$MH,"g_get_host_name");
    }
    public static MemoryAddress g_get_host_name () {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.g_get_host_name$MH, "g_get_host_name");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_prgname$MH() {
        return RuntimeHelper.requireNonNull(constants$28.g_get_prgname$MH,"g_get_prgname");
    }
    public static MemoryAddress g_get_prgname () {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.g_get_prgname$MH, "g_get_prgname");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_set_prgname$MH() {
        return RuntimeHelper.requireNonNull(constants$28.g_set_prgname$MH,"g_set_prgname");
    }
    public static void g_set_prgname ( Addressable prgname) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.g_set_prgname$MH, "g_set_prgname");
        try {
            mh$.invokeExact(prgname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_application_name$MH() {
        return RuntimeHelper.requireNonNull(constants$28.g_get_application_name$MH,"g_get_application_name");
    }
    public static MemoryAddress g_get_application_name () {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.g_get_application_name$MH, "g_get_application_name");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_set_application_name$MH() {
        return RuntimeHelper.requireNonNull(constants$28.g_set_application_name$MH,"g_set_application_name");
    }
    public static void g_set_application_name ( Addressable application_name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.g_set_application_name$MH, "g_set_application_name");
        try {
            mh$.invokeExact(application_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_os_info$MH() {
        return RuntimeHelper.requireNonNull(constants$29.g_get_os_info$MH,"g_get_os_info");
    }
    public static MemoryAddress g_get_os_info ( Addressable key_name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.g_get_os_info$MH, "g_get_os_info");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(key_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_reload_user_special_dirs_cache$MH() {
        return RuntimeHelper.requireNonNull(constants$29.g_reload_user_special_dirs_cache$MH,"g_reload_user_special_dirs_cache");
    }
    public static void g_reload_user_special_dirs_cache () {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.g_reload_user_special_dirs_cache$MH, "g_reload_user_special_dirs_cache");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_user_data_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$29.g_get_user_data_dir$MH,"g_get_user_data_dir");
    }
    public static MemoryAddress g_get_user_data_dir () {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.g_get_user_data_dir$MH, "g_get_user_data_dir");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_user_config_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$29.g_get_user_config_dir$MH,"g_get_user_config_dir");
    }
    public static MemoryAddress g_get_user_config_dir () {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.g_get_user_config_dir$MH, "g_get_user_config_dir");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_user_cache_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$29.g_get_user_cache_dir$MH,"g_get_user_cache_dir");
    }
    public static MemoryAddress g_get_user_cache_dir () {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.g_get_user_cache_dir$MH, "g_get_user_cache_dir");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_system_data_dirs$MH() {
        return RuntimeHelper.requireNonNull(constants$29.g_get_system_data_dirs$MH,"g_get_system_data_dirs");
    }
    public static MemoryAddress g_get_system_data_dirs () {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.g_get_system_data_dirs$MH, "g_get_system_data_dirs");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_system_config_dirs$MH() {
        return RuntimeHelper.requireNonNull(constants$30.g_get_system_config_dirs$MH,"g_get_system_config_dirs");
    }
    public static MemoryAddress g_get_system_config_dirs () {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.g_get_system_config_dirs$MH, "g_get_system_config_dirs");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_user_runtime_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$30.g_get_user_runtime_dir$MH,"g_get_user_runtime_dir");
    }
    public static MemoryAddress g_get_user_runtime_dir () {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.g_get_user_runtime_dir$MH, "g_get_user_runtime_dir");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_USER_DIRECTORY_DESKTOP() {
        return (int)0L;
    }
    public static int G_USER_DIRECTORY_DOCUMENTS() {
        return (int)1L;
    }
    public static int G_USER_DIRECTORY_DOWNLOAD() {
        return (int)2L;
    }
    public static int G_USER_DIRECTORY_MUSIC() {
        return (int)3L;
    }
    public static int G_USER_DIRECTORY_PICTURES() {
        return (int)4L;
    }
    public static int G_USER_DIRECTORY_PUBLIC_SHARE() {
        return (int)5L;
    }
    public static int G_USER_DIRECTORY_TEMPLATES() {
        return (int)6L;
    }
    public static int G_USER_DIRECTORY_VIDEOS() {
        return (int)7L;
    }
    public static int G_USER_N_DIRECTORIES() {
        return (int)8L;
    }
    public static MethodHandle g_get_user_special_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$30.g_get_user_special_dir$MH,"g_get_user_special_dir");
    }
    public static MemoryAddress g_get_user_special_dir ( int directory) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.g_get_user_special_dir$MH, "g_get_user_special_dir");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(directory);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_parse_debug_string$MH() {
        return RuntimeHelper.requireNonNull(constants$30.g_parse_debug_string$MH,"g_parse_debug_string");
    }
    public static int g_parse_debug_string ( Addressable string,  Addressable keys,  int nkeys) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.g_parse_debug_string$MH, "g_parse_debug_string");
        try {
            return (int)mh$.invokeExact(string, keys, nkeys);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_snprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$30.g_snprintf$MH,"g_snprintf");
    }
    public static int g_snprintf ( Addressable string,  long n,  Addressable format, Object... x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.g_snprintf$MH, "g_snprintf");
        try {
            return (int)mh$.invokeExact(string, n, format, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_vsnprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$30.g_vsnprintf$MH,"g_vsnprintf");
    }
    public static int g_vsnprintf ( Addressable string,  long n,  Addressable format,  Addressable args) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.g_vsnprintf$MH, "g_vsnprintf");
        try {
            return (int)mh$.invokeExact(string, n, format, args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_nullify_pointer$MH() {
        return RuntimeHelper.requireNonNull(constants$31.g_nullify_pointer$MH,"g_nullify_pointer");
    }
    public static void g_nullify_pointer ( Addressable nullify_location) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.g_nullify_pointer$MH, "g_nullify_pointer");
        try {
            mh$.invokeExact(nullify_location);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_FORMAT_SIZE_DEFAULT() {
        return (int)0L;
    }
    public static int G_FORMAT_SIZE_LONG_FORMAT() {
        return (int)1L;
    }
    public static int G_FORMAT_SIZE_IEC_UNITS() {
        return (int)2L;
    }
    public static int G_FORMAT_SIZE_BITS() {
        return (int)4L;
    }
    public static MethodHandle g_format_size_full$MH() {
        return RuntimeHelper.requireNonNull(constants$31.g_format_size_full$MH,"g_format_size_full");
    }
    public static MemoryAddress g_format_size_full ( long size,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.g_format_size_full$MH, "g_format_size_full");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(size, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_format_size$MH() {
        return RuntimeHelper.requireNonNull(constants$31.g_format_size$MH,"g_format_size");
    }
    public static MemoryAddress g_format_size ( long size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.g_format_size$MH, "g_format_size");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_format_size_for_display$MH() {
        return RuntimeHelper.requireNonNull(constants$31.g_format_size_for_display$MH,"g_format_size_for_display");
    }
    public static MemoryAddress g_format_size_for_display ( long size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.g_format_size_for_display$MH, "g_format_size_for_display");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atexit$MH() {
        return RuntimeHelper.requireNonNull(constants$32.g_atexit$MH,"g_atexit");
    }
    public static void g_atexit ( Addressable func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.g_atexit$MH, "g_atexit");
        try {
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_find_program_in_path$MH() {
        return RuntimeHelper.requireNonNull(constants$32.g_find_program_in_path$MH,"g_find_program_in_path");
    }
    public static MemoryAddress g_find_program_in_path ( Addressable program) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.g_find_program_in_path$MH, "g_find_program_in_path");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(program);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bit_nth_lsf$MH() {
        return RuntimeHelper.requireNonNull(constants$32.g_bit_nth_lsf$MH,"g_bit_nth_lsf");
    }
    public static int g_bit_nth_lsf ( long mask,  int nth_bit) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.g_bit_nth_lsf$MH, "g_bit_nth_lsf");
        try {
            return (int)mh$.invokeExact(mask, nth_bit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bit_nth_msf$MH() {
        return RuntimeHelper.requireNonNull(constants$32.g_bit_nth_msf$MH,"g_bit_nth_msf");
    }
    public static int g_bit_nth_msf ( long mask,  int nth_bit) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.g_bit_nth_msf$MH, "g_bit_nth_msf");
        try {
            return (int)mh$.invokeExact(mask, nth_bit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bit_storage$MH() {
        return RuntimeHelper.requireNonNull(constants$32.g_bit_storage$MH,"g_bit_storage");
    }
    public static int g_bit_storage ( long number) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.g_bit_storage$MH, "g_bit_storage");
        try {
            return (int)mh$.invokeExact(number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bit_nth_lsf_impl$MH() {
        return RuntimeHelper.requireNonNull(constants$32.g_bit_nth_lsf_impl$MH,"g_bit_nth_lsf_impl");
    }
    public static int g_bit_nth_lsf_impl ( long mask,  int nth_bit) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.g_bit_nth_lsf_impl$MH, "g_bit_nth_lsf_impl");
        try {
            return (int)mh$.invokeExact(mask, nth_bit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bit_nth_msf_impl$MH() {
        return RuntimeHelper.requireNonNull(constants$33.g_bit_nth_msf_impl$MH,"g_bit_nth_msf_impl");
    }
    public static int g_bit_nth_msf_impl ( long mask,  int nth_bit) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.g_bit_nth_msf_impl$MH, "g_bit_nth_msf_impl");
        try {
            return (int)mh$.invokeExact(mask, nth_bit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bit_storage_impl$MH() {
        return RuntimeHelper.requireNonNull(constants$33.g_bit_storage_impl$MH,"g_bit_storage_impl");
    }
    public static int g_bit_storage_impl ( long number) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.g_bit_storage_impl$MH, "g_bit_storage_impl");
        try {
            return (int)mh$.invokeExact(number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfFloat _Float32 = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble _Float64 = Constants$root.C_DOUBLE$LAYOUT;
    public static OfDouble _Float32x = Constants$root.C_DOUBLE$LAYOUT;
    public static MethodHandle __ctype_get_mb_cur_max$MH() {
        return RuntimeHelper.requireNonNull(constants$33.__ctype_get_mb_cur_max$MH,"__ctype_get_mb_cur_max");
    }
    public static long __ctype_get_mb_cur_max () {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.__ctype_get_mb_cur_max$MH, "__ctype_get_mb_cur_max");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atof$MH() {
        return RuntimeHelper.requireNonNull(constants$33.atof$MH,"atof");
    }
    public static double atof ( Addressable __nptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.atof$MH, "atof");
        try {
            return (double)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoi$MH() {
        return RuntimeHelper.requireNonNull(constants$33.atoi$MH,"atoi");
    }
    public static int atoi ( Addressable __nptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.atoi$MH, "atoi");
        try {
            return (int)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atol$MH() {
        return RuntimeHelper.requireNonNull(constants$33.atol$MH,"atol");
    }
    public static long atol ( Addressable __nptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.atol$MH, "atol");
        try {
            return (long)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoll$MH() {
        return RuntimeHelper.requireNonNull(constants$34.atoll$MH,"atoll");
    }
    public static long atoll ( Addressable __nptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.atoll$MH, "atoll");
        try {
            return (long)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtod$MH() {
        return RuntimeHelper.requireNonNull(constants$34.strtod$MH,"strtod");
    }
    public static double strtod ( Addressable __nptr,  Addressable __endptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.strtod$MH, "strtod");
        try {
            return (double)mh$.invokeExact(__nptr, __endptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtof$MH() {
        return RuntimeHelper.requireNonNull(constants$34.strtof$MH,"strtof");
    }
    public static float strtof ( Addressable __nptr,  Addressable __endptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.strtof$MH, "strtof");
        try {
            return (float)mh$.invokeExact(__nptr, __endptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtol$MH() {
        return RuntimeHelper.requireNonNull(constants$34.strtol$MH,"strtol");
    }
    public static long strtol ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.strtol$MH, "strtol");
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoul$MH() {
        return RuntimeHelper.requireNonNull(constants$34.strtoul$MH,"strtoul");
    }
    public static long strtoul ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.strtoul$MH, "strtoul");
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoq$MH() {
        return RuntimeHelper.requireNonNull(constants$34.strtoq$MH,"strtoq");
    }
    public static long strtoq ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.strtoq$MH, "strtoq");
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtouq$MH() {
        return RuntimeHelper.requireNonNull(constants$35.strtouq$MH,"strtouq");
    }
    public static long strtouq ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.strtouq$MH, "strtouq");
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoll$MH() {
        return RuntimeHelper.requireNonNull(constants$35.strtoll$MH,"strtoll");
    }
    public static long strtoll ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.strtoll$MH, "strtoll");
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoull$MH() {
        return RuntimeHelper.requireNonNull(constants$35.strtoull$MH,"strtoull");
    }
    public static long strtoull ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.strtoull$MH, "strtoull");
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle l64a$MH() {
        return RuntimeHelper.requireNonNull(constants$35.l64a$MH,"l64a");
    }
    public static MemoryAddress l64a ( long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.l64a$MH, "l64a");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle a64l$MH() {
        return RuntimeHelper.requireNonNull(constants$35.a64l$MH,"a64l");
    }
    public static long a64l ( Addressable __s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.a64l$MH, "a64l");
        try {
            return (long)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt daddr_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress caddr_t = Constants$root.C_POINTER$LAYOUT;
    public static OfInt key_t = Constants$root.C_INT$LAYOUT;
    public static OfShort int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong register_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle __bswap_16$MH() {
        return RuntimeHelper.requireNonNull(constants$35.__bswap_16$MH,"__bswap_16");
    }
    public static short __bswap_16 ( short __bsx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.__bswap_16$MH, "__bswap_16");
        try {
            return (short)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __bswap_32$MH() {
        return RuntimeHelper.requireNonNull(constants$36.__bswap_32$MH,"__bswap_32");
    }
    public static int __bswap_32 ( int __bsx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.__bswap_32$MH, "__bswap_32");
        try {
            return (int)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __bswap_64$MH() {
        return RuntimeHelper.requireNonNull(constants$36.__bswap_64$MH,"__bswap_64");
    }
    public static long __bswap_64 ( long __bsx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.__bswap_64$MH, "__bswap_64");
        try {
            return (long)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint16_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$36.__uint16_identity$MH,"__uint16_identity");
    }
    public static short __uint16_identity ( short __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.__uint16_identity$MH, "__uint16_identity");
        try {
            return (short)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint32_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$36.__uint32_identity$MH,"__uint32_identity");
    }
    public static int __uint32_identity ( int __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.__uint32_identity$MH, "__uint32_identity");
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint64_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$36.__uint64_identity$MH,"__uint64_identity");
    }
    public static long __uint64_identity ( long __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.__uint64_identity$MH, "__uint64_identity");
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __fd_mask = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong fd_mask = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle select$MH() {
        return RuntimeHelper.requireNonNull(constants$36.select$MH,"select");
    }
    public static int select ( int __nfds,  Addressable __readfds,  Addressable __writefds,  Addressable __exceptfds,  Addressable __timeout) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.select$MH, "select");
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pselect$MH() {
        return RuntimeHelper.requireNonNull(constants$37.pselect$MH,"pselect");
    }
    public static int pselect ( int __nfds,  Addressable __readfds,  Addressable __writefds,  Addressable __exceptfds,  Addressable __timeout,  Addressable __sigmask) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.pselect$MH, "pselect");
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt pthread_once_t = Constants$root.C_INT$LAYOUT;
    public static OfInt pthread_spinlock_t = Constants$root.C_INT$LAYOUT;
    public static MethodHandle random$MH() {
        return RuntimeHelper.requireNonNull(constants$37.random$MH,"random");
    }
    public static long random () {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.random$MH, "random");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srandom$MH() {
        return RuntimeHelper.requireNonNull(constants$37.srandom$MH,"srandom");
    }
    public static void srandom ( int __seed) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.srandom$MH, "srandom");
        try {
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initstate$MH() {
        return RuntimeHelper.requireNonNull(constants$37.initstate$MH,"initstate");
    }
    public static MemoryAddress initstate ( int __seed,  Addressable __statebuf,  long __statelen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.initstate$MH, "initstate");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__seed, __statebuf, __statelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setstate$MH() {
        return RuntimeHelper.requireNonNull(constants$37.setstate$MH,"setstate");
    }
    public static MemoryAddress setstate ( Addressable __statebuf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.setstate$MH, "setstate");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__statebuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle random_r$MH() {
        return RuntimeHelper.requireNonNull(constants$37.random_r$MH,"random_r");
    }
    public static int random_r ( Addressable __buf,  Addressable __result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.random_r$MH, "random_r");
        try {
            return (int)mh$.invokeExact(__buf, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srandom_r$MH() {
        return RuntimeHelper.requireNonNull(constants$38.srandom_r$MH,"srandom_r");
    }
    public static int srandom_r ( int __seed,  Addressable __buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.srandom_r$MH, "srandom_r");
        try {
            return (int)mh$.invokeExact(__seed, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initstate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$38.initstate_r$MH,"initstate_r");
    }
    public static int initstate_r ( int __seed,  Addressable __statebuf,  long __statelen,  Addressable __buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.initstate_r$MH, "initstate_r");
        try {
            return (int)mh$.invokeExact(__seed, __statebuf, __statelen, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setstate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$38.setstate_r$MH,"setstate_r");
    }
    public static int setstate_r ( Addressable __statebuf,  Addressable __buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.setstate_r$MH, "setstate_r");
        try {
            return (int)mh$.invokeExact(__statebuf, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand$MH() {
        return RuntimeHelper.requireNonNull(constants$38.rand$MH,"rand");
    }
    public static int rand () {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.rand$MH, "rand");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand$MH() {
        return RuntimeHelper.requireNonNull(constants$38.srand$MH,"srand");
    }
    public static void srand ( int __seed) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.srand$MH, "srand");
        try {
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand_r$MH() {
        return RuntimeHelper.requireNonNull(constants$38.rand_r$MH,"rand_r");
    }
    public static int rand_r ( Addressable __seed) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.rand_r$MH, "rand_r");
        try {
            return (int)mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drand48$MH() {
        return RuntimeHelper.requireNonNull(constants$39.drand48$MH,"drand48");
    }
    public static double drand48 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.drand48$MH, "drand48");
        try {
            return (double)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erand48$MH() {
        return RuntimeHelper.requireNonNull(constants$39.erand48$MH,"erand48");
    }
    public static double erand48 ( Addressable __xsubi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.erand48$MH, "erand48");
        try {
            return (double)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$39.lrand48$MH,"lrand48");
    }
    public static long lrand48 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.lrand48$MH, "lrand48");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$39.nrand48$MH,"nrand48");
    }
    public static long nrand48 ( Addressable __xsubi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.nrand48$MH, "nrand48");
        try {
            return (long)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$39.mrand48$MH,"mrand48");
    }
    public static long mrand48 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.mrand48$MH, "mrand48");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$39.jrand48$MH,"jrand48");
    }
    public static long jrand48 ( Addressable __xsubi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.jrand48$MH, "jrand48");
        try {
            return (long)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand48$MH() {
        return RuntimeHelper.requireNonNull(constants$40.srand48$MH,"srand48");
    }
    public static void srand48 ( long __seedval) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.srand48$MH, "srand48");
        try {
            mh$.invokeExact(__seedval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seed48$MH() {
        return RuntimeHelper.requireNonNull(constants$40.seed48$MH,"seed48");
    }
    public static MemoryAddress seed48 ( Addressable __seed16v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.seed48$MH, "seed48");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__seed16v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lcong48$MH() {
        return RuntimeHelper.requireNonNull(constants$40.lcong48$MH,"lcong48");
    }
    public static void lcong48 ( Addressable __param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.lcong48$MH, "lcong48");
        try {
            mh$.invokeExact(__param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$40.drand48_r$MH,"drand48_r");
    }
    public static int drand48_r ( Addressable __buffer,  Addressable __result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.drand48_r$MH, "drand48_r");
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$40.erand48_r$MH,"erand48_r");
    }
    public static int erand48_r ( Addressable __xsubi,  Addressable __buffer,  Addressable __result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.erand48_r$MH, "erand48_r");
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$40.lrand48_r$MH,"lrand48_r");
    }
    public static int lrand48_r ( Addressable __buffer,  Addressable __result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.lrand48_r$MH, "lrand48_r");
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$41.nrand48_r$MH,"nrand48_r");
    }
    public static int nrand48_r ( Addressable __xsubi,  Addressable __buffer,  Addressable __result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.nrand48_r$MH, "nrand48_r");
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$41.mrand48_r$MH,"mrand48_r");
    }
    public static int mrand48_r ( Addressable __buffer,  Addressable __result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.mrand48_r$MH, "mrand48_r");
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$41.jrand48_r$MH,"jrand48_r");
    }
    public static int jrand48_r ( Addressable __xsubi,  Addressable __buffer,  Addressable __result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.jrand48_r$MH, "jrand48_r");
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$41.srand48_r$MH,"srand48_r");
    }
    public static int srand48_r ( long __seedval,  Addressable __buffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.srand48_r$MH, "srand48_r");
        try {
            return (int)mh$.invokeExact(__seedval, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seed48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$41.seed48_r$MH,"seed48_r");
    }
    public static int seed48_r ( Addressable __seed16v,  Addressable __buffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.seed48_r$MH, "seed48_r");
        try {
            return (int)mh$.invokeExact(__seed16v, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lcong48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$41.lcong48_r$MH,"lcong48_r");
    }
    public static int lcong48_r ( Addressable __param,  Addressable __buffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.lcong48_r$MH, "lcong48_r");
        try {
            return (int)mh$.invokeExact(__param, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$42.malloc$MH,"malloc");
    }
    public static MemoryAddress malloc ( long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.malloc$MH, "malloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle calloc$MH() {
        return RuntimeHelper.requireNonNull(constants$42.calloc$MH,"calloc");
    }
    public static MemoryAddress calloc ( long __nmemb,  long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.calloc$MH, "calloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__nmemb, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$42.realloc$MH,"realloc");
    }
    public static MemoryAddress realloc ( Addressable __ptr,  long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.realloc$MH, "realloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__ptr, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle free$MH() {
        return RuntimeHelper.requireNonNull(constants$42.free$MH,"free");
    }
    public static void free ( Addressable __ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.free$MH, "free");
        try {
            mh$.invokeExact(__ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle reallocarray$MH() {
        return RuntimeHelper.requireNonNull(constants$42.reallocarray$MH,"reallocarray");
    }
    public static MemoryAddress reallocarray ( Addressable __ptr,  long __nmemb,  long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.reallocarray$MH, "reallocarray");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__ptr, __nmemb, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle alloca$MH() {
        return RuntimeHelper.requireNonNull(constants$42.alloca$MH,"alloca");
    }
    public static MemoryAddress alloca ( long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.alloca$MH, "alloca");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle valloc$MH() {
        return RuntimeHelper.requireNonNull(constants$43.valloc$MH,"valloc");
    }
    public static MemoryAddress valloc ( long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.valloc$MH, "valloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle posix_memalign$MH() {
        return RuntimeHelper.requireNonNull(constants$43.posix_memalign$MH,"posix_memalign");
    }
    public static int posix_memalign ( Addressable __memptr,  long __alignment,  long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.posix_memalign$MH, "posix_memalign");
        try {
            return (int)mh$.invokeExact(__memptr, __alignment, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle aligned_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$43.aligned_alloc$MH,"aligned_alloc");
    }
    public static MemoryAddress aligned_alloc ( long __alignment,  long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.aligned_alloc$MH, "aligned_alloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__alignment, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abort$MH() {
        return RuntimeHelper.requireNonNull(constants$43.abort$MH,"abort");
    }
    public static void abort () {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.abort$MH, "abort");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atexit$MH() {
        return RuntimeHelper.requireNonNull(constants$44.atexit$MH,"atexit");
    }
    public static int atexit ( Addressable __func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$44.atexit$MH, "atexit");
        try {
            return (int)mh$.invokeExact(__func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle at_quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$44.at_quick_exit$MH,"at_quick_exit");
    }
    public static int at_quick_exit ( Addressable __func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$44.at_quick_exit$MH, "at_quick_exit");
        try {
            return (int)mh$.invokeExact(__func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle on_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$45.on_exit$MH,"on_exit");
    }
    public static int on_exit ( Addressable __func,  Addressable __arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$45.on_exit$MH, "on_exit");
        try {
            return (int)mh$.invokeExact(__func, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exit$MH() {
        return RuntimeHelper.requireNonNull(constants$45.exit$MH,"exit");
    }
    public static void exit ( int __status) {
        var mh$ = RuntimeHelper.requireNonNull(constants$45.exit$MH, "exit");
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$45.quick_exit$MH,"quick_exit");
    }
    public static void quick_exit ( int __status) {
        var mh$ = RuntimeHelper.requireNonNull(constants$45.quick_exit$MH, "quick_exit");
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _Exit$MH() {
        return RuntimeHelper.requireNonNull(constants$45._Exit$MH,"_Exit");
    }
    public static void _Exit ( int __status) {
        var mh$ = RuntimeHelper.requireNonNull(constants$45._Exit$MH, "_Exit");
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getenv$MH() {
        return RuntimeHelper.requireNonNull(constants$45.getenv$MH,"getenv");
    }
    public static MemoryAddress getenv ( Addressable __name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$45.getenv$MH, "getenv");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putenv$MH() {
        return RuntimeHelper.requireNonNull(constants$45.putenv$MH,"putenv");
    }
    public static int putenv ( Addressable __string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$45.putenv$MH, "putenv");
        try {
            return (int)mh$.invokeExact(__string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setenv$MH() {
        return RuntimeHelper.requireNonNull(constants$46.setenv$MH,"setenv");
    }
    public static int setenv ( Addressable __name,  Addressable __value,  int __replace) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.setenv$MH, "setenv");
        try {
            return (int)mh$.invokeExact(__name, __value, __replace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unsetenv$MH() {
        return RuntimeHelper.requireNonNull(constants$46.unsetenv$MH,"unsetenv");
    }
    public static int unsetenv ( Addressable __name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.unsetenv$MH, "unsetenv");
        try {
            return (int)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearenv$MH() {
        return RuntimeHelper.requireNonNull(constants$46.clearenv$MH,"clearenv");
    }
    public static int clearenv () {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.clearenv$MH, "clearenv");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mktemp$MH() {
        return RuntimeHelper.requireNonNull(constants$46.mktemp$MH,"mktemp");
    }
    public static MemoryAddress mktemp ( Addressable __template) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.mktemp$MH, "mktemp");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemp$MH() {
        return RuntimeHelper.requireNonNull(constants$46.mkstemp$MH,"mkstemp");
    }
    public static int mkstemp ( Addressable __template) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.mkstemp$MH, "mkstemp");
        try {
            return (int)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemps$MH() {
        return RuntimeHelper.requireNonNull(constants$46.mkstemps$MH,"mkstemps");
    }
    public static int mkstemps ( Addressable __template,  int __suffixlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.mkstemps$MH, "mkstemps");
        try {
            return (int)mh$.invokeExact(__template, __suffixlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkdtemp$MH() {
        return RuntimeHelper.requireNonNull(constants$47.mkdtemp$MH,"mkdtemp");
    }
    public static MemoryAddress mkdtemp ( Addressable __template) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.mkdtemp$MH, "mkdtemp");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle system$MH() {
        return RuntimeHelper.requireNonNull(constants$47.system$MH,"system");
    }
    public static int system ( Addressable __command) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.system$MH, "system");
        try {
            return (int)mh$.invokeExact(__command);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realpath$MH() {
        return RuntimeHelper.requireNonNull(constants$47.realpath$MH,"realpath");
    }
    public static MemoryAddress realpath ( Addressable __name,  Addressable __resolved) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.realpath$MH, "realpath");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__name, __resolved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bsearch$MH() {
        return RuntimeHelper.requireNonNull(constants$47.bsearch$MH,"bsearch");
    }
    public static MemoryAddress bsearch ( Addressable __key,  Addressable __base,  long __nmemb,  long __size,  Addressable __compar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.bsearch$MH, "bsearch");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__key, __base, __nmemb, __size, __compar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle qsort$MH() {
        return RuntimeHelper.requireNonNull(constants$48.qsort$MH,"qsort");
    }
    public static void qsort ( Addressable __base,  long __nmemb,  long __size,  Addressable __compar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.qsort$MH, "qsort");
        try {
            mh$.invokeExact(__base, __nmemb, __size, __compar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abs$MH() {
        return RuntimeHelper.requireNonNull(constants$48.abs$MH,"abs");
    }
    public static int abs ( int __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.abs$MH, "abs");
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle labs$MH() {
        return RuntimeHelper.requireNonNull(constants$48.labs$MH,"labs");
    }
    public static long labs ( long __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.labs$MH, "labs");
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llabs$MH() {
        return RuntimeHelper.requireNonNull(constants$48.llabs$MH,"llabs");
    }
    public static long llabs ( long __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.llabs$MH, "llabs");
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle div$MH() {
        return RuntimeHelper.requireNonNull(constants$48.div$MH,"div");
    }
    public static MemorySegment div ( SegmentAllocator allocator,  int __numer,  int __denom) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.div$MH, "div");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment div ( ResourceScope scope,  int __numer,  int __denom) {
        return div(SegmentAllocator.nativeAllocator(scope), __numer, __denom);
    }
    public static MethodHandle ldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$48.ldiv$MH,"ldiv");
    }
    public static MemorySegment ldiv ( SegmentAllocator allocator,  long __numer,  long __denom) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.ldiv$MH, "ldiv");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment ldiv ( ResourceScope scope,  long __numer,  long __denom) {
        return ldiv(SegmentAllocator.nativeAllocator(scope), __numer, __denom);
    }
    public static MethodHandle lldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$49.lldiv$MH,"lldiv");
    }
    public static MemorySegment lldiv ( SegmentAllocator allocator,  long __numer,  long __denom) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.lldiv$MH, "lldiv");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment lldiv ( ResourceScope scope,  long __numer,  long __denom) {
        return lldiv(SegmentAllocator.nativeAllocator(scope), __numer, __denom);
    }
    public static MethodHandle ecvt$MH() {
        return RuntimeHelper.requireNonNull(constants$49.ecvt$MH,"ecvt");
    }
    public static MemoryAddress ecvt ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.ecvt$MH, "ecvt");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__value, __ndigit, __decpt, __sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$49.fcvt$MH,"fcvt");
    }
    public static MemoryAddress fcvt ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.fcvt$MH, "fcvt");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__value, __ndigit, __decpt, __sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$49.gcvt$MH,"gcvt");
    }
    public static MemoryAddress gcvt ( double __value,  int __ndigit,  Addressable __buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.gcvt$MH, "gcvt");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__value, __ndigit, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ecvt_r$MH() {
        return RuntimeHelper.requireNonNull(constants$49.ecvt_r$MH,"ecvt_r");
    }
    public static int ecvt_r ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign,  Addressable __buf,  long __len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.ecvt_r$MH, "ecvt_r");
        try {
            return (int)mh$.invokeExact(__value, __ndigit, __decpt, __sign, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt_r$MH() {
        return RuntimeHelper.requireNonNull(constants$49.fcvt_r$MH,"fcvt_r");
    }
    public static int fcvt_r ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign,  Addressable __buf,  long __len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.fcvt_r$MH, "fcvt_r");
        try {
            return (int)mh$.invokeExact(__value, __ndigit, __decpt, __sign, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mblen$MH() {
        return RuntimeHelper.requireNonNull(constants$50.mblen$MH,"mblen");
    }
    public static int mblen ( Addressable __s,  long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.mblen$MH, "mblen");
        try {
            return (int)mh$.invokeExact(__s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbtowc$MH() {
        return RuntimeHelper.requireNonNull(constants$50.mbtowc$MH,"mbtowc");
    }
    public static int mbtowc ( Addressable __pwc,  Addressable __s,  long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.mbtowc$MH, "mbtowc");
        try {
            return (int)mh$.invokeExact(__pwc, __s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wctomb$MH() {
        return RuntimeHelper.requireNonNull(constants$50.wctomb$MH,"wctomb");
    }
    public static int wctomb ( Addressable __s,  int __wchar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.wctomb$MH, "wctomb");
        try {
            return (int)mh$.invokeExact(__s, __wchar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbstowcs$MH() {
        return RuntimeHelper.requireNonNull(constants$50.mbstowcs$MH,"mbstowcs");
    }
    public static long mbstowcs ( Addressable __pwcs,  Addressable __s,  long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.mbstowcs$MH, "mbstowcs");
        try {
            return (long)mh$.invokeExact(__pwcs, __s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstombs$MH() {
        return RuntimeHelper.requireNonNull(constants$50.wcstombs$MH,"wcstombs");
    }
    public static long wcstombs ( Addressable __s,  Addressable __pwcs,  long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.wcstombs$MH, "wcstombs");
        try {
            return (long)mh$.invokeExact(__s, __pwcs, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rpmatch$MH() {
        return RuntimeHelper.requireNonNull(constants$50.rpmatch$MH,"rpmatch");
    }
    public static int rpmatch ( Addressable __response) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.rpmatch$MH, "rpmatch");
        try {
            return (int)mh$.invokeExact(__response);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsubopt$MH() {
        return RuntimeHelper.requireNonNull(constants$51.getsubopt$MH,"getsubopt");
    }
    public static int getsubopt ( Addressable __optionp,  Addressable __tokens,  Addressable __valuep) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.getsubopt$MH, "getsubopt");
        try {
            return (int)mh$.invokeExact(__optionp, __tokens, __valuep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getloadavg$MH() {
        return RuntimeHelper.requireNonNull(constants$51.getloadavg$MH,"getloadavg");
    }
    public static int getloadavg ( Addressable __loadavg,  int __nelem) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.getloadavg$MH, "getloadavg");
        try {
            return (int)mh$.invokeExact(__loadavg, __nelem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_error_quark$MH() {
        return RuntimeHelper.requireNonNull(constants$51.g_thread_error_quark$MH,"g_thread_error_quark");
    }
    public static int g_thread_error_quark () {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.g_thread_error_quark$MH, "g_thread_error_quark");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_THREAD_ERROR_AGAIN() {
        return (int)0L;
    }
    public static int G_ONCE_STATUS_NOTCALLED() {
        return (int)0L;
    }
    public static int G_ONCE_STATUS_PROGRESS() {
        return (int)1L;
    }
    public static int G_ONCE_STATUS_READY() {
        return (int)2L;
    }
    public static MethodHandle g_thread_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$51.g_thread_ref$MH,"g_thread_ref");
    }
    public static MemoryAddress g_thread_ref ( Addressable thread) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.g_thread_ref$MH, "g_thread_ref");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(thread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$52.g_thread_unref$MH,"g_thread_unref");
    }
    public static void g_thread_unref ( Addressable thread) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.g_thread_unref$MH, "g_thread_unref");
        try {
            mh$.invokeExact(thread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_new$MH() {
        return RuntimeHelper.requireNonNull(constants$52.g_thread_new$MH,"g_thread_new");
    }
    public static MemoryAddress g_thread_new ( Addressable name,  Addressable func,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.g_thread_new$MH, "g_thread_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(name, func, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_try_new$MH() {
        return RuntimeHelper.requireNonNull(constants$52.g_thread_try_new$MH,"g_thread_try_new");
    }
    public static MemoryAddress g_thread_try_new ( Addressable name,  Addressable func,  Addressable data,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.g_thread_try_new$MH, "g_thread_try_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(name, func, data, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_self$MH() {
        return RuntimeHelper.requireNonNull(constants$52.g_thread_self$MH,"g_thread_self");
    }
    public static MemoryAddress g_thread_self () {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.g_thread_self$MH, "g_thread_self");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$52.g_thread_exit$MH,"g_thread_exit");
    }
    public static void g_thread_exit ( Addressable retval) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.g_thread_exit$MH, "g_thread_exit");
        try {
            mh$.invokeExact(retval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_join$MH() {
        return RuntimeHelper.requireNonNull(constants$52.g_thread_join$MH,"g_thread_join");
    }
    public static MemoryAddress g_thread_join ( Addressable thread) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.g_thread_join$MH, "g_thread_join");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(thread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_yield$MH() {
        return RuntimeHelper.requireNonNull(constants$53.g_thread_yield$MH,"g_thread_yield");
    }
    public static void g_thread_yield () {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.g_thread_yield$MH, "g_thread_yield");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mutex_init$MH() {
        return RuntimeHelper.requireNonNull(constants$53.g_mutex_init$MH,"g_mutex_init");
    }
    public static void g_mutex_init ( Addressable mutex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.g_mutex_init$MH, "g_mutex_init");
        try {
            mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mutex_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$53.g_mutex_clear$MH,"g_mutex_clear");
    }
    public static void g_mutex_clear ( Addressable mutex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.g_mutex_clear$MH, "g_mutex_clear");
        try {
            mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mutex_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$53.g_mutex_lock$MH,"g_mutex_lock");
    }
    public static void g_mutex_lock ( Addressable mutex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.g_mutex_lock$MH, "g_mutex_lock");
        try {
            mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mutex_trylock$MH() {
        return RuntimeHelper.requireNonNull(constants$53.g_mutex_trylock$MH,"g_mutex_trylock");
    }
    public static int g_mutex_trylock ( Addressable mutex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.g_mutex_trylock$MH, "g_mutex_trylock");
        try {
            return (int)mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mutex_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$53.g_mutex_unlock$MH,"g_mutex_unlock");
    }
    public static void g_mutex_unlock ( Addressable mutex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.g_mutex_unlock$MH, "g_mutex_unlock");
        try {
            mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_init$MH() {
        return RuntimeHelper.requireNonNull(constants$54.g_rw_lock_init$MH,"g_rw_lock_init");
    }
    public static void g_rw_lock_init ( Addressable rw_lock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.g_rw_lock_init$MH, "g_rw_lock_init");
        try {
            mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$54.g_rw_lock_clear$MH,"g_rw_lock_clear");
    }
    public static void g_rw_lock_clear ( Addressable rw_lock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.g_rw_lock_clear$MH, "g_rw_lock_clear");
        try {
            mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_writer_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$54.g_rw_lock_writer_lock$MH,"g_rw_lock_writer_lock");
    }
    public static void g_rw_lock_writer_lock ( Addressable rw_lock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.g_rw_lock_writer_lock$MH, "g_rw_lock_writer_lock");
        try {
            mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_writer_trylock$MH() {
        return RuntimeHelper.requireNonNull(constants$54.g_rw_lock_writer_trylock$MH,"g_rw_lock_writer_trylock");
    }
    public static int g_rw_lock_writer_trylock ( Addressable rw_lock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.g_rw_lock_writer_trylock$MH, "g_rw_lock_writer_trylock");
        try {
            return (int)mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_writer_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$54.g_rw_lock_writer_unlock$MH,"g_rw_lock_writer_unlock");
    }
    public static void g_rw_lock_writer_unlock ( Addressable rw_lock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.g_rw_lock_writer_unlock$MH, "g_rw_lock_writer_unlock");
        try {
            mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_reader_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$54.g_rw_lock_reader_lock$MH,"g_rw_lock_reader_lock");
    }
    public static void g_rw_lock_reader_lock ( Addressable rw_lock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.g_rw_lock_reader_lock$MH, "g_rw_lock_reader_lock");
        try {
            mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_reader_trylock$MH() {
        return RuntimeHelper.requireNonNull(constants$55.g_rw_lock_reader_trylock$MH,"g_rw_lock_reader_trylock");
    }
    public static int g_rw_lock_reader_trylock ( Addressable rw_lock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.g_rw_lock_reader_trylock$MH, "g_rw_lock_reader_trylock");
        try {
            return (int)mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_reader_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$55.g_rw_lock_reader_unlock$MH,"g_rw_lock_reader_unlock");
    }
    public static void g_rw_lock_reader_unlock ( Addressable rw_lock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.g_rw_lock_reader_unlock$MH, "g_rw_lock_reader_unlock");
        try {
            mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rec_mutex_init$MH() {
        return RuntimeHelper.requireNonNull(constants$55.g_rec_mutex_init$MH,"g_rec_mutex_init");
    }
    public static void g_rec_mutex_init ( Addressable rec_mutex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.g_rec_mutex_init$MH, "g_rec_mutex_init");
        try {
            mh$.invokeExact(rec_mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rec_mutex_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$55.g_rec_mutex_clear$MH,"g_rec_mutex_clear");
    }
    public static void g_rec_mutex_clear ( Addressable rec_mutex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.g_rec_mutex_clear$MH, "g_rec_mutex_clear");
        try {
            mh$.invokeExact(rec_mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rec_mutex_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$55.g_rec_mutex_lock$MH,"g_rec_mutex_lock");
    }
    public static void g_rec_mutex_lock ( Addressable rec_mutex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.g_rec_mutex_lock$MH, "g_rec_mutex_lock");
        try {
            mh$.invokeExact(rec_mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rec_mutex_trylock$MH() {
        return RuntimeHelper.requireNonNull(constants$55.g_rec_mutex_trylock$MH,"g_rec_mutex_trylock");
    }
    public static int g_rec_mutex_trylock ( Addressable rec_mutex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.g_rec_mutex_trylock$MH, "g_rec_mutex_trylock");
        try {
            return (int)mh$.invokeExact(rec_mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rec_mutex_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$56.g_rec_mutex_unlock$MH,"g_rec_mutex_unlock");
    }
    public static void g_rec_mutex_unlock ( Addressable rec_mutex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.g_rec_mutex_unlock$MH, "g_rec_mutex_unlock");
        try {
            mh$.invokeExact(rec_mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cond_init$MH() {
        return RuntimeHelper.requireNonNull(constants$56.g_cond_init$MH,"g_cond_init");
    }
    public static void g_cond_init ( Addressable cond) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.g_cond_init$MH, "g_cond_init");
        try {
            mh$.invokeExact(cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cond_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$56.g_cond_clear$MH,"g_cond_clear");
    }
    public static void g_cond_clear ( Addressable cond) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.g_cond_clear$MH, "g_cond_clear");
        try {
            mh$.invokeExact(cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cond_wait$MH() {
        return RuntimeHelper.requireNonNull(constants$56.g_cond_wait$MH,"g_cond_wait");
    }
    public static void g_cond_wait ( Addressable cond,  Addressable mutex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.g_cond_wait$MH, "g_cond_wait");
        try {
            mh$.invokeExact(cond, mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cond_signal$MH() {
        return RuntimeHelper.requireNonNull(constants$56.g_cond_signal$MH,"g_cond_signal");
    }
    public static void g_cond_signal ( Addressable cond) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.g_cond_signal$MH, "g_cond_signal");
        try {
            mh$.invokeExact(cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cond_broadcast$MH() {
        return RuntimeHelper.requireNonNull(constants$56.g_cond_broadcast$MH,"g_cond_broadcast");
    }
    public static void g_cond_broadcast ( Addressable cond) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.g_cond_broadcast$MH, "g_cond_broadcast");
        try {
            mh$.invokeExact(cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cond_wait_until$MH() {
        return RuntimeHelper.requireNonNull(constants$57.g_cond_wait_until$MH,"g_cond_wait_until");
    }
    public static int g_cond_wait_until ( Addressable cond,  Addressable mutex,  long end_time) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.g_cond_wait_until$MH, "g_cond_wait_until");
        try {
            return (int)mh$.invokeExact(cond, mutex, end_time);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_private_get$MH() {
        return RuntimeHelper.requireNonNull(constants$57.g_private_get$MH,"g_private_get");
    }
    public static MemoryAddress g_private_get ( Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.g_private_get$MH, "g_private_get");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_private_set$MH() {
        return RuntimeHelper.requireNonNull(constants$57.g_private_set$MH,"g_private_set");
    }
    public static void g_private_set ( Addressable key,  Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.g_private_set$MH, "g_private_set");
        try {
            mh$.invokeExact(key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_private_replace$MH() {
        return RuntimeHelper.requireNonNull(constants$57.g_private_replace$MH,"g_private_replace");
    }
    public static void g_private_replace ( Addressable key,  Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.g_private_replace$MH, "g_private_replace");
        try {
            mh$.invokeExact(key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_once_impl$MH() {
        return RuntimeHelper.requireNonNull(constants$57.g_once_impl$MH,"g_once_impl");
    }
    public static MemoryAddress g_once_impl ( Addressable once,  Addressable func,  Addressable arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.g_once_impl$MH, "g_once_impl");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(once, func, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_once_init_enter$MH() {
        return RuntimeHelper.requireNonNull(constants$57.g_once_init_enter$MH,"g_once_init_enter");
    }
    public static int g_once_init_enter ( Addressable location) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.g_once_init_enter$MH, "g_once_init_enter");
        try {
            return (int)mh$.invokeExact(location);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_once_init_leave$MH() {
        return RuntimeHelper.requireNonNull(constants$58.g_once_init_leave$MH,"g_once_init_leave");
    }
    public static void g_once_init_leave ( Addressable location,  long result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.g_once_init_leave$MH, "g_once_init_leave");
        try {
            mh$.invokeExact(location, result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_num_processors$MH() {
        return RuntimeHelper.requireNonNull(constants$58.g_get_num_processors$MH,"g_get_num_processors");
    }
    public static int g_get_num_processors () {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.g_get_num_processors$MH, "g_get_num_processors");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mutex_locker_new$MH() {
        return RuntimeHelper.requireNonNull(constants$58.g_mutex_locker_new$MH,"g_mutex_locker_new");
    }
    public static MemoryAddress g_mutex_locker_new ( Addressable mutex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.g_mutex_locker_new$MH, "g_mutex_locker_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mutex_locker_free$MH() {
        return RuntimeHelper.requireNonNull(constants$58.g_mutex_locker_free$MH,"g_mutex_locker_free");
    }
    public static void g_mutex_locker_free ( Addressable locker) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.g_mutex_locker_free$MH, "g_mutex_locker_free");
        try {
            mh$.invokeExact(locker);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rec_mutex_locker_new$MH() {
        return RuntimeHelper.requireNonNull(constants$58.g_rec_mutex_locker_new$MH,"g_rec_mutex_locker_new");
    }
    public static MemoryAddress g_rec_mutex_locker_new ( Addressable rec_mutex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.g_rec_mutex_locker_new$MH, "g_rec_mutex_locker_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(rec_mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rec_mutex_locker_free$MH() {
        return RuntimeHelper.requireNonNull(constants$58.g_rec_mutex_locker_free$MH,"g_rec_mutex_locker_free");
    }
    public static void g_rec_mutex_locker_free ( Addressable locker) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.g_rec_mutex_locker_free$MH, "g_rec_mutex_locker_free");
        try {
            mh$.invokeExact(locker);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_writer_locker_new$MH() {
        return RuntimeHelper.requireNonNull(constants$59.g_rw_lock_writer_locker_new$MH,"g_rw_lock_writer_locker_new");
    }
    public static MemoryAddress g_rw_lock_writer_locker_new ( Addressable rw_lock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.g_rw_lock_writer_locker_new$MH, "g_rw_lock_writer_locker_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_writer_locker_free$MH() {
        return RuntimeHelper.requireNonNull(constants$59.g_rw_lock_writer_locker_free$MH,"g_rw_lock_writer_locker_free");
    }
    public static void g_rw_lock_writer_locker_free ( Addressable locker) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.g_rw_lock_writer_locker_free$MH, "g_rw_lock_writer_locker_free");
        try {
            mh$.invokeExact(locker);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_reader_locker_new$MH() {
        return RuntimeHelper.requireNonNull(constants$59.g_rw_lock_reader_locker_new$MH,"g_rw_lock_reader_locker_new");
    }
    public static MemoryAddress g_rw_lock_reader_locker_new ( Addressable rw_lock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.g_rw_lock_reader_locker_new$MH, "g_rw_lock_reader_locker_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_reader_locker_free$MH() {
        return RuntimeHelper.requireNonNull(constants$59.g_rw_lock_reader_locker_free$MH,"g_rw_lock_reader_locker_free");
    }
    public static void g_rw_lock_reader_locker_free ( Addressable locker) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.g_rw_lock_reader_locker_free$MH, "g_rw_lock_reader_locker_free");
        try {
            mh$.invokeExact(locker);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_new$MH() {
        return RuntimeHelper.requireNonNull(constants$59.g_async_queue_new$MH,"g_async_queue_new");
    }
    public static MemoryAddress g_async_queue_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.g_async_queue_new$MH, "g_async_queue_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_new_full$MH() {
        return RuntimeHelper.requireNonNull(constants$59.g_async_queue_new_full$MH,"g_async_queue_new_full");
    }
    public static MemoryAddress g_async_queue_new_full ( Addressable item_free_func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.g_async_queue_new_full$MH, "g_async_queue_new_full");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(item_free_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$60.g_async_queue_lock$MH,"g_async_queue_lock");
    }
    public static void g_async_queue_lock ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.g_async_queue_lock$MH, "g_async_queue_lock");
        try {
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$60.g_async_queue_unlock$MH,"g_async_queue_unlock");
    }
    public static void g_async_queue_unlock ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.g_async_queue_unlock$MH, "g_async_queue_unlock");
        try {
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$60.g_async_queue_ref$MH,"g_async_queue_ref");
    }
    public static MemoryAddress g_async_queue_ref ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.g_async_queue_ref$MH, "g_async_queue_ref");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$60.g_async_queue_unref$MH,"g_async_queue_unref");
    }
    public static void g_async_queue_unref ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.g_async_queue_unref$MH, "g_async_queue_unref");
        try {
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_ref_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$60.g_async_queue_ref_unlocked$MH,"g_async_queue_ref_unlocked");
    }
    public static void g_async_queue_ref_unlocked ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.g_async_queue_ref_unlocked$MH, "g_async_queue_ref_unlocked");
        try {
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_unref_and_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$60.g_async_queue_unref_and_unlock$MH,"g_async_queue_unref_and_unlock");
    }
    public static void g_async_queue_unref_and_unlock ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.g_async_queue_unref_and_unlock$MH, "g_async_queue_unref_and_unlock");
        try {
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_push$MH() {
        return RuntimeHelper.requireNonNull(constants$61.g_async_queue_push$MH,"g_async_queue_push");
    }
    public static void g_async_queue_push ( Addressable queue,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.g_async_queue_push$MH, "g_async_queue_push");
        try {
            mh$.invokeExact(queue, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_push_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$61.g_async_queue_push_unlocked$MH,"g_async_queue_push_unlocked");
    }
    public static void g_async_queue_push_unlocked ( Addressable queue,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.g_async_queue_push_unlocked$MH, "g_async_queue_push_unlocked");
        try {
            mh$.invokeExact(queue, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_push_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$61.g_async_queue_push_sorted$MH,"g_async_queue_push_sorted");
    }
    public static void g_async_queue_push_sorted ( Addressable queue,  Addressable data,  Addressable func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.g_async_queue_push_sorted$MH, "g_async_queue_push_sorted");
        try {
            mh$.invokeExact(queue, data, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_push_sorted_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$61.g_async_queue_push_sorted_unlocked$MH,"g_async_queue_push_sorted_unlocked");
    }
    public static void g_async_queue_push_sorted_unlocked ( Addressable queue,  Addressable data,  Addressable func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.g_async_queue_push_sorted_unlocked$MH, "g_async_queue_push_sorted_unlocked");
        try {
            mh$.invokeExact(queue, data, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$61.g_async_queue_pop$MH,"g_async_queue_pop");
    }
    public static MemoryAddress g_async_queue_pop ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.g_async_queue_pop$MH, "g_async_queue_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_pop_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$61.g_async_queue_pop_unlocked$MH,"g_async_queue_pop_unlocked");
    }
    public static MemoryAddress g_async_queue_pop_unlocked ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.g_async_queue_pop_unlocked$MH, "g_async_queue_pop_unlocked");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_try_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$62.g_async_queue_try_pop$MH,"g_async_queue_try_pop");
    }
    public static MemoryAddress g_async_queue_try_pop ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.g_async_queue_try_pop$MH, "g_async_queue_try_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_try_pop_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$62.g_async_queue_try_pop_unlocked$MH,"g_async_queue_try_pop_unlocked");
    }
    public static MemoryAddress g_async_queue_try_pop_unlocked ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.g_async_queue_try_pop_unlocked$MH, "g_async_queue_try_pop_unlocked");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_timeout_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$62.g_async_queue_timeout_pop$MH,"g_async_queue_timeout_pop");
    }
    public static MemoryAddress g_async_queue_timeout_pop ( Addressable queue,  long timeout) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.g_async_queue_timeout_pop$MH, "g_async_queue_timeout_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(queue, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_timeout_pop_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$62.g_async_queue_timeout_pop_unlocked$MH,"g_async_queue_timeout_pop_unlocked");
    }
    public static MemoryAddress g_async_queue_timeout_pop_unlocked ( Addressable queue,  long timeout) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.g_async_queue_timeout_pop_unlocked$MH, "g_async_queue_timeout_pop_unlocked");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(queue, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_length$MH() {
        return RuntimeHelper.requireNonNull(constants$62.g_async_queue_length$MH,"g_async_queue_length");
    }
    public static int g_async_queue_length ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.g_async_queue_length$MH, "g_async_queue_length");
        try {
            return (int)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_length_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$62.g_async_queue_length_unlocked$MH,"g_async_queue_length_unlocked");
    }
    public static int g_async_queue_length_unlocked ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.g_async_queue_length_unlocked$MH, "g_async_queue_length_unlocked");
        try {
            return (int)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$63.g_async_queue_sort$MH,"g_async_queue_sort");
    }
    public static void g_async_queue_sort ( Addressable queue,  Addressable func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.g_async_queue_sort$MH, "g_async_queue_sort");
        try {
            mh$.invokeExact(queue, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_sort_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$63.g_async_queue_sort_unlocked$MH,"g_async_queue_sort_unlocked");
    }
    public static void g_async_queue_sort_unlocked ( Addressable queue,  Addressable func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.g_async_queue_sort_unlocked$MH, "g_async_queue_sort_unlocked");
        try {
            mh$.invokeExact(queue, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$63.g_async_queue_remove$MH,"g_async_queue_remove");
    }
    public static int g_async_queue_remove ( Addressable queue,  Addressable item) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.g_async_queue_remove$MH, "g_async_queue_remove");
        try {
            return (int)mh$.invokeExact(queue, item);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_remove_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$63.g_async_queue_remove_unlocked$MH,"g_async_queue_remove_unlocked");
    }
    public static int g_async_queue_remove_unlocked ( Addressable queue,  Addressable item) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.g_async_queue_remove_unlocked$MH, "g_async_queue_remove_unlocked");
        try {
            return (int)mh$.invokeExact(queue, item);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_push_front$MH() {
        return RuntimeHelper.requireNonNull(constants$63.g_async_queue_push_front$MH,"g_async_queue_push_front");
    }
    public static void g_async_queue_push_front ( Addressable queue,  Addressable item) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.g_async_queue_push_front$MH, "g_async_queue_push_front");
        try {
            mh$.invokeExact(queue, item);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_push_front_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$63.g_async_queue_push_front_unlocked$MH,"g_async_queue_push_front_unlocked");
    }
    public static void g_async_queue_push_front_unlocked ( Addressable queue,  Addressable item) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.g_async_queue_push_front_unlocked$MH, "g_async_queue_push_front_unlocked");
        try {
            mh$.invokeExact(queue, item);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_timed_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$64.g_async_queue_timed_pop$MH,"g_async_queue_timed_pop");
    }
    public static MemoryAddress g_async_queue_timed_pop ( Addressable queue,  Addressable end_time) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.g_async_queue_timed_pop$MH, "g_async_queue_timed_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(queue, end_time);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_timed_pop_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$64.g_async_queue_timed_pop_unlocked$MH,"g_async_queue_timed_pop_unlocked");
    }
    public static MemoryAddress g_async_queue_timed_pop_unlocked ( Addressable queue,  Addressable end_time) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.g_async_queue_timed_pop_unlocked$MH, "g_async_queue_timed_pop_unlocked");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(queue, end_time);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfInt sig_atomic_t = Constants$root.C_INT$LAYOUT;
    public static int SI_ASYNCNL() {
        return (int)-60L;
    }
    public static int SI_DETHREAD() {
        return (int)-7L;
    }
    public static int SI_TKILL() {
        return (int)-6L;
    }
    public static int SI_SIGIO() {
        return (int)-5L;
    }
    public static int SI_ASYNCIO() {
        return (int)-4L;
    }
    public static int SI_MESGQ() {
        return (int)-3L;
    }
    public static int SI_TIMER() {
        return (int)-2L;
    }
    public static int SI_QUEUE() {
        return (int)-1L;
    }
    public static int SI_USER() {
        return (int)0L;
    }
    public static int SI_KERNEL() {
        return (int)128L;
    }
    public static int ILL_ILLOPC() {
        return (int)1L;
    }
    public static int ILL_ILLOPN() {
        return (int)2L;
    }
    public static int ILL_ILLADR() {
        return (int)3L;
    }
    public static int ILL_ILLTRP() {
        return (int)4L;
    }
    public static int ILL_PRVOPC() {
        return (int)5L;
    }
    public static int ILL_PRVREG() {
        return (int)6L;
    }
    public static int ILL_COPROC() {
        return (int)7L;
    }
    public static int ILL_BADSTK() {
        return (int)8L;
    }
    public static int ILL_BADIADDR() {
        return (int)9L;
    }
    public static int FPE_INTDIV() {
        return (int)1L;
    }
    public static int FPE_INTOVF() {
        return (int)2L;
    }
    public static int FPE_FLTDIV() {
        return (int)3L;
    }
    public static int FPE_FLTOVF() {
        return (int)4L;
    }
    public static int FPE_FLTUND() {
        return (int)5L;
    }
    public static int FPE_FLTRES() {
        return (int)6L;
    }
    public static int FPE_FLTINV() {
        return (int)7L;
    }
    public static int FPE_FLTSUB() {
        return (int)8L;
    }
    public static int FPE_FLTUNK() {
        return (int)14L;
    }
    public static int FPE_CONDTRAP() {
        return (int)15L;
    }
    public static int SEGV_MAPERR() {
        return (int)1L;
    }
    public static int SEGV_ACCERR() {
        return (int)2L;
    }
    public static int SEGV_BNDERR() {
        return (int)3L;
    }
    public static int SEGV_PKUERR() {
        return (int)4L;
    }
    public static int SEGV_ACCADI() {
        return (int)5L;
    }
    public static int SEGV_ADIDERR() {
        return (int)6L;
    }
    public static int SEGV_ADIPERR() {
        return (int)7L;
    }
    public static int SEGV_MTEAERR() {
        return (int)8L;
    }
    public static int SEGV_MTESERR() {
        return (int)9L;
    }
    public static int BUS_ADRALN() {
        return (int)1L;
    }
    public static int BUS_ADRERR() {
        return (int)2L;
    }
    public static int BUS_OBJERR() {
        return (int)3L;
    }
    public static int BUS_MCEERR_AR() {
        return (int)4L;
    }
    public static int BUS_MCEERR_AO() {
        return (int)5L;
    }
    public static int CLD_EXITED() {
        return (int)1L;
    }
    public static int CLD_KILLED() {
        return (int)2L;
    }
    public static int CLD_DUMPED() {
        return (int)3L;
    }
    public static int CLD_TRAPPED() {
        return (int)4L;
    }
    public static int CLD_STOPPED() {
        return (int)5L;
    }
    public static int CLD_CONTINUED() {
        return (int)6L;
    }
    public static int POLL_IN() {
        return (int)1L;
    }
    public static int POLL_OUT() {
        return (int)2L;
    }
    public static int POLL_MSG() {
        return (int)3L;
    }
    public static int POLL_ERR() {
        return (int)4L;
    }
    public static int POLL_PRI() {
        return (int)5L;
    }
    public static int POLL_HUP() {
        return (int)6L;
    }
    public static int SIGEV_SIGNAL() {
        return (int)0L;
    }
    public static int SIGEV_NONE() {
        return (int)1L;
    }
    public static int SIGEV_THREAD() {
        return (int)2L;
    }
    public static int SIGEV_THREAD_ID() {
        return (int)4L;
    }
    public static MethodHandle __sysv_signal$MH() {
        return RuntimeHelper.requireNonNull(constants$64.__sysv_signal$MH,"__sysv_signal");
    }
    public static MemoryAddress __sysv_signal ( int __sig,  Addressable __handler) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.__sysv_signal$MH, "__sysv_signal");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__sig, __handler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle signal$MH() {
        return RuntimeHelper.requireNonNull(constants$64.signal$MH,"signal");
    }
    public static MemoryAddress signal ( int __sig,  Addressable __handler) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.signal$MH, "signal");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__sig, __handler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle kill$MH() {
        return RuntimeHelper.requireNonNull(constants$65.kill$MH,"kill");
    }
    public static int kill ( int __pid,  int __sig) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.kill$MH, "kill");
        try {
            return (int)mh$.invokeExact(__pid, __sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle killpg$MH() {
        return RuntimeHelper.requireNonNull(constants$65.killpg$MH,"killpg");
    }
    public static int killpg ( int __pgrp,  int __sig) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.killpg$MH, "killpg");
        try {
            return (int)mh$.invokeExact(__pgrp, __sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle raise$MH() {
        return RuntimeHelper.requireNonNull(constants$65.raise$MH,"raise");
    }
    public static int raise ( int __sig) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.raise$MH, "raise");
        try {
            return (int)mh$.invokeExact(__sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ssignal$MH() {
        return RuntimeHelper.requireNonNull(constants$65.ssignal$MH,"ssignal");
    }
    public static MemoryAddress ssignal ( int __sig,  Addressable __handler) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.ssignal$MH, "ssignal");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__sig, __handler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gsignal$MH() {
        return RuntimeHelper.requireNonNull(constants$65.gsignal$MH,"gsignal");
    }
    public static int gsignal ( int __sig) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.gsignal$MH, "gsignal");
        try {
            return (int)mh$.invokeExact(__sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle psignal$MH() {
        return RuntimeHelper.requireNonNull(constants$65.psignal$MH,"psignal");
    }
    public static void psignal ( int __sig,  Addressable __s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.psignal$MH, "psignal");
        try {
            mh$.invokeExact(__sig, __s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle psiginfo$MH() {
        return RuntimeHelper.requireNonNull(constants$66.psiginfo$MH,"psiginfo");
    }
    public static void psiginfo ( Addressable __pinfo,  Addressable __s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.psiginfo$MH, "psiginfo");
        try {
            mh$.invokeExact(__pinfo, __s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigblock$MH() {
        return RuntimeHelper.requireNonNull(constants$66.sigblock$MH,"sigblock");
    }
    public static int sigblock ( int __mask) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.sigblock$MH, "sigblock");
        try {
            return (int)mh$.invokeExact(__mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigsetmask$MH() {
        return RuntimeHelper.requireNonNull(constants$66.sigsetmask$MH,"sigsetmask");
    }
    public static int sigsetmask ( int __mask) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.sigsetmask$MH, "sigsetmask");
        try {
            return (int)mh$.invokeExact(__mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle siggetmask$MH() {
        return RuntimeHelper.requireNonNull(constants$66.siggetmask$MH,"siggetmask");
    }
    public static int siggetmask () {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.siggetmask$MH, "siggetmask");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigemptyset$MH() {
        return RuntimeHelper.requireNonNull(constants$67.sigemptyset$MH,"sigemptyset");
    }
    public static int sigemptyset ( Addressable __set) {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.sigemptyset$MH, "sigemptyset");
        try {
            return (int)mh$.invokeExact(__set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigfillset$MH() {
        return RuntimeHelper.requireNonNull(constants$67.sigfillset$MH,"sigfillset");
    }
    public static int sigfillset ( Addressable __set) {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.sigfillset$MH, "sigfillset");
        try {
            return (int)mh$.invokeExact(__set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigaddset$MH() {
        return RuntimeHelper.requireNonNull(constants$67.sigaddset$MH,"sigaddset");
    }
    public static int sigaddset ( Addressable __set,  int __signo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.sigaddset$MH, "sigaddset");
        try {
            return (int)mh$.invokeExact(__set, __signo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigdelset$MH() {
        return RuntimeHelper.requireNonNull(constants$67.sigdelset$MH,"sigdelset");
    }
    public static int sigdelset ( Addressable __set,  int __signo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.sigdelset$MH, "sigdelset");
        try {
            return (int)mh$.invokeExact(__set, __signo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigismember$MH() {
        return RuntimeHelper.requireNonNull(constants$67.sigismember$MH,"sigismember");
    }
    public static int sigismember ( Addressable __set,  int __signo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.sigismember$MH, "sigismember");
        try {
            return (int)mh$.invokeExact(__set, __signo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigprocmask$MH() {
        return RuntimeHelper.requireNonNull(constants$67.sigprocmask$MH,"sigprocmask");
    }
    public static int sigprocmask ( int __how,  Addressable __set,  Addressable __oset) {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.sigprocmask$MH, "sigprocmask");
        try {
            return (int)mh$.invokeExact(__how, __set, __oset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigsuspend$MH() {
        return RuntimeHelper.requireNonNull(constants$68.sigsuspend$MH,"sigsuspend");
    }
    public static int sigsuspend ( Addressable __set) {
        var mh$ = RuntimeHelper.requireNonNull(constants$68.sigsuspend$MH, "sigsuspend");
        try {
            return (int)mh$.invokeExact(__set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigaction$MH() {
        return RuntimeHelper.requireNonNull(constants$68.sigaction$MH,"sigaction");
    }
    public static int sigaction ( int __sig,  Addressable __act,  Addressable __oact) {
        var mh$ = RuntimeHelper.requireNonNull(constants$68.sigaction$MH, "sigaction");
        try {
            return (int)mh$.invokeExact(__sig, __act, __oact);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigpending$MH() {
        return RuntimeHelper.requireNonNull(constants$68.sigpending$MH,"sigpending");
    }
    public static int sigpending ( Addressable __set) {
        var mh$ = RuntimeHelper.requireNonNull(constants$68.sigpending$MH, "sigpending");
        try {
            return (int)mh$.invokeExact(__set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigwait$MH() {
        return RuntimeHelper.requireNonNull(constants$68.sigwait$MH,"sigwait");
    }
    public static int sigwait ( Addressable __set,  Addressable __sig) {
        var mh$ = RuntimeHelper.requireNonNull(constants$68.sigwait$MH, "sigwait");
        try {
            return (int)mh$.invokeExact(__set, __sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigwaitinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$68.sigwaitinfo$MH,"sigwaitinfo");
    }
    public static int sigwaitinfo ( Addressable __set,  Addressable __info) {
        var mh$ = RuntimeHelper.requireNonNull(constants$68.sigwaitinfo$MH, "sigwaitinfo");
        try {
            return (int)mh$.invokeExact(__set, __info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigtimedwait$MH() {
        return RuntimeHelper.requireNonNull(constants$68.sigtimedwait$MH,"sigtimedwait");
    }
    public static int sigtimedwait ( Addressable __set,  Addressable __info,  Addressable __timeout) {
        var mh$ = RuntimeHelper.requireNonNull(constants$68.sigtimedwait$MH, "sigtimedwait");
        try {
            return (int)mh$.invokeExact(__set, __info, __timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigqueue$MH() {
        return RuntimeHelper.requireNonNull(constants$69.sigqueue$MH,"sigqueue");
    }
    public static int sigqueue ( int __pid,  int __sig,  MemorySegment __val) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.sigqueue$MH, "sigqueue");
        try {
            return (int)mh$.invokeExact(__pid, __sig, __val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigreturn$MH() {
        return RuntimeHelper.requireNonNull(constants$69.sigreturn$MH,"sigreturn");
    }
    public static int sigreturn ( Addressable __scp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.sigreturn$MH, "sigreturn");
        try {
            return (int)mh$.invokeExact(__scp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong greg_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress fpregset_t = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle siginterrupt$MH() {
        return RuntimeHelper.requireNonNull(constants$69.siginterrupt$MH,"siginterrupt");
    }
    public static int siginterrupt ( int __sig,  int __interrupt) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.siginterrupt$MH, "siginterrupt");
        try {
            return (int)mh$.invokeExact(__sig, __interrupt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int SS_ONSTACK() {
        return (int)1L;
    }
    public static int SS_DISABLE() {
        return (int)2L;
    }
    public static MethodHandle sigaltstack$MH() {
        return RuntimeHelper.requireNonNull(constants$69.sigaltstack$MH,"sigaltstack");
    }
    public static int sigaltstack ( Addressable __ss,  Addressable __oss) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.sigaltstack$MH, "sigaltstack");
        try {
            return (int)mh$.invokeExact(__ss, __oss);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigstack$MH() {
        return RuntimeHelper.requireNonNull(constants$69.sigstack$MH,"sigstack");
    }
    public static int sigstack ( Addressable __ss,  Addressable __oss) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.sigstack$MH, "sigstack");
        try {
            return (int)mh$.invokeExact(__ss, __oss);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_sigmask$MH() {
        return RuntimeHelper.requireNonNull(constants$69.pthread_sigmask$MH,"pthread_sigmask");
    }
    public static int pthread_sigmask ( int __how,  Addressable __newmask,  Addressable __oldmask) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.pthread_sigmask$MH, "pthread_sigmask");
        try {
            return (int)mh$.invokeExact(__how, __newmask, __oldmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_kill$MH() {
        return RuntimeHelper.requireNonNull(constants$70.pthread_kill$MH,"pthread_kill");
    }
    public static int pthread_kill ( long __threadid,  int __signo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$70.pthread_kill$MH, "pthread_kill");
        try {
            return (int)mh$.invokeExact(__threadid, __signo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __libc_current_sigrtmin$MH() {
        return RuntimeHelper.requireNonNull(constants$70.__libc_current_sigrtmin$MH,"__libc_current_sigrtmin");
    }
    public static int __libc_current_sigrtmin () {
        var mh$ = RuntimeHelper.requireNonNull(constants$70.__libc_current_sigrtmin$MH, "__libc_current_sigrtmin");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __libc_current_sigrtmax$MH() {
        return RuntimeHelper.requireNonNull(constants$70.__libc_current_sigrtmax$MH,"__libc_current_sigrtmax");
    }
    public static int __libc_current_sigrtmax () {
        var mh$ = RuntimeHelper.requireNonNull(constants$70.__libc_current_sigrtmax$MH, "__libc_current_sigrtmax");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_on_error_query$MH() {
        return RuntimeHelper.requireNonNull(constants$70.g_on_error_query$MH,"g_on_error_query");
    }
    public static void g_on_error_query ( Addressable prg_name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$70.g_on_error_query$MH, "g_on_error_query");
        try {
            mh$.invokeExact(prg_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_on_error_stack_trace$MH() {
        return RuntimeHelper.requireNonNull(constants$70.g_on_error_stack_trace$MH,"g_on_error_stack_trace");
    }
    public static void g_on_error_stack_trace ( Addressable prg_name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$70.g_on_error_stack_trace$MH, "g_on_error_stack_trace");
        try {
            mh$.invokeExact(prg_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_base64_encode_step$MH() {
        return RuntimeHelper.requireNonNull(constants$70.g_base64_encode_step$MH,"g_base64_encode_step");
    }
    public static long g_base64_encode_step ( Addressable in,  long len,  int break_lines,  Addressable out,  Addressable state,  Addressable save) {
        var mh$ = RuntimeHelper.requireNonNull(constants$70.g_base64_encode_step$MH, "g_base64_encode_step");
        try {
            return (long)mh$.invokeExact(in, len, break_lines, out, state, save);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_base64_encode_close$MH() {
        return RuntimeHelper.requireNonNull(constants$71.g_base64_encode_close$MH,"g_base64_encode_close");
    }
    public static long g_base64_encode_close ( int break_lines,  Addressable out,  Addressable state,  Addressable save) {
        var mh$ = RuntimeHelper.requireNonNull(constants$71.g_base64_encode_close$MH, "g_base64_encode_close");
        try {
            return (long)mh$.invokeExact(break_lines, out, state, save);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_base64_encode$MH() {
        return RuntimeHelper.requireNonNull(constants$71.g_base64_encode$MH,"g_base64_encode");
    }
    public static MemoryAddress g_base64_encode ( Addressable data,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$71.g_base64_encode$MH, "g_base64_encode");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_base64_decode_step$MH() {
        return RuntimeHelper.requireNonNull(constants$71.g_base64_decode_step$MH,"g_base64_decode_step");
    }
    public static long g_base64_decode_step ( Addressable in,  long len,  Addressable out,  Addressable state,  Addressable save) {
        var mh$ = RuntimeHelper.requireNonNull(constants$71.g_base64_decode_step$MH, "g_base64_decode_step");
        try {
            return (long)mh$.invokeExact(in, len, out, state, save);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_base64_decode$MH() {
        return RuntimeHelper.requireNonNull(constants$71.g_base64_decode$MH,"g_base64_decode");
    }
    public static MemoryAddress g_base64_decode ( Addressable text,  Addressable out_len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$71.g_base64_decode$MH, "g_base64_decode");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(text, out_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_base64_decode_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$71.g_base64_decode_inplace$MH,"g_base64_decode_inplace");
    }
    public static MemoryAddress g_base64_decode_inplace ( Addressable text,  Addressable out_len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$71.g_base64_decode_inplace$MH, "g_base64_decode_inplace");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(text, out_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bit_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$71.g_bit_lock$MH,"g_bit_lock");
    }
    public static void g_bit_lock ( Addressable address,  int lock_bit) {
        var mh$ = RuntimeHelper.requireNonNull(constants$71.g_bit_lock$MH, "g_bit_lock");
        try {
            mh$.invokeExact(address, lock_bit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bit_trylock$MH() {
        return RuntimeHelper.requireNonNull(constants$72.g_bit_trylock$MH,"g_bit_trylock");
    }
    public static int g_bit_trylock ( Addressable address,  int lock_bit) {
        var mh$ = RuntimeHelper.requireNonNull(constants$72.g_bit_trylock$MH, "g_bit_trylock");
        try {
            return (int)mh$.invokeExact(address, lock_bit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bit_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$72.g_bit_unlock$MH,"g_bit_unlock");
    }
    public static void g_bit_unlock ( Addressable address,  int lock_bit) {
        var mh$ = RuntimeHelper.requireNonNull(constants$72.g_bit_unlock$MH, "g_bit_unlock");
        try {
            mh$.invokeExact(address, lock_bit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_pointer_bit_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$72.g_pointer_bit_lock$MH,"g_pointer_bit_lock");
    }
    public static void g_pointer_bit_lock ( Addressable address,  int lock_bit) {
        var mh$ = RuntimeHelper.requireNonNull(constants$72.g_pointer_bit_lock$MH, "g_pointer_bit_lock");
        try {
            mh$.invokeExact(address, lock_bit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_pointer_bit_trylock$MH() {
        return RuntimeHelper.requireNonNull(constants$72.g_pointer_bit_trylock$MH,"g_pointer_bit_trylock");
    }
    public static int g_pointer_bit_trylock ( Addressable address,  int lock_bit) {
        var mh$ = RuntimeHelper.requireNonNull(constants$72.g_pointer_bit_trylock$MH, "g_pointer_bit_trylock");
        try {
            return (int)mh$.invokeExact(address, lock_bit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_pointer_bit_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$72.g_pointer_bit_unlock$MH,"g_pointer_bit_unlock");
    }
    public static void g_pointer_bit_unlock ( Addressable address,  int lock_bit) {
        var mh$ = RuntimeHelper.requireNonNull(constants$72.g_pointer_bit_unlock$MH, "g_pointer_bit_unlock");
        try {
            mh$.invokeExact(address, lock_bit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_TIME_TYPE_STANDARD() {
        return (int)0L;
    }
    public static int G_TIME_TYPE_DAYLIGHT() {
        return (int)1L;
    }
    public static int G_TIME_TYPE_UNIVERSAL() {
        return (int)2L;
    }
    public static MethodHandle g_time_zone_new$MH() {
        return RuntimeHelper.requireNonNull(constants$72.g_time_zone_new$MH,"g_time_zone_new");
    }
    public static MemoryAddress g_time_zone_new ( Addressable identifier) {
        var mh$ = RuntimeHelper.requireNonNull(constants$72.g_time_zone_new$MH, "g_time_zone_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(identifier);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_time_zone_new_identifier$MH() {
        return RuntimeHelper.requireNonNull(constants$73.g_time_zone_new_identifier$MH,"g_time_zone_new_identifier");
    }
    public static MemoryAddress g_time_zone_new_identifier ( Addressable identifier) {
        var mh$ = RuntimeHelper.requireNonNull(constants$73.g_time_zone_new_identifier$MH, "g_time_zone_new_identifier");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(identifier);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_time_zone_new_utc$MH() {
        return RuntimeHelper.requireNonNull(constants$73.g_time_zone_new_utc$MH,"g_time_zone_new_utc");
    }
    public static MemoryAddress g_time_zone_new_utc () {
        var mh$ = RuntimeHelper.requireNonNull(constants$73.g_time_zone_new_utc$MH, "g_time_zone_new_utc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_time_zone_new_local$MH() {
        return RuntimeHelper.requireNonNull(constants$73.g_time_zone_new_local$MH,"g_time_zone_new_local");
    }
    public static MemoryAddress g_time_zone_new_local () {
        var mh$ = RuntimeHelper.requireNonNull(constants$73.g_time_zone_new_local$MH, "g_time_zone_new_local");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_time_zone_new_offset$MH() {
        return RuntimeHelper.requireNonNull(constants$73.g_time_zone_new_offset$MH,"g_time_zone_new_offset");
    }
    public static MemoryAddress g_time_zone_new_offset ( int seconds) {
        var mh$ = RuntimeHelper.requireNonNull(constants$73.g_time_zone_new_offset$MH, "g_time_zone_new_offset");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(seconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_time_zone_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$73.g_time_zone_ref$MH,"g_time_zone_ref");
    }
    public static MemoryAddress g_time_zone_ref ( Addressable tz) {
        var mh$ = RuntimeHelper.requireNonNull(constants$73.g_time_zone_ref$MH, "g_time_zone_ref");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(tz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_time_zone_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$73.g_time_zone_unref$MH,"g_time_zone_unref");
    }
    public static void g_time_zone_unref ( Addressable tz) {
        var mh$ = RuntimeHelper.requireNonNull(constants$73.g_time_zone_unref$MH, "g_time_zone_unref");
        try {
            mh$.invokeExact(tz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_time_zone_find_interval$MH() {
        return RuntimeHelper.requireNonNull(constants$74.g_time_zone_find_interval$MH,"g_time_zone_find_interval");
    }
    public static int g_time_zone_find_interval ( Addressable tz,  int type,  long time_) {
        var mh$ = RuntimeHelper.requireNonNull(constants$74.g_time_zone_find_interval$MH, "g_time_zone_find_interval");
        try {
            return (int)mh$.invokeExact(tz, type, time_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_time_zone_adjust_time$MH() {
        return RuntimeHelper.requireNonNull(constants$74.g_time_zone_adjust_time$MH,"g_time_zone_adjust_time");
    }
    public static int g_time_zone_adjust_time ( Addressable tz,  int type,  Addressable time_) {
        var mh$ = RuntimeHelper.requireNonNull(constants$74.g_time_zone_adjust_time$MH, "g_time_zone_adjust_time");
        try {
            return (int)mh$.invokeExact(tz, type, time_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_time_zone_get_abbreviation$MH() {
        return RuntimeHelper.requireNonNull(constants$74.g_time_zone_get_abbreviation$MH,"g_time_zone_get_abbreviation");
    }
    public static MemoryAddress g_time_zone_get_abbreviation ( Addressable tz,  int interval) {
        var mh$ = RuntimeHelper.requireNonNull(constants$74.g_time_zone_get_abbreviation$MH, "g_time_zone_get_abbreviation");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(tz, interval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_time_zone_get_offset$MH() {
        return RuntimeHelper.requireNonNull(constants$74.g_time_zone_get_offset$MH,"g_time_zone_get_offset");
    }
    public static int g_time_zone_get_offset ( Addressable tz,  int interval) {
        var mh$ = RuntimeHelper.requireNonNull(constants$74.g_time_zone_get_offset$MH, "g_time_zone_get_offset");
        try {
            return (int)mh$.invokeExact(tz, interval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_time_zone_is_dst$MH() {
        return RuntimeHelper.requireNonNull(constants$74.g_time_zone_is_dst$MH,"g_time_zone_is_dst");
    }
    public static int g_time_zone_is_dst ( Addressable tz,  int interval) {
        var mh$ = RuntimeHelper.requireNonNull(constants$74.g_time_zone_is_dst$MH, "g_time_zone_is_dst");
        try {
            return (int)mh$.invokeExact(tz, interval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_time_zone_get_identifier$MH() {
        return RuntimeHelper.requireNonNull(constants$74.g_time_zone_get_identifier$MH,"g_time_zone_get_identifier");
    }
    public static MemoryAddress g_time_zone_get_identifier ( Addressable tz) {
        var mh$ = RuntimeHelper.requireNonNull(constants$74.g_time_zone_get_identifier$MH, "g_time_zone_get_identifier");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(tz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong GTimeSpan = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle g_date_time_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$75.g_date_time_unref$MH,"g_date_time_unref");
    }
    public static void g_date_time_unref ( Addressable datetime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$75.g_date_time_unref$MH, "g_date_time_unref");
        try {
            mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$75.g_date_time_ref$MH,"g_date_time_ref");
    }
    public static MemoryAddress g_date_time_ref ( Addressable datetime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$75.g_date_time_ref$MH, "g_date_time_ref");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_new_now$MH() {
        return RuntimeHelper.requireNonNull(constants$75.g_date_time_new_now$MH,"g_date_time_new_now");
    }
    public static MemoryAddress g_date_time_new_now ( Addressable tz) {
        var mh$ = RuntimeHelper.requireNonNull(constants$75.g_date_time_new_now$MH, "g_date_time_new_now");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(tz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_new_now_local$MH() {
        return RuntimeHelper.requireNonNull(constants$75.g_date_time_new_now_local$MH,"g_date_time_new_now_local");
    }
    public static MemoryAddress g_date_time_new_now_local () {
        var mh$ = RuntimeHelper.requireNonNull(constants$75.g_date_time_new_now_local$MH, "g_date_time_new_now_local");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_new_now_utc$MH() {
        return RuntimeHelper.requireNonNull(constants$75.g_date_time_new_now_utc$MH,"g_date_time_new_now_utc");
    }
    public static MemoryAddress g_date_time_new_now_utc () {
        var mh$ = RuntimeHelper.requireNonNull(constants$75.g_date_time_new_now_utc$MH, "g_date_time_new_now_utc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_new_from_unix_local$MH() {
        return RuntimeHelper.requireNonNull(constants$75.g_date_time_new_from_unix_local$MH,"g_date_time_new_from_unix_local");
    }
    public static MemoryAddress g_date_time_new_from_unix_local ( long t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$75.g_date_time_new_from_unix_local$MH, "g_date_time_new_from_unix_local");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_new_from_unix_utc$MH() {
        return RuntimeHelper.requireNonNull(constants$76.g_date_time_new_from_unix_utc$MH,"g_date_time_new_from_unix_utc");
    }
    public static MemoryAddress g_date_time_new_from_unix_utc ( long t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$76.g_date_time_new_from_unix_utc$MH, "g_date_time_new_from_unix_utc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_new_from_timeval_local$MH() {
        return RuntimeHelper.requireNonNull(constants$76.g_date_time_new_from_timeval_local$MH,"g_date_time_new_from_timeval_local");
    }
    public static MemoryAddress g_date_time_new_from_timeval_local ( Addressable tv) {
        var mh$ = RuntimeHelper.requireNonNull(constants$76.g_date_time_new_from_timeval_local$MH, "g_date_time_new_from_timeval_local");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(tv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_new_from_timeval_utc$MH() {
        return RuntimeHelper.requireNonNull(constants$76.g_date_time_new_from_timeval_utc$MH,"g_date_time_new_from_timeval_utc");
    }
    public static MemoryAddress g_date_time_new_from_timeval_utc ( Addressable tv) {
        var mh$ = RuntimeHelper.requireNonNull(constants$76.g_date_time_new_from_timeval_utc$MH, "g_date_time_new_from_timeval_utc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(tv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_new_from_iso8601$MH() {
        return RuntimeHelper.requireNonNull(constants$76.g_date_time_new_from_iso8601$MH,"g_date_time_new_from_iso8601");
    }
    public static MemoryAddress g_date_time_new_from_iso8601 ( Addressable text,  Addressable default_tz) {
        var mh$ = RuntimeHelper.requireNonNull(constants$76.g_date_time_new_from_iso8601$MH, "g_date_time_new_from_iso8601");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(text, default_tz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_new$MH() {
        return RuntimeHelper.requireNonNull(constants$76.g_date_time_new$MH,"g_date_time_new");
    }
    public static MemoryAddress g_date_time_new ( Addressable tz,  int year,  int month,  int day,  int hour,  int minute,  double seconds) {
        var mh$ = RuntimeHelper.requireNonNull(constants$76.g_date_time_new$MH, "g_date_time_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(tz, year, month, day, hour, minute, seconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_new_local$MH() {
        return RuntimeHelper.requireNonNull(constants$76.g_date_time_new_local$MH,"g_date_time_new_local");
    }
    public static MemoryAddress g_date_time_new_local ( int year,  int month,  int day,  int hour,  int minute,  double seconds) {
        var mh$ = RuntimeHelper.requireNonNull(constants$76.g_date_time_new_local$MH, "g_date_time_new_local");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(year, month, day, hour, minute, seconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_new_utc$MH() {
        return RuntimeHelper.requireNonNull(constants$77.g_date_time_new_utc$MH,"g_date_time_new_utc");
    }
    public static MemoryAddress g_date_time_new_utc ( int year,  int month,  int day,  int hour,  int minute,  double seconds) {
        var mh$ = RuntimeHelper.requireNonNull(constants$77.g_date_time_new_utc$MH, "g_date_time_new_utc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(year, month, day, hour, minute, seconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_add$MH() {
        return RuntimeHelper.requireNonNull(constants$77.g_date_time_add$MH,"g_date_time_add");
    }
    public static MemoryAddress g_date_time_add ( Addressable datetime,  long timespan) {
        var mh$ = RuntimeHelper.requireNonNull(constants$77.g_date_time_add$MH, "g_date_time_add");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(datetime, timespan);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_add_years$MH() {
        return RuntimeHelper.requireNonNull(constants$77.g_date_time_add_years$MH,"g_date_time_add_years");
    }
    public static MemoryAddress g_date_time_add_years ( Addressable datetime,  int years) {
        var mh$ = RuntimeHelper.requireNonNull(constants$77.g_date_time_add_years$MH, "g_date_time_add_years");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(datetime, years);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_add_months$MH() {
        return RuntimeHelper.requireNonNull(constants$77.g_date_time_add_months$MH,"g_date_time_add_months");
    }
    public static MemoryAddress g_date_time_add_months ( Addressable datetime,  int months) {
        var mh$ = RuntimeHelper.requireNonNull(constants$77.g_date_time_add_months$MH, "g_date_time_add_months");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(datetime, months);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_add_weeks$MH() {
        return RuntimeHelper.requireNonNull(constants$77.g_date_time_add_weeks$MH,"g_date_time_add_weeks");
    }
    public static MemoryAddress g_date_time_add_weeks ( Addressable datetime,  int weeks) {
        var mh$ = RuntimeHelper.requireNonNull(constants$77.g_date_time_add_weeks$MH, "g_date_time_add_weeks");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(datetime, weeks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_add_days$MH() {
        return RuntimeHelper.requireNonNull(constants$77.g_date_time_add_days$MH,"g_date_time_add_days");
    }
    public static MemoryAddress g_date_time_add_days ( Addressable datetime,  int days) {
        var mh$ = RuntimeHelper.requireNonNull(constants$77.g_date_time_add_days$MH, "g_date_time_add_days");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(datetime, days);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_add_hours$MH() {
        return RuntimeHelper.requireNonNull(constants$78.g_date_time_add_hours$MH,"g_date_time_add_hours");
    }
    public static MemoryAddress g_date_time_add_hours ( Addressable datetime,  int hours) {
        var mh$ = RuntimeHelper.requireNonNull(constants$78.g_date_time_add_hours$MH, "g_date_time_add_hours");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(datetime, hours);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_add_minutes$MH() {
        return RuntimeHelper.requireNonNull(constants$78.g_date_time_add_minutes$MH,"g_date_time_add_minutes");
    }
    public static MemoryAddress g_date_time_add_minutes ( Addressable datetime,  int minutes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$78.g_date_time_add_minutes$MH, "g_date_time_add_minutes");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(datetime, minutes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_add_seconds$MH() {
        return RuntimeHelper.requireNonNull(constants$78.g_date_time_add_seconds$MH,"g_date_time_add_seconds");
    }
    public static MemoryAddress g_date_time_add_seconds ( Addressable datetime,  double seconds) {
        var mh$ = RuntimeHelper.requireNonNull(constants$78.g_date_time_add_seconds$MH, "g_date_time_add_seconds");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(datetime, seconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_add_full$MH() {
        return RuntimeHelper.requireNonNull(constants$78.g_date_time_add_full$MH,"g_date_time_add_full");
    }
    public static MemoryAddress g_date_time_add_full ( Addressable datetime,  int years,  int months,  int days,  int hours,  int minutes,  double seconds) {
        var mh$ = RuntimeHelper.requireNonNull(constants$78.g_date_time_add_full$MH, "g_date_time_add_full");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(datetime, years, months, days, hours, minutes, seconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_compare$MH() {
        return RuntimeHelper.requireNonNull(constants$78.g_date_time_compare$MH,"g_date_time_compare");
    }
    public static int g_date_time_compare ( Addressable dt1,  Addressable dt2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$78.g_date_time_compare$MH, "g_date_time_compare");
        try {
            return (int)mh$.invokeExact(dt1, dt2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_difference$MH() {
        return RuntimeHelper.requireNonNull(constants$78.g_date_time_difference$MH,"g_date_time_difference");
    }
    public static long g_date_time_difference ( Addressable end,  Addressable begin) {
        var mh$ = RuntimeHelper.requireNonNull(constants$78.g_date_time_difference$MH, "g_date_time_difference");
        try {
            return (long)mh$.invokeExact(end, begin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_hash$MH() {
        return RuntimeHelper.requireNonNull(constants$79.g_date_time_hash$MH,"g_date_time_hash");
    }
    public static int g_date_time_hash ( Addressable datetime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$79.g_date_time_hash$MH, "g_date_time_hash");
        try {
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$79.g_date_time_equal$MH,"g_date_time_equal");
    }
    public static int g_date_time_equal ( Addressable dt1,  Addressable dt2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$79.g_date_time_equal$MH, "g_date_time_equal");
        try {
            return (int)mh$.invokeExact(dt1, dt2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_get_ymd$MH() {
        return RuntimeHelper.requireNonNull(constants$79.g_date_time_get_ymd$MH,"g_date_time_get_ymd");
    }
    public static void g_date_time_get_ymd ( Addressable datetime,  Addressable year,  Addressable month,  Addressable day) {
        var mh$ = RuntimeHelper.requireNonNull(constants$79.g_date_time_get_ymd$MH, "g_date_time_get_ymd");
        try {
            mh$.invokeExact(datetime, year, month, day);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_get_year$MH() {
        return RuntimeHelper.requireNonNull(constants$79.g_date_time_get_year$MH,"g_date_time_get_year");
    }
    public static int g_date_time_get_year ( Addressable datetime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$79.g_date_time_get_year$MH, "g_date_time_get_year");
        try {
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_get_month$MH() {
        return RuntimeHelper.requireNonNull(constants$79.g_date_time_get_month$MH,"g_date_time_get_month");
    }
    public static int g_date_time_get_month ( Addressable datetime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$79.g_date_time_get_month$MH, "g_date_time_get_month");
        try {
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_get_day_of_month$MH() {
        return RuntimeHelper.requireNonNull(constants$79.g_date_time_get_day_of_month$MH,"g_date_time_get_day_of_month");
    }
    public static int g_date_time_get_day_of_month ( Addressable datetime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$79.g_date_time_get_day_of_month$MH, "g_date_time_get_day_of_month");
        try {
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_get_week_numbering_year$MH() {
        return RuntimeHelper.requireNonNull(constants$80.g_date_time_get_week_numbering_year$MH,"g_date_time_get_week_numbering_year");
    }
    public static int g_date_time_get_week_numbering_year ( Addressable datetime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$80.g_date_time_get_week_numbering_year$MH, "g_date_time_get_week_numbering_year");
        try {
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_get_week_of_year$MH() {
        return RuntimeHelper.requireNonNull(constants$80.g_date_time_get_week_of_year$MH,"g_date_time_get_week_of_year");
    }
    public static int g_date_time_get_week_of_year ( Addressable datetime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$80.g_date_time_get_week_of_year$MH, "g_date_time_get_week_of_year");
        try {
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_get_day_of_week$MH() {
        return RuntimeHelper.requireNonNull(constants$80.g_date_time_get_day_of_week$MH,"g_date_time_get_day_of_week");
    }
    public static int g_date_time_get_day_of_week ( Addressable datetime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$80.g_date_time_get_day_of_week$MH, "g_date_time_get_day_of_week");
        try {
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_get_day_of_year$MH() {
        return RuntimeHelper.requireNonNull(constants$80.g_date_time_get_day_of_year$MH,"g_date_time_get_day_of_year");
    }
    public static int g_date_time_get_day_of_year ( Addressable datetime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$80.g_date_time_get_day_of_year$MH, "g_date_time_get_day_of_year");
        try {
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_get_hour$MH() {
        return RuntimeHelper.requireNonNull(constants$80.g_date_time_get_hour$MH,"g_date_time_get_hour");
    }
    public static int g_date_time_get_hour ( Addressable datetime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$80.g_date_time_get_hour$MH, "g_date_time_get_hour");
        try {
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_get_minute$MH() {
        return RuntimeHelper.requireNonNull(constants$80.g_date_time_get_minute$MH,"g_date_time_get_minute");
    }
    public static int g_date_time_get_minute ( Addressable datetime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$80.g_date_time_get_minute$MH, "g_date_time_get_minute");
        try {
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_get_second$MH() {
        return RuntimeHelper.requireNonNull(constants$81.g_date_time_get_second$MH,"g_date_time_get_second");
    }
    public static int g_date_time_get_second ( Addressable datetime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$81.g_date_time_get_second$MH, "g_date_time_get_second");
        try {
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_get_microsecond$MH() {
        return RuntimeHelper.requireNonNull(constants$81.g_date_time_get_microsecond$MH,"g_date_time_get_microsecond");
    }
    public static int g_date_time_get_microsecond ( Addressable datetime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$81.g_date_time_get_microsecond$MH, "g_date_time_get_microsecond");
        try {
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_get_seconds$MH() {
        return RuntimeHelper.requireNonNull(constants$81.g_date_time_get_seconds$MH,"g_date_time_get_seconds");
    }
    public static double g_date_time_get_seconds ( Addressable datetime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$81.g_date_time_get_seconds$MH, "g_date_time_get_seconds");
        try {
            return (double)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_to_unix$MH() {
        return RuntimeHelper.requireNonNull(constants$81.g_date_time_to_unix$MH,"g_date_time_to_unix");
    }
    public static long g_date_time_to_unix ( Addressable datetime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$81.g_date_time_to_unix$MH, "g_date_time_to_unix");
        try {
            return (long)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_to_timeval$MH() {
        return RuntimeHelper.requireNonNull(constants$81.g_date_time_to_timeval$MH,"g_date_time_to_timeval");
    }
    public static int g_date_time_to_timeval ( Addressable datetime,  Addressable tv) {
        var mh$ = RuntimeHelper.requireNonNull(constants$81.g_date_time_to_timeval$MH, "g_date_time_to_timeval");
        try {
            return (int)mh$.invokeExact(datetime, tv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_get_utc_offset$MH() {
        return RuntimeHelper.requireNonNull(constants$81.g_date_time_get_utc_offset$MH,"g_date_time_get_utc_offset");
    }
    public static long g_date_time_get_utc_offset ( Addressable datetime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$81.g_date_time_get_utc_offset$MH, "g_date_time_get_utc_offset");
        try {
            return (long)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_get_timezone$MH() {
        return RuntimeHelper.requireNonNull(constants$82.g_date_time_get_timezone$MH,"g_date_time_get_timezone");
    }
    public static MemoryAddress g_date_time_get_timezone ( Addressable datetime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$82.g_date_time_get_timezone$MH, "g_date_time_get_timezone");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_get_timezone_abbreviation$MH() {
        return RuntimeHelper.requireNonNull(constants$82.g_date_time_get_timezone_abbreviation$MH,"g_date_time_get_timezone_abbreviation");
    }
    public static MemoryAddress g_date_time_get_timezone_abbreviation ( Addressable datetime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$82.g_date_time_get_timezone_abbreviation$MH, "g_date_time_get_timezone_abbreviation");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_is_daylight_savings$MH() {
        return RuntimeHelper.requireNonNull(constants$82.g_date_time_is_daylight_savings$MH,"g_date_time_is_daylight_savings");
    }
    public static int g_date_time_is_daylight_savings ( Addressable datetime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$82.g_date_time_is_daylight_savings$MH, "g_date_time_is_daylight_savings");
        try {
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_to_timezone$MH() {
        return RuntimeHelper.requireNonNull(constants$82.g_date_time_to_timezone$MH,"g_date_time_to_timezone");
    }
    public static MemoryAddress g_date_time_to_timezone ( Addressable datetime,  Addressable tz) {
        var mh$ = RuntimeHelper.requireNonNull(constants$82.g_date_time_to_timezone$MH, "g_date_time_to_timezone");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(datetime, tz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_to_local$MH() {
        return RuntimeHelper.requireNonNull(constants$82.g_date_time_to_local$MH,"g_date_time_to_local");
    }
    public static MemoryAddress g_date_time_to_local ( Addressable datetime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$82.g_date_time_to_local$MH, "g_date_time_to_local");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_to_utc$MH() {
        return RuntimeHelper.requireNonNull(constants$82.g_date_time_to_utc$MH,"g_date_time_to_utc");
    }
    public static MemoryAddress g_date_time_to_utc ( Addressable datetime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$82.g_date_time_to_utc$MH, "g_date_time_to_utc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_format$MH() {
        return RuntimeHelper.requireNonNull(constants$83.g_date_time_format$MH,"g_date_time_format");
    }
    public static MemoryAddress g_date_time_format ( Addressable datetime,  Addressable format) {
        var mh$ = RuntimeHelper.requireNonNull(constants$83.g_date_time_format$MH, "g_date_time_format");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(datetime, format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_format_iso8601$MH() {
        return RuntimeHelper.requireNonNull(constants$83.g_date_time_format_iso8601$MH,"g_date_time_format_iso8601");
    }
    public static MemoryAddress g_date_time_format_iso8601 ( Addressable datetime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$83.g_date_time_format_iso8601$MH, "g_date_time_format_iso8601");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_BOOKMARK_FILE_ERROR_INVALID_URI() {
        return (int)0L;
    }
    public static int G_BOOKMARK_FILE_ERROR_INVALID_VALUE() {
        return (int)1L;
    }
    public static int G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED() {
        return (int)2L;
    }
    public static int G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND() {
        return (int)3L;
    }
    public static int G_BOOKMARK_FILE_ERROR_READ() {
        return (int)4L;
    }
    public static int G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING() {
        return (int)5L;
    }
    public static int G_BOOKMARK_FILE_ERROR_WRITE() {
        return (int)6L;
    }
    public static int G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND() {
        return (int)7L;
    }
    public static MethodHandle g_bookmark_file_error_quark$MH() {
        return RuntimeHelper.requireNonNull(constants$83.g_bookmark_file_error_quark$MH,"g_bookmark_file_error_quark");
    }
    public static int g_bookmark_file_error_quark () {
        var mh$ = RuntimeHelper.requireNonNull(constants$83.g_bookmark_file_error_quark$MH, "g_bookmark_file_error_quark");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_new$MH() {
        return RuntimeHelper.requireNonNull(constants$83.g_bookmark_file_new$MH,"g_bookmark_file_new");
    }
    public static MemoryAddress g_bookmark_file_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$83.g_bookmark_file_new$MH, "g_bookmark_file_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_free$MH() {
        return RuntimeHelper.requireNonNull(constants$83.g_bookmark_file_free$MH,"g_bookmark_file_free");
    }
    public static void g_bookmark_file_free ( Addressable bookmark) {
        var mh$ = RuntimeHelper.requireNonNull(constants$83.g_bookmark_file_free$MH, "g_bookmark_file_free");
        try {
            mh$.invokeExact(bookmark);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_load_from_file$MH() {
        return RuntimeHelper.requireNonNull(constants$83.g_bookmark_file_load_from_file$MH,"g_bookmark_file_load_from_file");
    }
    public static int g_bookmark_file_load_from_file ( Addressable bookmark,  Addressable filename,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$83.g_bookmark_file_load_from_file$MH, "g_bookmark_file_load_from_file");
        try {
            return (int)mh$.invokeExact(bookmark, filename, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_load_from_data$MH() {
        return RuntimeHelper.requireNonNull(constants$84.g_bookmark_file_load_from_data$MH,"g_bookmark_file_load_from_data");
    }
    public static int g_bookmark_file_load_from_data ( Addressable bookmark,  Addressable data,  long length,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$84.g_bookmark_file_load_from_data$MH, "g_bookmark_file_load_from_data");
        try {
            return (int)mh$.invokeExact(bookmark, data, length, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_load_from_data_dirs$MH() {
        return RuntimeHelper.requireNonNull(constants$84.g_bookmark_file_load_from_data_dirs$MH,"g_bookmark_file_load_from_data_dirs");
    }
    public static int g_bookmark_file_load_from_data_dirs ( Addressable bookmark,  Addressable file,  Addressable full_path,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$84.g_bookmark_file_load_from_data_dirs$MH, "g_bookmark_file_load_from_data_dirs");
        try {
            return (int)mh$.invokeExact(bookmark, file, full_path, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_to_data$MH() {
        return RuntimeHelper.requireNonNull(constants$84.g_bookmark_file_to_data$MH,"g_bookmark_file_to_data");
    }
    public static MemoryAddress g_bookmark_file_to_data ( Addressable bookmark,  Addressable length,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$84.g_bookmark_file_to_data$MH, "g_bookmark_file_to_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bookmark, length, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_to_file$MH() {
        return RuntimeHelper.requireNonNull(constants$84.g_bookmark_file_to_file$MH,"g_bookmark_file_to_file");
    }
    public static int g_bookmark_file_to_file ( Addressable bookmark,  Addressable filename,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$84.g_bookmark_file_to_file$MH, "g_bookmark_file_to_file");
        try {
            return (int)mh$.invokeExact(bookmark, filename, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_set_title$MH() {
        return RuntimeHelper.requireNonNull(constants$84.g_bookmark_file_set_title$MH,"g_bookmark_file_set_title");
    }
    public static void g_bookmark_file_set_title ( Addressable bookmark,  Addressable uri,  Addressable title) {
        var mh$ = RuntimeHelper.requireNonNull(constants$84.g_bookmark_file_set_title$MH, "g_bookmark_file_set_title");
        try {
            mh$.invokeExact(bookmark, uri, title);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_get_title$MH() {
        return RuntimeHelper.requireNonNull(constants$84.g_bookmark_file_get_title$MH,"g_bookmark_file_get_title");
    }
    public static MemoryAddress g_bookmark_file_get_title ( Addressable bookmark,  Addressable uri,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$84.g_bookmark_file_get_title$MH, "g_bookmark_file_get_title");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bookmark, uri, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_set_description$MH() {
        return RuntimeHelper.requireNonNull(constants$85.g_bookmark_file_set_description$MH,"g_bookmark_file_set_description");
    }
    public static void g_bookmark_file_set_description ( Addressable bookmark,  Addressable uri,  Addressable description) {
        var mh$ = RuntimeHelper.requireNonNull(constants$85.g_bookmark_file_set_description$MH, "g_bookmark_file_set_description");
        try {
            mh$.invokeExact(bookmark, uri, description);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_get_description$MH() {
        return RuntimeHelper.requireNonNull(constants$85.g_bookmark_file_get_description$MH,"g_bookmark_file_get_description");
    }
    public static MemoryAddress g_bookmark_file_get_description ( Addressable bookmark,  Addressable uri,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$85.g_bookmark_file_get_description$MH, "g_bookmark_file_get_description");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bookmark, uri, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_set_mime_type$MH() {
        return RuntimeHelper.requireNonNull(constants$85.g_bookmark_file_set_mime_type$MH,"g_bookmark_file_set_mime_type");
    }
    public static void g_bookmark_file_set_mime_type ( Addressable bookmark,  Addressable uri,  Addressable mime_type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$85.g_bookmark_file_set_mime_type$MH, "g_bookmark_file_set_mime_type");
        try {
            mh$.invokeExact(bookmark, uri, mime_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_get_mime_type$MH() {
        return RuntimeHelper.requireNonNull(constants$85.g_bookmark_file_get_mime_type$MH,"g_bookmark_file_get_mime_type");
    }
    public static MemoryAddress g_bookmark_file_get_mime_type ( Addressable bookmark,  Addressable uri,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$85.g_bookmark_file_get_mime_type$MH, "g_bookmark_file_get_mime_type");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bookmark, uri, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_set_groups$MH() {
        return RuntimeHelper.requireNonNull(constants$85.g_bookmark_file_set_groups$MH,"g_bookmark_file_set_groups");
    }
    public static void g_bookmark_file_set_groups ( Addressable bookmark,  Addressable uri,  Addressable groups,  long length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$85.g_bookmark_file_set_groups$MH, "g_bookmark_file_set_groups");
        try {
            mh$.invokeExact(bookmark, uri, groups, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_add_group$MH() {
        return RuntimeHelper.requireNonNull(constants$85.g_bookmark_file_add_group$MH,"g_bookmark_file_add_group");
    }
    public static void g_bookmark_file_add_group ( Addressable bookmark,  Addressable uri,  Addressable group) {
        var mh$ = RuntimeHelper.requireNonNull(constants$85.g_bookmark_file_add_group$MH, "g_bookmark_file_add_group");
        try {
            mh$.invokeExact(bookmark, uri, group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_has_group$MH() {
        return RuntimeHelper.requireNonNull(constants$86.g_bookmark_file_has_group$MH,"g_bookmark_file_has_group");
    }
    public static int g_bookmark_file_has_group ( Addressable bookmark,  Addressable uri,  Addressable group,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$86.g_bookmark_file_has_group$MH, "g_bookmark_file_has_group");
        try {
            return (int)mh$.invokeExact(bookmark, uri, group, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_get_groups$MH() {
        return RuntimeHelper.requireNonNull(constants$86.g_bookmark_file_get_groups$MH,"g_bookmark_file_get_groups");
    }
    public static MemoryAddress g_bookmark_file_get_groups ( Addressable bookmark,  Addressable uri,  Addressable length,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$86.g_bookmark_file_get_groups$MH, "g_bookmark_file_get_groups");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bookmark, uri, length, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_add_application$MH() {
        return RuntimeHelper.requireNonNull(constants$86.g_bookmark_file_add_application$MH,"g_bookmark_file_add_application");
    }
    public static void g_bookmark_file_add_application ( Addressable bookmark,  Addressable uri,  Addressable name,  Addressable exec) {
        var mh$ = RuntimeHelper.requireNonNull(constants$86.g_bookmark_file_add_application$MH, "g_bookmark_file_add_application");
        try {
            mh$.invokeExact(bookmark, uri, name, exec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_has_application$MH() {
        return RuntimeHelper.requireNonNull(constants$86.g_bookmark_file_has_application$MH,"g_bookmark_file_has_application");
    }
    public static int g_bookmark_file_has_application ( Addressable bookmark,  Addressable uri,  Addressable name,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$86.g_bookmark_file_has_application$MH, "g_bookmark_file_has_application");
        try {
            return (int)mh$.invokeExact(bookmark, uri, name, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_get_applications$MH() {
        return RuntimeHelper.requireNonNull(constants$86.g_bookmark_file_get_applications$MH,"g_bookmark_file_get_applications");
    }
    public static MemoryAddress g_bookmark_file_get_applications ( Addressable bookmark,  Addressable uri,  Addressable length,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$86.g_bookmark_file_get_applications$MH, "g_bookmark_file_get_applications");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bookmark, uri, length, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_set_app_info$MH() {
        return RuntimeHelper.requireNonNull(constants$86.g_bookmark_file_set_app_info$MH,"g_bookmark_file_set_app_info");
    }
    public static int g_bookmark_file_set_app_info ( Addressable bookmark,  Addressable uri,  Addressable name,  Addressable exec,  int count,  long stamp,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$86.g_bookmark_file_set_app_info$MH, "g_bookmark_file_set_app_info");
        try {
            return (int)mh$.invokeExact(bookmark, uri, name, exec, count, stamp, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_set_application_info$MH() {
        return RuntimeHelper.requireNonNull(constants$87.g_bookmark_file_set_application_info$MH,"g_bookmark_file_set_application_info");
    }
    public static int g_bookmark_file_set_application_info ( Addressable bookmark,  Addressable uri,  Addressable name,  Addressable exec,  int count,  Addressable stamp,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$87.g_bookmark_file_set_application_info$MH, "g_bookmark_file_set_application_info");
        try {
            return (int)mh$.invokeExact(bookmark, uri, name, exec, count, stamp, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_get_app_info$MH() {
        return RuntimeHelper.requireNonNull(constants$87.g_bookmark_file_get_app_info$MH,"g_bookmark_file_get_app_info");
    }
    public static int g_bookmark_file_get_app_info ( Addressable bookmark,  Addressable uri,  Addressable name,  Addressable exec,  Addressable count,  Addressable stamp,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$87.g_bookmark_file_get_app_info$MH, "g_bookmark_file_get_app_info");
        try {
            return (int)mh$.invokeExact(bookmark, uri, name, exec, count, stamp, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_get_application_info$MH() {
        return RuntimeHelper.requireNonNull(constants$87.g_bookmark_file_get_application_info$MH,"g_bookmark_file_get_application_info");
    }
    public static int g_bookmark_file_get_application_info ( Addressable bookmark,  Addressable uri,  Addressable name,  Addressable exec,  Addressable count,  Addressable stamp,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$87.g_bookmark_file_get_application_info$MH, "g_bookmark_file_get_application_info");
        try {
            return (int)mh$.invokeExact(bookmark, uri, name, exec, count, stamp, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_set_is_private$MH() {
        return RuntimeHelper.requireNonNull(constants$87.g_bookmark_file_set_is_private$MH,"g_bookmark_file_set_is_private");
    }
    public static void g_bookmark_file_set_is_private ( Addressable bookmark,  Addressable uri,  int is_private) {
        var mh$ = RuntimeHelper.requireNonNull(constants$87.g_bookmark_file_set_is_private$MH, "g_bookmark_file_set_is_private");
        try {
            mh$.invokeExact(bookmark, uri, is_private);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_get_is_private$MH() {
        return RuntimeHelper.requireNonNull(constants$87.g_bookmark_file_get_is_private$MH,"g_bookmark_file_get_is_private");
    }
    public static int g_bookmark_file_get_is_private ( Addressable bookmark,  Addressable uri,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$87.g_bookmark_file_get_is_private$MH, "g_bookmark_file_get_is_private");
        try {
            return (int)mh$.invokeExact(bookmark, uri, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_set_icon$MH() {
        return RuntimeHelper.requireNonNull(constants$87.g_bookmark_file_set_icon$MH,"g_bookmark_file_set_icon");
    }
    public static void g_bookmark_file_set_icon ( Addressable bookmark,  Addressable uri,  Addressable href,  Addressable mime_type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$87.g_bookmark_file_set_icon$MH, "g_bookmark_file_set_icon");
        try {
            mh$.invokeExact(bookmark, uri, href, mime_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_get_icon$MH() {
        return RuntimeHelper.requireNonNull(constants$88.g_bookmark_file_get_icon$MH,"g_bookmark_file_get_icon");
    }
    public static int g_bookmark_file_get_icon ( Addressable bookmark,  Addressable uri,  Addressable href,  Addressable mime_type,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$88.g_bookmark_file_get_icon$MH, "g_bookmark_file_get_icon");
        try {
            return (int)mh$.invokeExact(bookmark, uri, href, mime_type, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_set_added$MH() {
        return RuntimeHelper.requireNonNull(constants$88.g_bookmark_file_set_added$MH,"g_bookmark_file_set_added");
    }
    public static void g_bookmark_file_set_added ( Addressable bookmark,  Addressable uri,  long added) {
        var mh$ = RuntimeHelper.requireNonNull(constants$88.g_bookmark_file_set_added$MH, "g_bookmark_file_set_added");
        try {
            mh$.invokeExact(bookmark, uri, added);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_set_added_date_time$MH() {
        return RuntimeHelper.requireNonNull(constants$88.g_bookmark_file_set_added_date_time$MH,"g_bookmark_file_set_added_date_time");
    }
    public static void g_bookmark_file_set_added_date_time ( Addressable bookmark,  Addressable uri,  Addressable added) {
        var mh$ = RuntimeHelper.requireNonNull(constants$88.g_bookmark_file_set_added_date_time$MH, "g_bookmark_file_set_added_date_time");
        try {
            mh$.invokeExact(bookmark, uri, added);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_get_added$MH() {
        return RuntimeHelper.requireNonNull(constants$88.g_bookmark_file_get_added$MH,"g_bookmark_file_get_added");
    }
    public static long g_bookmark_file_get_added ( Addressable bookmark,  Addressable uri,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$88.g_bookmark_file_get_added$MH, "g_bookmark_file_get_added");
        try {
            return (long)mh$.invokeExact(bookmark, uri, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_get_added_date_time$MH() {
        return RuntimeHelper.requireNonNull(constants$88.g_bookmark_file_get_added_date_time$MH,"g_bookmark_file_get_added_date_time");
    }
    public static MemoryAddress g_bookmark_file_get_added_date_time ( Addressable bookmark,  Addressable uri,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$88.g_bookmark_file_get_added_date_time$MH, "g_bookmark_file_get_added_date_time");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bookmark, uri, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_set_modified$MH() {
        return RuntimeHelper.requireNonNull(constants$88.g_bookmark_file_set_modified$MH,"g_bookmark_file_set_modified");
    }
    public static void g_bookmark_file_set_modified ( Addressable bookmark,  Addressable uri,  long modified) {
        var mh$ = RuntimeHelper.requireNonNull(constants$88.g_bookmark_file_set_modified$MH, "g_bookmark_file_set_modified");
        try {
            mh$.invokeExact(bookmark, uri, modified);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_set_modified_date_time$MH() {
        return RuntimeHelper.requireNonNull(constants$89.g_bookmark_file_set_modified_date_time$MH,"g_bookmark_file_set_modified_date_time");
    }
    public static void g_bookmark_file_set_modified_date_time ( Addressable bookmark,  Addressable uri,  Addressable modified) {
        var mh$ = RuntimeHelper.requireNonNull(constants$89.g_bookmark_file_set_modified_date_time$MH, "g_bookmark_file_set_modified_date_time");
        try {
            mh$.invokeExact(bookmark, uri, modified);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_get_modified$MH() {
        return RuntimeHelper.requireNonNull(constants$89.g_bookmark_file_get_modified$MH,"g_bookmark_file_get_modified");
    }
    public static long g_bookmark_file_get_modified ( Addressable bookmark,  Addressable uri,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$89.g_bookmark_file_get_modified$MH, "g_bookmark_file_get_modified");
        try {
            return (long)mh$.invokeExact(bookmark, uri, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_get_modified_date_time$MH() {
        return RuntimeHelper.requireNonNull(constants$89.g_bookmark_file_get_modified_date_time$MH,"g_bookmark_file_get_modified_date_time");
    }
    public static MemoryAddress g_bookmark_file_get_modified_date_time ( Addressable bookmark,  Addressable uri,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$89.g_bookmark_file_get_modified_date_time$MH, "g_bookmark_file_get_modified_date_time");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bookmark, uri, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_set_visited$MH() {
        return RuntimeHelper.requireNonNull(constants$89.g_bookmark_file_set_visited$MH,"g_bookmark_file_set_visited");
    }
    public static void g_bookmark_file_set_visited ( Addressable bookmark,  Addressable uri,  long visited) {
        var mh$ = RuntimeHelper.requireNonNull(constants$89.g_bookmark_file_set_visited$MH, "g_bookmark_file_set_visited");
        try {
            mh$.invokeExact(bookmark, uri, visited);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_set_visited_date_time$MH() {
        return RuntimeHelper.requireNonNull(constants$89.g_bookmark_file_set_visited_date_time$MH,"g_bookmark_file_set_visited_date_time");
    }
    public static void g_bookmark_file_set_visited_date_time ( Addressable bookmark,  Addressable uri,  Addressable visited) {
        var mh$ = RuntimeHelper.requireNonNull(constants$89.g_bookmark_file_set_visited_date_time$MH, "g_bookmark_file_set_visited_date_time");
        try {
            mh$.invokeExact(bookmark, uri, visited);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_get_visited$MH() {
        return RuntimeHelper.requireNonNull(constants$89.g_bookmark_file_get_visited$MH,"g_bookmark_file_get_visited");
    }
    public static long g_bookmark_file_get_visited ( Addressable bookmark,  Addressable uri,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$89.g_bookmark_file_get_visited$MH, "g_bookmark_file_get_visited");
        try {
            return (long)mh$.invokeExact(bookmark, uri, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_get_visited_date_time$MH() {
        return RuntimeHelper.requireNonNull(constants$90.g_bookmark_file_get_visited_date_time$MH,"g_bookmark_file_get_visited_date_time");
    }
    public static MemoryAddress g_bookmark_file_get_visited_date_time ( Addressable bookmark,  Addressable uri,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$90.g_bookmark_file_get_visited_date_time$MH, "g_bookmark_file_get_visited_date_time");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bookmark, uri, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_has_item$MH() {
        return RuntimeHelper.requireNonNull(constants$90.g_bookmark_file_has_item$MH,"g_bookmark_file_has_item");
    }
    public static int g_bookmark_file_has_item ( Addressable bookmark,  Addressable uri) {
        var mh$ = RuntimeHelper.requireNonNull(constants$90.g_bookmark_file_has_item$MH, "g_bookmark_file_has_item");
        try {
            return (int)mh$.invokeExact(bookmark, uri);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_get_size$MH() {
        return RuntimeHelper.requireNonNull(constants$90.g_bookmark_file_get_size$MH,"g_bookmark_file_get_size");
    }
    public static int g_bookmark_file_get_size ( Addressable bookmark) {
        var mh$ = RuntimeHelper.requireNonNull(constants$90.g_bookmark_file_get_size$MH, "g_bookmark_file_get_size");
        try {
            return (int)mh$.invokeExact(bookmark);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_get_uris$MH() {
        return RuntimeHelper.requireNonNull(constants$90.g_bookmark_file_get_uris$MH,"g_bookmark_file_get_uris");
    }
    public static MemoryAddress g_bookmark_file_get_uris ( Addressable bookmark,  Addressable length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$90.g_bookmark_file_get_uris$MH, "g_bookmark_file_get_uris");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bookmark, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_remove_group$MH() {
        return RuntimeHelper.requireNonNull(constants$90.g_bookmark_file_remove_group$MH,"g_bookmark_file_remove_group");
    }
    public static int g_bookmark_file_remove_group ( Addressable bookmark,  Addressable uri,  Addressable group,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$90.g_bookmark_file_remove_group$MH, "g_bookmark_file_remove_group");
        try {
            return (int)mh$.invokeExact(bookmark, uri, group, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_remove_application$MH() {
        return RuntimeHelper.requireNonNull(constants$90.g_bookmark_file_remove_application$MH,"g_bookmark_file_remove_application");
    }
    public static int g_bookmark_file_remove_application ( Addressable bookmark,  Addressable uri,  Addressable name,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$90.g_bookmark_file_remove_application$MH, "g_bookmark_file_remove_application");
        try {
            return (int)mh$.invokeExact(bookmark, uri, name, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_remove_item$MH() {
        return RuntimeHelper.requireNonNull(constants$91.g_bookmark_file_remove_item$MH,"g_bookmark_file_remove_item");
    }
    public static int g_bookmark_file_remove_item ( Addressable bookmark,  Addressable uri,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$91.g_bookmark_file_remove_item$MH, "g_bookmark_file_remove_item");
        try {
            return (int)mh$.invokeExact(bookmark, uri, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_move_item$MH() {
        return RuntimeHelper.requireNonNull(constants$91.g_bookmark_file_move_item$MH,"g_bookmark_file_move_item");
    }
    public static int g_bookmark_file_move_item ( Addressable bookmark,  Addressable old_uri,  Addressable new_uri,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$91.g_bookmark_file_move_item$MH, "g_bookmark_file_move_item");
        try {
            return (int)mh$.invokeExact(bookmark, old_uri, new_uri, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bytes_new$MH() {
        return RuntimeHelper.requireNonNull(constants$91.g_bytes_new$MH,"g_bytes_new");
    }
    public static MemoryAddress g_bytes_new ( Addressable data,  long size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$91.g_bytes_new$MH, "g_bytes_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(data, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bytes_new_take$MH() {
        return RuntimeHelper.requireNonNull(constants$91.g_bytes_new_take$MH,"g_bytes_new_take");
    }
    public static MemoryAddress g_bytes_new_take ( Addressable data,  long size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$91.g_bytes_new_take$MH, "g_bytes_new_take");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(data, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bytes_new_static$MH() {
        return RuntimeHelper.requireNonNull(constants$91.g_bytes_new_static$MH,"g_bytes_new_static");
    }
    public static MemoryAddress g_bytes_new_static ( Addressable data,  long size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$91.g_bytes_new_static$MH, "g_bytes_new_static");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(data, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bytes_new_with_free_func$MH() {
        return RuntimeHelper.requireNonNull(constants$91.g_bytes_new_with_free_func$MH,"g_bytes_new_with_free_func");
    }
    public static MemoryAddress g_bytes_new_with_free_func ( Addressable data,  long size,  Addressable free_func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$91.g_bytes_new_with_free_func$MH, "g_bytes_new_with_free_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(data, size, free_func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bytes_new_from_bytes$MH() {
        return RuntimeHelper.requireNonNull(constants$92.g_bytes_new_from_bytes$MH,"g_bytes_new_from_bytes");
    }
    public static MemoryAddress g_bytes_new_from_bytes ( Addressable bytes,  long offset,  long length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$92.g_bytes_new_from_bytes$MH, "g_bytes_new_from_bytes");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bytes, offset, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bytes_get_data$MH() {
        return RuntimeHelper.requireNonNull(constants$92.g_bytes_get_data$MH,"g_bytes_get_data");
    }
    public static MemoryAddress g_bytes_get_data ( Addressable bytes,  Addressable size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$92.g_bytes_get_data$MH, "g_bytes_get_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bytes, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bytes_get_size$MH() {
        return RuntimeHelper.requireNonNull(constants$92.g_bytes_get_size$MH,"g_bytes_get_size");
    }
    public static long g_bytes_get_size ( Addressable bytes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$92.g_bytes_get_size$MH, "g_bytes_get_size");
        try {
            return (long)mh$.invokeExact(bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bytes_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$92.g_bytes_ref$MH,"g_bytes_ref");
    }
    public static MemoryAddress g_bytes_ref ( Addressable bytes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$92.g_bytes_ref$MH, "g_bytes_ref");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bytes_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$92.g_bytes_unref$MH,"g_bytes_unref");
    }
    public static void g_bytes_unref ( Addressable bytes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$92.g_bytes_unref$MH, "g_bytes_unref");
        try {
            mh$.invokeExact(bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bytes_unref_to_data$MH() {
        return RuntimeHelper.requireNonNull(constants$92.g_bytes_unref_to_data$MH,"g_bytes_unref_to_data");
    }
    public static MemoryAddress g_bytes_unref_to_data ( Addressable bytes,  Addressable size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$92.g_bytes_unref_to_data$MH, "g_bytes_unref_to_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bytes, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bytes_unref_to_array$MH() {
        return RuntimeHelper.requireNonNull(constants$93.g_bytes_unref_to_array$MH,"g_bytes_unref_to_array");
    }
    public static MemoryAddress g_bytes_unref_to_array ( Addressable bytes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$93.g_bytes_unref_to_array$MH, "g_bytes_unref_to_array");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bytes_hash$MH() {
        return RuntimeHelper.requireNonNull(constants$93.g_bytes_hash$MH,"g_bytes_hash");
    }
    public static int g_bytes_hash ( Addressable bytes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$93.g_bytes_hash$MH, "g_bytes_hash");
        try {
            return (int)mh$.invokeExact(bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bytes_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$93.g_bytes_equal$MH,"g_bytes_equal");
    }
    public static int g_bytes_equal ( Addressable bytes1,  Addressable bytes2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$93.g_bytes_equal$MH, "g_bytes_equal");
        try {
            return (int)mh$.invokeExact(bytes1, bytes2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bytes_compare$MH() {
        return RuntimeHelper.requireNonNull(constants$93.g_bytes_compare$MH,"g_bytes_compare");
    }
    public static int g_bytes_compare ( Addressable bytes1,  Addressable bytes2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$93.g_bytes_compare$MH, "g_bytes_compare");
        try {
            return (int)mh$.invokeExact(bytes1, bytes2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_charset$MH() {
        return RuntimeHelper.requireNonNull(constants$93.g_get_charset$MH,"g_get_charset");
    }
    public static int g_get_charset ( Addressable charset) {
        var mh$ = RuntimeHelper.requireNonNull(constants$93.g_get_charset$MH, "g_get_charset");
        try {
            return (int)mh$.invokeExact(charset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_codeset$MH() {
        return RuntimeHelper.requireNonNull(constants$93.g_get_codeset$MH,"g_get_codeset");
    }
    public static MemoryAddress g_get_codeset () {
        var mh$ = RuntimeHelper.requireNonNull(constants$93.g_get_codeset$MH, "g_get_codeset");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_console_charset$MH() {
        return RuntimeHelper.requireNonNull(constants$94.g_get_console_charset$MH,"g_get_console_charset");
    }
    public static int g_get_console_charset ( Addressable charset) {
        var mh$ = RuntimeHelper.requireNonNull(constants$94.g_get_console_charset$MH, "g_get_console_charset");
        try {
            return (int)mh$.invokeExact(charset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_language_names$MH() {
        return RuntimeHelper.requireNonNull(constants$94.g_get_language_names$MH,"g_get_language_names");
    }
    public static MemoryAddress g_get_language_names () {
        var mh$ = RuntimeHelper.requireNonNull(constants$94.g_get_language_names$MH, "g_get_language_names");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_language_names_with_category$MH() {
        return RuntimeHelper.requireNonNull(constants$94.g_get_language_names_with_category$MH,"g_get_language_names_with_category");
    }
    public static MemoryAddress g_get_language_names_with_category ( Addressable category_name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$94.g_get_language_names_with_category$MH, "g_get_language_names_with_category");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(category_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_locale_variants$MH() {
        return RuntimeHelper.requireNonNull(constants$94.g_get_locale_variants$MH,"g_get_locale_variants");
    }
    public static MemoryAddress g_get_locale_variants ( Addressable locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$94.g_get_locale_variants$MH, "g_get_locale_variants");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_CHECKSUM_MD5() {
        return (int)0L;
    }
    public static int G_CHECKSUM_SHA1() {
        return (int)1L;
    }
    public static int G_CHECKSUM_SHA256() {
        return (int)2L;
    }
    public static int G_CHECKSUM_SHA512() {
        return (int)3L;
    }
    public static int G_CHECKSUM_SHA384() {
        return (int)4L;
    }
    public static MethodHandle g_checksum_type_get_length$MH() {
        return RuntimeHelper.requireNonNull(constants$94.g_checksum_type_get_length$MH,"g_checksum_type_get_length");
    }
    public static long g_checksum_type_get_length ( int checksum_type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$94.g_checksum_type_get_length$MH, "g_checksum_type_get_length");
        try {
            return (long)mh$.invokeExact(checksum_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_checksum_new$MH() {
        return RuntimeHelper.requireNonNull(constants$94.g_checksum_new$MH,"g_checksum_new");
    }
    public static MemoryAddress g_checksum_new ( int checksum_type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$94.g_checksum_new$MH, "g_checksum_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(checksum_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_checksum_reset$MH() {
        return RuntimeHelper.requireNonNull(constants$95.g_checksum_reset$MH,"g_checksum_reset");
    }
    public static void g_checksum_reset ( Addressable checksum) {
        var mh$ = RuntimeHelper.requireNonNull(constants$95.g_checksum_reset$MH, "g_checksum_reset");
        try {
            mh$.invokeExact(checksum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_checksum_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$95.g_checksum_copy$MH,"g_checksum_copy");
    }
    public static MemoryAddress g_checksum_copy ( Addressable checksum) {
        var mh$ = RuntimeHelper.requireNonNull(constants$95.g_checksum_copy$MH, "g_checksum_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(checksum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_checksum_free$MH() {
        return RuntimeHelper.requireNonNull(constants$95.g_checksum_free$MH,"g_checksum_free");
    }
    public static void g_checksum_free ( Addressable checksum) {
        var mh$ = RuntimeHelper.requireNonNull(constants$95.g_checksum_free$MH, "g_checksum_free");
        try {
            mh$.invokeExact(checksum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_checksum_update$MH() {
        return RuntimeHelper.requireNonNull(constants$95.g_checksum_update$MH,"g_checksum_update");
    }
    public static void g_checksum_update ( Addressable checksum,  Addressable data,  long length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$95.g_checksum_update$MH, "g_checksum_update");
        try {
            mh$.invokeExact(checksum, data, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_checksum_get_string$MH() {
        return RuntimeHelper.requireNonNull(constants$95.g_checksum_get_string$MH,"g_checksum_get_string");
    }
    public static MemoryAddress g_checksum_get_string ( Addressable checksum) {
        var mh$ = RuntimeHelper.requireNonNull(constants$95.g_checksum_get_string$MH, "g_checksum_get_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(checksum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_checksum_get_digest$MH() {
        return RuntimeHelper.requireNonNull(constants$95.g_checksum_get_digest$MH,"g_checksum_get_digest");
    }
    public static void g_checksum_get_digest ( Addressable checksum,  Addressable buffer,  Addressable digest_len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$95.g_checksum_get_digest$MH, "g_checksum_get_digest");
        try {
            mh$.invokeExact(checksum, buffer, digest_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_compute_checksum_for_data$MH() {
        return RuntimeHelper.requireNonNull(constants$96.g_compute_checksum_for_data$MH,"g_compute_checksum_for_data");
    }
    public static MemoryAddress g_compute_checksum_for_data ( int checksum_type,  Addressable data,  long length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$96.g_compute_checksum_for_data$MH, "g_compute_checksum_for_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(checksum_type, data, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_compute_checksum_for_string$MH() {
        return RuntimeHelper.requireNonNull(constants$96.g_compute_checksum_for_string$MH,"g_compute_checksum_for_string");
    }
    public static MemoryAddress g_compute_checksum_for_string ( int checksum_type,  Addressable str,  long length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$96.g_compute_checksum_for_string$MH, "g_compute_checksum_for_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(checksum_type, str, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_compute_checksum_for_bytes$MH() {
        return RuntimeHelper.requireNonNull(constants$96.g_compute_checksum_for_bytes$MH,"g_compute_checksum_for_bytes");
    }
    public static MemoryAddress g_compute_checksum_for_bytes ( int checksum_type,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$96.g_compute_checksum_for_bytes$MH, "g_compute_checksum_for_bytes");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(checksum_type, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_CONVERT_ERROR_NO_CONVERSION() {
        return (int)0L;
    }
    public static int G_CONVERT_ERROR_ILLEGAL_SEQUENCE() {
        return (int)1L;
    }
    public static int G_CONVERT_ERROR_FAILED() {
        return (int)2L;
    }
    public static int G_CONVERT_ERROR_PARTIAL_INPUT() {
        return (int)3L;
    }
    public static int G_CONVERT_ERROR_BAD_URI() {
        return (int)4L;
    }
    public static int G_CONVERT_ERROR_NOT_ABSOLUTE_PATH() {
        return (int)5L;
    }
    public static int G_CONVERT_ERROR_NO_MEMORY() {
        return (int)6L;
    }
    public static int G_CONVERT_ERROR_EMBEDDED_NUL() {
        return (int)7L;
    }
    public static MethodHandle g_convert_error_quark$MH() {
        return RuntimeHelper.requireNonNull(constants$96.g_convert_error_quark$MH,"g_convert_error_quark");
    }
    public static int g_convert_error_quark () {
        var mh$ = RuntimeHelper.requireNonNull(constants$96.g_convert_error_quark$MH, "g_convert_error_quark");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GIConv = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle g_iconv_open$MH() {
        return RuntimeHelper.requireNonNull(constants$96.g_iconv_open$MH,"g_iconv_open");
    }
    public static MemoryAddress g_iconv_open ( Addressable to_codeset,  Addressable from_codeset) {
        var mh$ = RuntimeHelper.requireNonNull(constants$96.g_iconv_open$MH, "g_iconv_open");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(to_codeset, from_codeset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_iconv$MH() {
        return RuntimeHelper.requireNonNull(constants$96.g_iconv$MH,"g_iconv");
    }
    public static long g_iconv ( Addressable converter,  Addressable inbuf,  Addressable inbytes_left,  Addressable outbuf,  Addressable outbytes_left) {
        var mh$ = RuntimeHelper.requireNonNull(constants$96.g_iconv$MH, "g_iconv");
        try {
            return (long)mh$.invokeExact(converter, inbuf, inbytes_left, outbuf, outbytes_left);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_iconv_close$MH() {
        return RuntimeHelper.requireNonNull(constants$97.g_iconv_close$MH,"g_iconv_close");
    }
    public static int g_iconv_close ( Addressable converter) {
        var mh$ = RuntimeHelper.requireNonNull(constants$97.g_iconv_close$MH, "g_iconv_close");
        try {
            return (int)mh$.invokeExact(converter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_convert$MH() {
        return RuntimeHelper.requireNonNull(constants$97.g_convert$MH,"g_convert");
    }
    public static MemoryAddress g_convert ( Addressable str,  long len,  Addressable to_codeset,  Addressable from_codeset,  Addressable bytes_read,  Addressable bytes_written,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$97.g_convert$MH, "g_convert");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(str, len, to_codeset, from_codeset, bytes_read, bytes_written, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_convert_with_iconv$MH() {
        return RuntimeHelper.requireNonNull(constants$97.g_convert_with_iconv$MH,"g_convert_with_iconv");
    }
    public static MemoryAddress g_convert_with_iconv ( Addressable str,  long len,  Addressable converter,  Addressable bytes_read,  Addressable bytes_written,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$97.g_convert_with_iconv$MH, "g_convert_with_iconv");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(str, len, converter, bytes_read, bytes_written, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_convert_with_fallback$MH() {
        return RuntimeHelper.requireNonNull(constants$97.g_convert_with_fallback$MH,"g_convert_with_fallback");
    }
    public static MemoryAddress g_convert_with_fallback ( Addressable str,  long len,  Addressable to_codeset,  Addressable from_codeset,  Addressable fallback,  Addressable bytes_read,  Addressable bytes_written,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$97.g_convert_with_fallback$MH, "g_convert_with_fallback");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(str, len, to_codeset, from_codeset, fallback, bytes_read, bytes_written, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_locale_to_utf8$MH() {
        return RuntimeHelper.requireNonNull(constants$97.g_locale_to_utf8$MH,"g_locale_to_utf8");
    }
    public static MemoryAddress g_locale_to_utf8 ( Addressable opsysstring,  long len,  Addressable bytes_read,  Addressable bytes_written,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$97.g_locale_to_utf8$MH, "g_locale_to_utf8");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(opsysstring, len, bytes_read, bytes_written, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_locale_from_utf8$MH() {
        return RuntimeHelper.requireNonNull(constants$97.g_locale_from_utf8$MH,"g_locale_from_utf8");
    }
    public static MemoryAddress g_locale_from_utf8 ( Addressable utf8string,  long len,  Addressable bytes_read,  Addressable bytes_written,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$97.g_locale_from_utf8$MH, "g_locale_from_utf8");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(utf8string, len, bytes_read, bytes_written, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_filename_to_utf8$MH() {
        return RuntimeHelper.requireNonNull(constants$98.g_filename_to_utf8$MH,"g_filename_to_utf8");
    }
    public static MemoryAddress g_filename_to_utf8 ( Addressable opsysstring,  long len,  Addressable bytes_read,  Addressable bytes_written,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$98.g_filename_to_utf8$MH, "g_filename_to_utf8");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(opsysstring, len, bytes_read, bytes_written, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_filename_from_utf8$MH() {
        return RuntimeHelper.requireNonNull(constants$98.g_filename_from_utf8$MH,"g_filename_from_utf8");
    }
    public static MemoryAddress g_filename_from_utf8 ( Addressable utf8string,  long len,  Addressable bytes_read,  Addressable bytes_written,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$98.g_filename_from_utf8$MH, "g_filename_from_utf8");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(utf8string, len, bytes_read, bytes_written, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_filename_from_uri$MH() {
        return RuntimeHelper.requireNonNull(constants$98.g_filename_from_uri$MH,"g_filename_from_uri");
    }
    public static MemoryAddress g_filename_from_uri ( Addressable uri,  Addressable hostname,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$98.g_filename_from_uri$MH, "g_filename_from_uri");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(uri, hostname, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_filename_to_uri$MH() {
        return RuntimeHelper.requireNonNull(constants$98.g_filename_to_uri$MH,"g_filename_to_uri");
    }
    public static MemoryAddress g_filename_to_uri ( Addressable filename,  Addressable hostname,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$98.g_filename_to_uri$MH, "g_filename_to_uri");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(filename, hostname, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_filename_display_name$MH() {
        return RuntimeHelper.requireNonNull(constants$98.g_filename_display_name$MH,"g_filename_display_name");
    }
    public static MemoryAddress g_filename_display_name ( Addressable filename) {
        var mh$ = RuntimeHelper.requireNonNull(constants$98.g_filename_display_name$MH, "g_filename_display_name");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_filename_charsets$MH() {
        return RuntimeHelper.requireNonNull(constants$98.g_get_filename_charsets$MH,"g_get_filename_charsets");
    }
    public static int g_get_filename_charsets ( Addressable filename_charsets) {
        var mh$ = RuntimeHelper.requireNonNull(constants$98.g_get_filename_charsets$MH, "g_get_filename_charsets");
        try {
            return (int)mh$.invokeExact(filename_charsets);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_filename_display_basename$MH() {
        return RuntimeHelper.requireNonNull(constants$99.g_filename_display_basename$MH,"g_filename_display_basename");
    }
    public static MemoryAddress g_filename_display_basename ( Addressable filename) {
        var mh$ = RuntimeHelper.requireNonNull(constants$99.g_filename_display_basename$MH, "g_filename_display_basename");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_list_extract_uris$MH() {
        return RuntimeHelper.requireNonNull(constants$99.g_uri_list_extract_uris$MH,"g_uri_list_extract_uris");
    }
    public static MemoryAddress g_uri_list_extract_uris ( Addressable uri_list) {
        var mh$ = RuntimeHelper.requireNonNull(constants$99.g_uri_list_extract_uris$MH, "g_uri_list_extract_uris");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(uri_list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_datalist_init$MH() {
        return RuntimeHelper.requireNonNull(constants$99.g_datalist_init$MH,"g_datalist_init");
    }
    public static void g_datalist_init ( Addressable datalist) {
        var mh$ = RuntimeHelper.requireNonNull(constants$99.g_datalist_init$MH, "g_datalist_init");
        try {
            mh$.invokeExact(datalist);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_datalist_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$99.g_datalist_clear$MH,"g_datalist_clear");
    }
    public static void g_datalist_clear ( Addressable datalist) {
        var mh$ = RuntimeHelper.requireNonNull(constants$99.g_datalist_clear$MH, "g_datalist_clear");
        try {
            mh$.invokeExact(datalist);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_datalist_id_get_data$MH() {
        return RuntimeHelper.requireNonNull(constants$100.g_datalist_id_get_data$MH,"g_datalist_id_get_data");
    }
    public static MemoryAddress g_datalist_id_get_data ( Addressable datalist,  int key_id) {
        var mh$ = RuntimeHelper.requireNonNull(constants$100.g_datalist_id_get_data$MH, "g_datalist_id_get_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(datalist, key_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_datalist_id_set_data_full$MH() {
        return RuntimeHelper.requireNonNull(constants$100.g_datalist_id_set_data_full$MH,"g_datalist_id_set_data_full");
    }
    public static void g_datalist_id_set_data_full ( Addressable datalist,  int key_id,  Addressable data,  Addressable destroy_func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$100.g_datalist_id_set_data_full$MH, "g_datalist_id_set_data_full");
        try {
            mh$.invokeExact(datalist, key_id, data, destroy_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_datalist_id_dup_data$MH() {
        return RuntimeHelper.requireNonNull(constants$100.g_datalist_id_dup_data$MH,"g_datalist_id_dup_data");
    }
    public static MemoryAddress g_datalist_id_dup_data ( Addressable datalist,  int key_id,  Addressable dup_func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$100.g_datalist_id_dup_data$MH, "g_datalist_id_dup_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(datalist, key_id, dup_func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_datalist_id_replace_data$MH() {
        return RuntimeHelper.requireNonNull(constants$100.g_datalist_id_replace_data$MH,"g_datalist_id_replace_data");
    }
    public static int g_datalist_id_replace_data ( Addressable datalist,  int key_id,  Addressable oldval,  Addressable newval,  Addressable destroy,  Addressable old_destroy) {
        var mh$ = RuntimeHelper.requireNonNull(constants$100.g_datalist_id_replace_data$MH, "g_datalist_id_replace_data");
        try {
            return (int)mh$.invokeExact(datalist, key_id, oldval, newval, destroy, old_destroy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_datalist_id_remove_no_notify$MH() {
        return RuntimeHelper.requireNonNull(constants$101.g_datalist_id_remove_no_notify$MH,"g_datalist_id_remove_no_notify");
    }
    public static MemoryAddress g_datalist_id_remove_no_notify ( Addressable datalist,  int key_id) {
        var mh$ = RuntimeHelper.requireNonNull(constants$101.g_datalist_id_remove_no_notify$MH, "g_datalist_id_remove_no_notify");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(datalist, key_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_datalist_foreach$MH() {
        return RuntimeHelper.requireNonNull(constants$101.g_datalist_foreach$MH,"g_datalist_foreach");
    }
    public static void g_datalist_foreach ( Addressable datalist,  Addressable func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$101.g_datalist_foreach$MH, "g_datalist_foreach");
        try {
            mh$.invokeExact(datalist, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_datalist_set_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$101.g_datalist_set_flags$MH,"g_datalist_set_flags");
    }
    public static void g_datalist_set_flags ( Addressable datalist,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$101.g_datalist_set_flags$MH, "g_datalist_set_flags");
        try {
            mh$.invokeExact(datalist, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_datalist_unset_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$101.g_datalist_unset_flags$MH,"g_datalist_unset_flags");
    }
    public static void g_datalist_unset_flags ( Addressable datalist,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$101.g_datalist_unset_flags$MH, "g_datalist_unset_flags");
        try {
            mh$.invokeExact(datalist, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_datalist_get_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$101.g_datalist_get_flags$MH,"g_datalist_get_flags");
    }
    public static int g_datalist_get_flags ( Addressable datalist) {
        var mh$ = RuntimeHelper.requireNonNull(constants$101.g_datalist_get_flags$MH, "g_datalist_get_flags");
        try {
            return (int)mh$.invokeExact(datalist);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_dataset_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$101.g_dataset_destroy$MH,"g_dataset_destroy");
    }
    public static void g_dataset_destroy ( Addressable dataset_location) {
        var mh$ = RuntimeHelper.requireNonNull(constants$101.g_dataset_destroy$MH, "g_dataset_destroy");
        try {
            mh$.invokeExact(dataset_location);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_dataset_id_get_data$MH() {
        return RuntimeHelper.requireNonNull(constants$102.g_dataset_id_get_data$MH,"g_dataset_id_get_data");
    }
    public static MemoryAddress g_dataset_id_get_data ( Addressable dataset_location,  int key_id) {
        var mh$ = RuntimeHelper.requireNonNull(constants$102.g_dataset_id_get_data$MH, "g_dataset_id_get_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(dataset_location, key_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_datalist_get_data$MH() {
        return RuntimeHelper.requireNonNull(constants$102.g_datalist_get_data$MH,"g_datalist_get_data");
    }
    public static MemoryAddress g_datalist_get_data ( Addressable datalist,  Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$102.g_datalist_get_data$MH, "g_datalist_get_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(datalist, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_dataset_id_set_data_full$MH() {
        return RuntimeHelper.requireNonNull(constants$102.g_dataset_id_set_data_full$MH,"g_dataset_id_set_data_full");
    }
    public static void g_dataset_id_set_data_full ( Addressable dataset_location,  int key_id,  Addressable data,  Addressable destroy_func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$102.g_dataset_id_set_data_full$MH, "g_dataset_id_set_data_full");
        try {
            mh$.invokeExact(dataset_location, key_id, data, destroy_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_dataset_id_remove_no_notify$MH() {
        return RuntimeHelper.requireNonNull(constants$102.g_dataset_id_remove_no_notify$MH,"g_dataset_id_remove_no_notify");
    }
    public static MemoryAddress g_dataset_id_remove_no_notify ( Addressable dataset_location,  int key_id) {
        var mh$ = RuntimeHelper.requireNonNull(constants$102.g_dataset_id_remove_no_notify$MH, "g_dataset_id_remove_no_notify");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(dataset_location, key_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_dataset_foreach$MH() {
        return RuntimeHelper.requireNonNull(constants$102.g_dataset_foreach$MH,"g_dataset_foreach");
    }
    public static void g_dataset_foreach ( Addressable dataset_location,  Addressable func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$102.g_dataset_foreach$MH, "g_dataset_foreach");
        try {
            mh$.invokeExact(dataset_location, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfInt GTime = Constants$root.C_INT$LAYOUT;
    public static int G_DATE_DAY() {
        return (int)0L;
    }
    public static int G_DATE_MONTH() {
        return (int)1L;
    }
    public static int G_DATE_YEAR() {
        return (int)2L;
    }
    public static int G_DATE_BAD_WEEKDAY() {
        return (int)0L;
    }
    public static int G_DATE_MONDAY() {
        return (int)1L;
    }
    public static int G_DATE_TUESDAY() {
        return (int)2L;
    }
    public static int G_DATE_WEDNESDAY() {
        return (int)3L;
    }
    public static int G_DATE_THURSDAY() {
        return (int)4L;
    }
    public static int G_DATE_FRIDAY() {
        return (int)5L;
    }
    public static int G_DATE_SATURDAY() {
        return (int)6L;
    }
    public static int G_DATE_SUNDAY() {
        return (int)7L;
    }
    public static int G_DATE_BAD_MONTH() {
        return (int)0L;
    }
    public static int G_DATE_JANUARY() {
        return (int)1L;
    }
    public static int G_DATE_FEBRUARY() {
        return (int)2L;
    }
    public static int G_DATE_MARCH() {
        return (int)3L;
    }
    public static int G_DATE_APRIL() {
        return (int)4L;
    }
    public static int G_DATE_MAY() {
        return (int)5L;
    }
    public static int G_DATE_JUNE() {
        return (int)6L;
    }
    public static int G_DATE_JULY() {
        return (int)7L;
    }
    public static int G_DATE_AUGUST() {
        return (int)8L;
    }
    public static int G_DATE_SEPTEMBER() {
        return (int)9L;
    }
    public static int G_DATE_OCTOBER() {
        return (int)10L;
    }
    public static int G_DATE_NOVEMBER() {
        return (int)11L;
    }
    public static int G_DATE_DECEMBER() {
        return (int)12L;
    }
    public static MethodHandle g_date_new$MH() {
        return RuntimeHelper.requireNonNull(constants$102.g_date_new$MH,"g_date_new");
    }
    public static MemoryAddress g_date_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$102.g_date_new$MH, "g_date_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_new_dmy$MH() {
        return RuntimeHelper.requireNonNull(constants$103.g_date_new_dmy$MH,"g_date_new_dmy");
    }
    public static MemoryAddress g_date_new_dmy ( byte day,  int month,  short year) {
        var mh$ = RuntimeHelper.requireNonNull(constants$103.g_date_new_dmy$MH, "g_date_new_dmy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(day, month, year);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_new_julian$MH() {
        return RuntimeHelper.requireNonNull(constants$103.g_date_new_julian$MH,"g_date_new_julian");
    }
    public static MemoryAddress g_date_new_julian ( int julian_day) {
        var mh$ = RuntimeHelper.requireNonNull(constants$103.g_date_new_julian$MH, "g_date_new_julian");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(julian_day);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_free$MH() {
        return RuntimeHelper.requireNonNull(constants$103.g_date_free$MH,"g_date_free");
    }
    public static void g_date_free ( Addressable date) {
        var mh$ = RuntimeHelper.requireNonNull(constants$103.g_date_free$MH, "g_date_free");
        try {
            mh$.invokeExact(date);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$103.g_date_copy$MH,"g_date_copy");
    }
    public static MemoryAddress g_date_copy ( Addressable date) {
        var mh$ = RuntimeHelper.requireNonNull(constants$103.g_date_copy$MH, "g_date_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(date);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_valid$MH() {
        return RuntimeHelper.requireNonNull(constants$103.g_date_valid$MH,"g_date_valid");
    }
    public static int g_date_valid ( Addressable date) {
        var mh$ = RuntimeHelper.requireNonNull(constants$103.g_date_valid$MH, "g_date_valid");
        try {
            return (int)mh$.invokeExact(date);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_valid_day$MH() {
        return RuntimeHelper.requireNonNull(constants$103.g_date_valid_day$MH,"g_date_valid_day");
    }
    public static int g_date_valid_day ( byte day) {
        var mh$ = RuntimeHelper.requireNonNull(constants$103.g_date_valid_day$MH, "g_date_valid_day");
        try {
            return (int)mh$.invokeExact(day);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_valid_month$MH() {
        return RuntimeHelper.requireNonNull(constants$104.g_date_valid_month$MH,"g_date_valid_month");
    }
    public static int g_date_valid_month ( int month) {
        var mh$ = RuntimeHelper.requireNonNull(constants$104.g_date_valid_month$MH, "g_date_valid_month");
        try {
            return (int)mh$.invokeExact(month);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_valid_year$MH() {
        return RuntimeHelper.requireNonNull(constants$104.g_date_valid_year$MH,"g_date_valid_year");
    }
    public static int g_date_valid_year ( short year) {
        var mh$ = RuntimeHelper.requireNonNull(constants$104.g_date_valid_year$MH, "g_date_valid_year");
        try {
            return (int)mh$.invokeExact(year);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_valid_weekday$MH() {
        return RuntimeHelper.requireNonNull(constants$104.g_date_valid_weekday$MH,"g_date_valid_weekday");
    }
    public static int g_date_valid_weekday ( int weekday) {
        var mh$ = RuntimeHelper.requireNonNull(constants$104.g_date_valid_weekday$MH, "g_date_valid_weekday");
        try {
            return (int)mh$.invokeExact(weekday);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_valid_julian$MH() {
        return RuntimeHelper.requireNonNull(constants$104.g_date_valid_julian$MH,"g_date_valid_julian");
    }
    public static int g_date_valid_julian ( int julian_date) {
        var mh$ = RuntimeHelper.requireNonNull(constants$104.g_date_valid_julian$MH, "g_date_valid_julian");
        try {
            return (int)mh$.invokeExact(julian_date);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_valid_dmy$MH() {
        return RuntimeHelper.requireNonNull(constants$104.g_date_valid_dmy$MH,"g_date_valid_dmy");
    }
    public static int g_date_valid_dmy ( byte day,  int month,  short year) {
        var mh$ = RuntimeHelper.requireNonNull(constants$104.g_date_valid_dmy$MH, "g_date_valid_dmy");
        try {
            return (int)mh$.invokeExact(day, month, year);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_get_weekday$MH() {
        return RuntimeHelper.requireNonNull(constants$104.g_date_get_weekday$MH,"g_date_get_weekday");
    }
    public static int g_date_get_weekday ( Addressable date) {
        var mh$ = RuntimeHelper.requireNonNull(constants$104.g_date_get_weekday$MH, "g_date_get_weekday");
        try {
            return (int)mh$.invokeExact(date);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_get_month$MH() {
        return RuntimeHelper.requireNonNull(constants$105.g_date_get_month$MH,"g_date_get_month");
    }
    public static int g_date_get_month ( Addressable date) {
        var mh$ = RuntimeHelper.requireNonNull(constants$105.g_date_get_month$MH, "g_date_get_month");
        try {
            return (int)mh$.invokeExact(date);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_get_year$MH() {
        return RuntimeHelper.requireNonNull(constants$105.g_date_get_year$MH,"g_date_get_year");
    }
    public static short g_date_get_year ( Addressable date) {
        var mh$ = RuntimeHelper.requireNonNull(constants$105.g_date_get_year$MH, "g_date_get_year");
        try {
            return (short)mh$.invokeExact(date);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_get_day$MH() {
        return RuntimeHelper.requireNonNull(constants$105.g_date_get_day$MH,"g_date_get_day");
    }
    public static byte g_date_get_day ( Addressable date) {
        var mh$ = RuntimeHelper.requireNonNull(constants$105.g_date_get_day$MH, "g_date_get_day");
        try {
            return (byte)mh$.invokeExact(date);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_get_julian$MH() {
        return RuntimeHelper.requireNonNull(constants$105.g_date_get_julian$MH,"g_date_get_julian");
    }
    public static int g_date_get_julian ( Addressable date) {
        var mh$ = RuntimeHelper.requireNonNull(constants$105.g_date_get_julian$MH, "g_date_get_julian");
        try {
            return (int)mh$.invokeExact(date);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_get_day_of_year$MH() {
        return RuntimeHelper.requireNonNull(constants$105.g_date_get_day_of_year$MH,"g_date_get_day_of_year");
    }
    public static int g_date_get_day_of_year ( Addressable date) {
        var mh$ = RuntimeHelper.requireNonNull(constants$105.g_date_get_day_of_year$MH, "g_date_get_day_of_year");
        try {
            return (int)mh$.invokeExact(date);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_get_monday_week_of_year$MH() {
        return RuntimeHelper.requireNonNull(constants$105.g_date_get_monday_week_of_year$MH,"g_date_get_monday_week_of_year");
    }
    public static int g_date_get_monday_week_of_year ( Addressable date) {
        var mh$ = RuntimeHelper.requireNonNull(constants$105.g_date_get_monday_week_of_year$MH, "g_date_get_monday_week_of_year");
        try {
            return (int)mh$.invokeExact(date);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_get_sunday_week_of_year$MH() {
        return RuntimeHelper.requireNonNull(constants$106.g_date_get_sunday_week_of_year$MH,"g_date_get_sunday_week_of_year");
    }
    public static int g_date_get_sunday_week_of_year ( Addressable date) {
        var mh$ = RuntimeHelper.requireNonNull(constants$106.g_date_get_sunday_week_of_year$MH, "g_date_get_sunday_week_of_year");
        try {
            return (int)mh$.invokeExact(date);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_get_iso8601_week_of_year$MH() {
        return RuntimeHelper.requireNonNull(constants$106.g_date_get_iso8601_week_of_year$MH,"g_date_get_iso8601_week_of_year");
    }
    public static int g_date_get_iso8601_week_of_year ( Addressable date) {
        var mh$ = RuntimeHelper.requireNonNull(constants$106.g_date_get_iso8601_week_of_year$MH, "g_date_get_iso8601_week_of_year");
        try {
            return (int)mh$.invokeExact(date);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$106.g_date_clear$MH,"g_date_clear");
    }
    public static void g_date_clear ( Addressable date,  int n_dates) {
        var mh$ = RuntimeHelper.requireNonNull(constants$106.g_date_clear$MH, "g_date_clear");
        try {
            mh$.invokeExact(date, n_dates);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_set_parse$MH() {
        return RuntimeHelper.requireNonNull(constants$106.g_date_set_parse$MH,"g_date_set_parse");
    }
    public static void g_date_set_parse ( Addressable date,  Addressable str) {
        var mh$ = RuntimeHelper.requireNonNull(constants$106.g_date_set_parse$MH, "g_date_set_parse");
        try {
            mh$.invokeExact(date, str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_set_time_t$MH() {
        return RuntimeHelper.requireNonNull(constants$106.g_date_set_time_t$MH,"g_date_set_time_t");
    }
    public static void g_date_set_time_t ( Addressable date,  long timet) {
        var mh$ = RuntimeHelper.requireNonNull(constants$106.g_date_set_time_t$MH, "g_date_set_time_t");
        try {
            mh$.invokeExact(date, timet);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_set_time_val$MH() {
        return RuntimeHelper.requireNonNull(constants$106.g_date_set_time_val$MH,"g_date_set_time_val");
    }
    public static void g_date_set_time_val ( Addressable date,  Addressable timeval) {
        var mh$ = RuntimeHelper.requireNonNull(constants$106.g_date_set_time_val$MH, "g_date_set_time_val");
        try {
            mh$.invokeExact(date, timeval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_set_time$MH() {
        return RuntimeHelper.requireNonNull(constants$107.g_date_set_time$MH,"g_date_set_time");
    }
    public static void g_date_set_time ( Addressable date,  int time_) {
        var mh$ = RuntimeHelper.requireNonNull(constants$107.g_date_set_time$MH, "g_date_set_time");
        try {
            mh$.invokeExact(date, time_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_set_month$MH() {
        return RuntimeHelper.requireNonNull(constants$107.g_date_set_month$MH,"g_date_set_month");
    }
    public static void g_date_set_month ( Addressable date,  int month) {
        var mh$ = RuntimeHelper.requireNonNull(constants$107.g_date_set_month$MH, "g_date_set_month");
        try {
            mh$.invokeExact(date, month);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_set_day$MH() {
        return RuntimeHelper.requireNonNull(constants$107.g_date_set_day$MH,"g_date_set_day");
    }
    public static void g_date_set_day ( Addressable date,  byte day) {
        var mh$ = RuntimeHelper.requireNonNull(constants$107.g_date_set_day$MH, "g_date_set_day");
        try {
            mh$.invokeExact(date, day);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_set_year$MH() {
        return RuntimeHelper.requireNonNull(constants$107.g_date_set_year$MH,"g_date_set_year");
    }
    public static void g_date_set_year ( Addressable date,  short year) {
        var mh$ = RuntimeHelper.requireNonNull(constants$107.g_date_set_year$MH, "g_date_set_year");
        try {
            mh$.invokeExact(date, year);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_set_dmy$MH() {
        return RuntimeHelper.requireNonNull(constants$107.g_date_set_dmy$MH,"g_date_set_dmy");
    }
    public static void g_date_set_dmy ( Addressable date,  byte day,  int month,  short y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$107.g_date_set_dmy$MH, "g_date_set_dmy");
        try {
            mh$.invokeExact(date, day, month, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_set_julian$MH() {
        return RuntimeHelper.requireNonNull(constants$107.g_date_set_julian$MH,"g_date_set_julian");
    }
    public static void g_date_set_julian ( Addressable date,  int julian_date) {
        var mh$ = RuntimeHelper.requireNonNull(constants$107.g_date_set_julian$MH, "g_date_set_julian");
        try {
            mh$.invokeExact(date, julian_date);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_is_first_of_month$MH() {
        return RuntimeHelper.requireNonNull(constants$108.g_date_is_first_of_month$MH,"g_date_is_first_of_month");
    }
    public static int g_date_is_first_of_month ( Addressable date) {
        var mh$ = RuntimeHelper.requireNonNull(constants$108.g_date_is_first_of_month$MH, "g_date_is_first_of_month");
        try {
            return (int)mh$.invokeExact(date);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_is_last_of_month$MH() {
        return RuntimeHelper.requireNonNull(constants$108.g_date_is_last_of_month$MH,"g_date_is_last_of_month");
    }
    public static int g_date_is_last_of_month ( Addressable date) {
        var mh$ = RuntimeHelper.requireNonNull(constants$108.g_date_is_last_of_month$MH, "g_date_is_last_of_month");
        try {
            return (int)mh$.invokeExact(date);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_add_days$MH() {
        return RuntimeHelper.requireNonNull(constants$108.g_date_add_days$MH,"g_date_add_days");
    }
    public static void g_date_add_days ( Addressable date,  int n_days) {
        var mh$ = RuntimeHelper.requireNonNull(constants$108.g_date_add_days$MH, "g_date_add_days");
        try {
            mh$.invokeExact(date, n_days);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_subtract_days$MH() {
        return RuntimeHelper.requireNonNull(constants$108.g_date_subtract_days$MH,"g_date_subtract_days");
    }
    public static void g_date_subtract_days ( Addressable date,  int n_days) {
        var mh$ = RuntimeHelper.requireNonNull(constants$108.g_date_subtract_days$MH, "g_date_subtract_days");
        try {
            mh$.invokeExact(date, n_days);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_add_months$MH() {
        return RuntimeHelper.requireNonNull(constants$108.g_date_add_months$MH,"g_date_add_months");
    }
    public static void g_date_add_months ( Addressable date,  int n_months) {
        var mh$ = RuntimeHelper.requireNonNull(constants$108.g_date_add_months$MH, "g_date_add_months");
        try {
            mh$.invokeExact(date, n_months);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_subtract_months$MH() {
        return RuntimeHelper.requireNonNull(constants$108.g_date_subtract_months$MH,"g_date_subtract_months");
    }
    public static void g_date_subtract_months ( Addressable date,  int n_months) {
        var mh$ = RuntimeHelper.requireNonNull(constants$108.g_date_subtract_months$MH, "g_date_subtract_months");
        try {
            mh$.invokeExact(date, n_months);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_add_years$MH() {
        return RuntimeHelper.requireNonNull(constants$109.g_date_add_years$MH,"g_date_add_years");
    }
    public static void g_date_add_years ( Addressable date,  int n_years) {
        var mh$ = RuntimeHelper.requireNonNull(constants$109.g_date_add_years$MH, "g_date_add_years");
        try {
            mh$.invokeExact(date, n_years);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_subtract_years$MH() {
        return RuntimeHelper.requireNonNull(constants$109.g_date_subtract_years$MH,"g_date_subtract_years");
    }
    public static void g_date_subtract_years ( Addressable date,  int n_years) {
        var mh$ = RuntimeHelper.requireNonNull(constants$109.g_date_subtract_years$MH, "g_date_subtract_years");
        try {
            mh$.invokeExact(date, n_years);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_is_leap_year$MH() {
        return RuntimeHelper.requireNonNull(constants$109.g_date_is_leap_year$MH,"g_date_is_leap_year");
    }
    public static int g_date_is_leap_year ( short year) {
        var mh$ = RuntimeHelper.requireNonNull(constants$109.g_date_is_leap_year$MH, "g_date_is_leap_year");
        try {
            return (int)mh$.invokeExact(year);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_get_days_in_month$MH() {
        return RuntimeHelper.requireNonNull(constants$109.g_date_get_days_in_month$MH,"g_date_get_days_in_month");
    }
    public static byte g_date_get_days_in_month ( int month,  short year) {
        var mh$ = RuntimeHelper.requireNonNull(constants$109.g_date_get_days_in_month$MH, "g_date_get_days_in_month");
        try {
            return (byte)mh$.invokeExact(month, year);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_get_monday_weeks_in_year$MH() {
        return RuntimeHelper.requireNonNull(constants$109.g_date_get_monday_weeks_in_year$MH,"g_date_get_monday_weeks_in_year");
    }
    public static byte g_date_get_monday_weeks_in_year ( short year) {
        var mh$ = RuntimeHelper.requireNonNull(constants$109.g_date_get_monday_weeks_in_year$MH, "g_date_get_monday_weeks_in_year");
        try {
            return (byte)mh$.invokeExact(year);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_get_sunday_weeks_in_year$MH() {
        return RuntimeHelper.requireNonNull(constants$109.g_date_get_sunday_weeks_in_year$MH,"g_date_get_sunday_weeks_in_year");
    }
    public static byte g_date_get_sunday_weeks_in_year ( short year) {
        var mh$ = RuntimeHelper.requireNonNull(constants$109.g_date_get_sunday_weeks_in_year$MH, "g_date_get_sunday_weeks_in_year");
        try {
            return (byte)mh$.invokeExact(year);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_days_between$MH() {
        return RuntimeHelper.requireNonNull(constants$110.g_date_days_between$MH,"g_date_days_between");
    }
    public static int g_date_days_between ( Addressable date1,  Addressable date2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$110.g_date_days_between$MH, "g_date_days_between");
        try {
            return (int)mh$.invokeExact(date1, date2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_compare$MH() {
        return RuntimeHelper.requireNonNull(constants$110.g_date_compare$MH,"g_date_compare");
    }
    public static int g_date_compare ( Addressable lhs,  Addressable rhs) {
        var mh$ = RuntimeHelper.requireNonNull(constants$110.g_date_compare$MH, "g_date_compare");
        try {
            return (int)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_to_struct_tm$MH() {
        return RuntimeHelper.requireNonNull(constants$110.g_date_to_struct_tm$MH,"g_date_to_struct_tm");
    }
    public static void g_date_to_struct_tm ( Addressable date,  Addressable tm) {
        var mh$ = RuntimeHelper.requireNonNull(constants$110.g_date_to_struct_tm$MH, "g_date_to_struct_tm");
        try {
            mh$.invokeExact(date, tm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_clamp$MH() {
        return RuntimeHelper.requireNonNull(constants$110.g_date_clamp$MH,"g_date_clamp");
    }
    public static void g_date_clamp ( Addressable date,  Addressable min_date,  Addressable max_date) {
        var mh$ = RuntimeHelper.requireNonNull(constants$110.g_date_clamp$MH, "g_date_clamp");
        try {
            mh$.invokeExact(date, min_date, max_date);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_order$MH() {
        return RuntimeHelper.requireNonNull(constants$110.g_date_order$MH,"g_date_order");
    }
    public static void g_date_order ( Addressable date1,  Addressable date2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$110.g_date_order$MH, "g_date_order");
        try {
            mh$.invokeExact(date1, date2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_strftime$MH() {
        return RuntimeHelper.requireNonNull(constants$110.g_date_strftime$MH,"g_date_strftime");
    }
    public static long g_date_strftime ( Addressable s,  long slen,  Addressable format,  Addressable date) {
        var mh$ = RuntimeHelper.requireNonNull(constants$110.g_date_strftime$MH, "g_date_strftime");
        try {
            return (long)mh$.invokeExact(s, slen, format, date);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int DT_UNKNOWN() {
        return (int)0L;
    }
    public static int DT_FIFO() {
        return (int)1L;
    }
    public static int DT_CHR() {
        return (int)2L;
    }
    public static int DT_DIR() {
        return (int)4L;
    }
    public static int DT_BLK() {
        return (int)6L;
    }
    public static int DT_REG() {
        return (int)8L;
    }
    public static int DT_LNK() {
        return (int)10L;
    }
    public static int DT_SOCK() {
        return (int)12L;
    }
    public static int DT_WHT() {
        return (int)14L;
    }
    public static MethodHandle opendir$MH() {
        return RuntimeHelper.requireNonNull(constants$111.opendir$MH,"opendir");
    }
    public static MemoryAddress opendir ( Addressable __name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$111.opendir$MH, "opendir");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fdopendir$MH() {
        return RuntimeHelper.requireNonNull(constants$111.fdopendir$MH,"fdopendir");
    }
    public static MemoryAddress fdopendir ( int __fd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$111.fdopendir$MH, "fdopendir");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle closedir$MH() {
        return RuntimeHelper.requireNonNull(constants$111.closedir$MH,"closedir");
    }
    public static int closedir ( Addressable __dirp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$111.closedir$MH, "closedir");
        try {
            return (int)mh$.invokeExact(__dirp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle readdir$MH() {
        return RuntimeHelper.requireNonNull(constants$111.readdir$MH,"readdir");
    }
    public static MemoryAddress readdir ( Addressable __dirp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$111.readdir$MH, "readdir");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__dirp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle readdir_r$MH() {
        return RuntimeHelper.requireNonNull(constants$111.readdir_r$MH,"readdir_r");
    }
    public static int readdir_r ( Addressable __dirp,  Addressable __entry,  Addressable __result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$111.readdir_r$MH, "readdir_r");
        try {
            return (int)mh$.invokeExact(__dirp, __entry, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rewinddir$MH() {
        return RuntimeHelper.requireNonNull(constants$111.rewinddir$MH,"rewinddir");
    }
    public static void rewinddir ( Addressable __dirp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$111.rewinddir$MH, "rewinddir");
        try {
            mh$.invokeExact(__dirp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seekdir$MH() {
        return RuntimeHelper.requireNonNull(constants$112.seekdir$MH,"seekdir");
    }
    public static void seekdir ( Addressable __dirp,  long __pos) {
        var mh$ = RuntimeHelper.requireNonNull(constants$112.seekdir$MH, "seekdir");
        try {
            mh$.invokeExact(__dirp, __pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle telldir$MH() {
        return RuntimeHelper.requireNonNull(constants$112.telldir$MH,"telldir");
    }
    public static long telldir ( Addressable __dirp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$112.telldir$MH, "telldir");
        try {
            return (long)mh$.invokeExact(__dirp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dirfd$MH() {
        return RuntimeHelper.requireNonNull(constants$112.dirfd$MH,"dirfd");
    }
    public static int dirfd ( Addressable __dirp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$112.dirfd$MH, "dirfd");
        try {
            return (int)mh$.invokeExact(__dirp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scandir$MH() {
        return RuntimeHelper.requireNonNull(constants$113.scandir$MH,"scandir");
    }
    public static int scandir ( Addressable __dir,  Addressable __namelist,  Addressable __selector,  Addressable __cmp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$113.scandir$MH, "scandir");
        try {
            return (int)mh$.invokeExact(__dir, __namelist, __selector, __cmp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle alphasort$MH() {
        return RuntimeHelper.requireNonNull(constants$113.alphasort$MH,"alphasort");
    }
    public static int alphasort ( Addressable __e1,  Addressable __e2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$113.alphasort$MH, "alphasort");
        try {
            return (int)mh$.invokeExact(__e1, __e2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getdirentries$MH() {
        return RuntimeHelper.requireNonNull(constants$113.getdirentries$MH,"getdirentries");
    }
    public static long getdirentries ( int __fd,  Addressable __buf,  long __nbytes,  Addressable __basep) {
        var mh$ = RuntimeHelper.requireNonNull(constants$113.getdirentries$MH, "getdirentries");
        try {
            return (long)mh$.invokeExact(__fd, __buf, __nbytes, __basep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_dir_open$MH() {
        return RuntimeHelper.requireNonNull(constants$113.g_dir_open$MH,"g_dir_open");
    }
    public static MemoryAddress g_dir_open ( Addressable path,  int flags,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$113.g_dir_open$MH, "g_dir_open");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(path, flags, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_dir_read_name$MH() {
        return RuntimeHelper.requireNonNull(constants$113.g_dir_read_name$MH,"g_dir_read_name");
    }
    public static MemoryAddress g_dir_read_name ( Addressable dir) {
        var mh$ = RuntimeHelper.requireNonNull(constants$113.g_dir_read_name$MH, "g_dir_read_name");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(dir);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_dir_rewind$MH() {
        return RuntimeHelper.requireNonNull(constants$114.g_dir_rewind$MH,"g_dir_rewind");
    }
    public static void g_dir_rewind ( Addressable dir) {
        var mh$ = RuntimeHelper.requireNonNull(constants$114.g_dir_rewind$MH, "g_dir_rewind");
        try {
            mh$.invokeExact(dir);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_dir_close$MH() {
        return RuntimeHelper.requireNonNull(constants$114.g_dir_close$MH,"g_dir_close");
    }
    public static void g_dir_close ( Addressable dir) {
        var mh$ = RuntimeHelper.requireNonNull(constants$114.g_dir_close$MH, "g_dir_close");
        try {
            mh$.invokeExact(dir);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_getenv$MH() {
        return RuntimeHelper.requireNonNull(constants$114.g_getenv$MH,"g_getenv");
    }
    public static MemoryAddress g_getenv ( Addressable variable) {
        var mh$ = RuntimeHelper.requireNonNull(constants$114.g_getenv$MH, "g_getenv");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(variable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_setenv$MH() {
        return RuntimeHelper.requireNonNull(constants$114.g_setenv$MH,"g_setenv");
    }
    public static int g_setenv ( Addressable variable,  Addressable value,  int overwrite) {
        var mh$ = RuntimeHelper.requireNonNull(constants$114.g_setenv$MH, "g_setenv");
        try {
            return (int)mh$.invokeExact(variable, value, overwrite);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_unsetenv$MH() {
        return RuntimeHelper.requireNonNull(constants$114.g_unsetenv$MH,"g_unsetenv");
    }
    public static void g_unsetenv ( Addressable variable) {
        var mh$ = RuntimeHelper.requireNonNull(constants$114.g_unsetenv$MH, "g_unsetenv");
        try {
            mh$.invokeExact(variable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_listenv$MH() {
        return RuntimeHelper.requireNonNull(constants$114.g_listenv$MH,"g_listenv");
    }
    public static MemoryAddress g_listenv () {
        var mh$ = RuntimeHelper.requireNonNull(constants$114.g_listenv$MH, "g_listenv");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_environ$MH() {
        return RuntimeHelper.requireNonNull(constants$115.g_get_environ$MH,"g_get_environ");
    }
    public static MemoryAddress g_get_environ () {
        var mh$ = RuntimeHelper.requireNonNull(constants$115.g_get_environ$MH, "g_get_environ");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_environ_getenv$MH() {
        return RuntimeHelper.requireNonNull(constants$115.g_environ_getenv$MH,"g_environ_getenv");
    }
    public static MemoryAddress g_environ_getenv ( Addressable envp,  Addressable variable) {
        var mh$ = RuntimeHelper.requireNonNull(constants$115.g_environ_getenv$MH, "g_environ_getenv");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(envp, variable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_environ_setenv$MH() {
        return RuntimeHelper.requireNonNull(constants$115.g_environ_setenv$MH,"g_environ_setenv");
    }
    public static MemoryAddress g_environ_setenv ( Addressable envp,  Addressable variable,  Addressable value,  int overwrite) {
        var mh$ = RuntimeHelper.requireNonNull(constants$115.g_environ_setenv$MH, "g_environ_setenv");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(envp, variable, value, overwrite);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_environ_unsetenv$MH() {
        return RuntimeHelper.requireNonNull(constants$115.g_environ_unsetenv$MH,"g_environ_unsetenv");
    }
    public static MemoryAddress g_environ_unsetenv ( Addressable envp,  Addressable variable) {
        var mh$ = RuntimeHelper.requireNonNull(constants$115.g_environ_unsetenv$MH, "g_environ_unsetenv");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(envp, variable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_FILE_ERROR_EXIST() {
        return (int)0L;
    }
    public static int G_FILE_ERROR_ISDIR() {
        return (int)1L;
    }
    public static int G_FILE_ERROR_ACCES() {
        return (int)2L;
    }
    public static int G_FILE_ERROR_NAMETOOLONG() {
        return (int)3L;
    }
    public static int G_FILE_ERROR_NOENT() {
        return (int)4L;
    }
    public static int G_FILE_ERROR_NOTDIR() {
        return (int)5L;
    }
    public static int G_FILE_ERROR_NXIO() {
        return (int)6L;
    }
    public static int G_FILE_ERROR_NODEV() {
        return (int)7L;
    }
    public static int G_FILE_ERROR_ROFS() {
        return (int)8L;
    }
    public static int G_FILE_ERROR_TXTBSY() {
        return (int)9L;
    }
    public static int G_FILE_ERROR_FAULT() {
        return (int)10L;
    }
    public static int G_FILE_ERROR_LOOP() {
        return (int)11L;
    }
    public static int G_FILE_ERROR_NOSPC() {
        return (int)12L;
    }
    public static int G_FILE_ERROR_NOMEM() {
        return (int)13L;
    }
    public static int G_FILE_ERROR_MFILE() {
        return (int)14L;
    }
    public static int G_FILE_ERROR_NFILE() {
        return (int)15L;
    }
    public static int G_FILE_ERROR_BADF() {
        return (int)16L;
    }
    public static int G_FILE_ERROR_INVAL() {
        return (int)17L;
    }
    public static int G_FILE_ERROR_PIPE() {
        return (int)18L;
    }
    public static int G_FILE_ERROR_AGAIN() {
        return (int)19L;
    }
    public static int G_FILE_ERROR_INTR() {
        return (int)20L;
    }
    public static int G_FILE_ERROR_IO() {
        return (int)21L;
    }
    public static int G_FILE_ERROR_PERM() {
        return (int)22L;
    }
    public static int G_FILE_ERROR_NOSYS() {
        return (int)23L;
    }
    public static int G_FILE_ERROR_FAILED() {
        return (int)24L;
    }
    public static int G_FILE_TEST_IS_REGULAR() {
        return (int)1L;
    }
    public static int G_FILE_TEST_IS_SYMLINK() {
        return (int)2L;
    }
    public static int G_FILE_TEST_IS_DIR() {
        return (int)4L;
    }
    public static int G_FILE_TEST_IS_EXECUTABLE() {
        return (int)8L;
    }
    public static int G_FILE_TEST_EXISTS() {
        return (int)16L;
    }
    public static int G_FILE_SET_CONTENTS_NONE() {
        return (int)0L;
    }
    public static int G_FILE_SET_CONTENTS_CONSISTENT() {
        return (int)1L;
    }
    public static int G_FILE_SET_CONTENTS_DURABLE() {
        return (int)2L;
    }
    public static int G_FILE_SET_CONTENTS_ONLY_EXISTING() {
        return (int)4L;
    }
    public static MethodHandle g_file_error_quark$MH() {
        return RuntimeHelper.requireNonNull(constants$115.g_file_error_quark$MH,"g_file_error_quark");
    }
    public static int g_file_error_quark () {
        var mh$ = RuntimeHelper.requireNonNull(constants$115.g_file_error_quark$MH, "g_file_error_quark");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_file_error_from_errno$MH() {
        return RuntimeHelper.requireNonNull(constants$115.g_file_error_from_errno$MH,"g_file_error_from_errno");
    }
    public static int g_file_error_from_errno ( int err_no) {
        var mh$ = RuntimeHelper.requireNonNull(constants$115.g_file_error_from_errno$MH, "g_file_error_from_errno");
        try {
            return (int)mh$.invokeExact(err_no);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_file_test$MH() {
        return RuntimeHelper.requireNonNull(constants$116.g_file_test$MH,"g_file_test");
    }
    public static int g_file_test ( Addressable filename,  int test) {
        var mh$ = RuntimeHelper.requireNonNull(constants$116.g_file_test$MH, "g_file_test");
        try {
            return (int)mh$.invokeExact(filename, test);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_file_get_contents$MH() {
        return RuntimeHelper.requireNonNull(constants$116.g_file_get_contents$MH,"g_file_get_contents");
    }
    public static int g_file_get_contents ( Addressable filename,  Addressable contents,  Addressable length,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$116.g_file_get_contents$MH, "g_file_get_contents");
        try {
            return (int)mh$.invokeExact(filename, contents, length, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_file_set_contents$MH() {
        return RuntimeHelper.requireNonNull(constants$116.g_file_set_contents$MH,"g_file_set_contents");
    }
    public static int g_file_set_contents ( Addressable filename,  Addressable contents,  long length,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$116.g_file_set_contents$MH, "g_file_set_contents");
        try {
            return (int)mh$.invokeExact(filename, contents, length, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_file_set_contents_full$MH() {
        return RuntimeHelper.requireNonNull(constants$116.g_file_set_contents_full$MH,"g_file_set_contents_full");
    }
    public static int g_file_set_contents_full ( Addressable filename,  Addressable contents,  long length,  int flags,  int mode,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$116.g_file_set_contents_full$MH, "g_file_set_contents_full");
        try {
            return (int)mh$.invokeExact(filename, contents, length, flags, mode, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_file_read_link$MH() {
        return RuntimeHelper.requireNonNull(constants$116.g_file_read_link$MH,"g_file_read_link");
    }
    public static MemoryAddress g_file_read_link ( Addressable filename,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$116.g_file_read_link$MH, "g_file_read_link");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(filename, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mkdtemp$MH() {
        return RuntimeHelper.requireNonNull(constants$116.g_mkdtemp$MH,"g_mkdtemp");
    }
    public static MemoryAddress g_mkdtemp ( Addressable tmpl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$116.g_mkdtemp$MH, "g_mkdtemp");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(tmpl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mkdtemp_full$MH() {
        return RuntimeHelper.requireNonNull(constants$117.g_mkdtemp_full$MH,"g_mkdtemp_full");
    }
    public static MemoryAddress g_mkdtemp_full ( Addressable tmpl,  int mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$117.g_mkdtemp_full$MH, "g_mkdtemp_full");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(tmpl, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mkstemp$MH() {
        return RuntimeHelper.requireNonNull(constants$117.g_mkstemp$MH,"g_mkstemp");
    }
    public static int g_mkstemp ( Addressable tmpl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$117.g_mkstemp$MH, "g_mkstemp");
        try {
            return (int)mh$.invokeExact(tmpl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mkstemp_full$MH() {
        return RuntimeHelper.requireNonNull(constants$117.g_mkstemp_full$MH,"g_mkstemp_full");
    }
    public static int g_mkstemp_full ( Addressable tmpl,  int flags,  int mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$117.g_mkstemp_full$MH, "g_mkstemp_full");
        try {
            return (int)mh$.invokeExact(tmpl, flags, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_file_open_tmp$MH() {
        return RuntimeHelper.requireNonNull(constants$117.g_file_open_tmp$MH,"g_file_open_tmp");
    }
    public static int g_file_open_tmp ( Addressable tmpl,  Addressable name_used,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$117.g_file_open_tmp$MH, "g_file_open_tmp");
        try {
            return (int)mh$.invokeExact(tmpl, name_used, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_dir_make_tmp$MH() {
        return RuntimeHelper.requireNonNull(constants$117.g_dir_make_tmp$MH,"g_dir_make_tmp");
    }
    public static MemoryAddress g_dir_make_tmp ( Addressable tmpl,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$117.g_dir_make_tmp$MH, "g_dir_make_tmp");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(tmpl, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_build_path$MH() {
        return RuntimeHelper.requireNonNull(constants$117.g_build_path$MH,"g_build_path");
    }
    public static MemoryAddress g_build_path ( Addressable separator,  Addressable first_element, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$117.g_build_path$MH, "g_build_path");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(separator, first_element, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_build_pathv$MH() {
        return RuntimeHelper.requireNonNull(constants$118.g_build_pathv$MH,"g_build_pathv");
    }
    public static MemoryAddress g_build_pathv ( Addressable separator,  Addressable args) {
        var mh$ = RuntimeHelper.requireNonNull(constants$118.g_build_pathv$MH, "g_build_pathv");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(separator, args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_build_filename$MH() {
        return RuntimeHelper.requireNonNull(constants$118.g_build_filename$MH,"g_build_filename");
    }
    public static MemoryAddress g_build_filename ( Addressable first_element, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$118.g_build_filename$MH, "g_build_filename");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(first_element, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_build_filenamev$MH() {
        return RuntimeHelper.requireNonNull(constants$118.g_build_filenamev$MH,"g_build_filenamev");
    }
    public static MemoryAddress g_build_filenamev ( Addressable args) {
        var mh$ = RuntimeHelper.requireNonNull(constants$118.g_build_filenamev$MH, "g_build_filenamev");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_build_filename_valist$MH() {
        return RuntimeHelper.requireNonNull(constants$118.g_build_filename_valist$MH,"g_build_filename_valist");
    }
    public static MemoryAddress g_build_filename_valist ( Addressable first_element,  Addressable args) {
        var mh$ = RuntimeHelper.requireNonNull(constants$118.g_build_filename_valist$MH, "g_build_filename_valist");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(first_element, args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mkdir_with_parents$MH() {
        return RuntimeHelper.requireNonNull(constants$118.g_mkdir_with_parents$MH,"g_mkdir_with_parents");
    }
    public static int g_mkdir_with_parents ( Addressable pathname,  int mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$118.g_mkdir_with_parents$MH, "g_mkdir_with_parents");
        try {
            return (int)mh$.invokeExact(pathname, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_path_is_absolute$MH() {
        return RuntimeHelper.requireNonNull(constants$118.g_path_is_absolute$MH,"g_path_is_absolute");
    }
    public static int g_path_is_absolute ( Addressable file_name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$118.g_path_is_absolute$MH, "g_path_is_absolute");
        try {
            return (int)mh$.invokeExact(file_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_path_skip_root$MH() {
        return RuntimeHelper.requireNonNull(constants$119.g_path_skip_root$MH,"g_path_skip_root");
    }
    public static MemoryAddress g_path_skip_root ( Addressable file_name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$119.g_path_skip_root$MH, "g_path_skip_root");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(file_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_basename$MH() {
        return RuntimeHelper.requireNonNull(constants$119.g_basename$MH,"g_basename");
    }
    public static MemoryAddress g_basename ( Addressable file_name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$119.g_basename$MH, "g_basename");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(file_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_current_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$119.g_get_current_dir$MH,"g_get_current_dir");
    }
    public static MemoryAddress g_get_current_dir () {
        var mh$ = RuntimeHelper.requireNonNull(constants$119.g_get_current_dir$MH, "g_get_current_dir");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_path_get_basename$MH() {
        return RuntimeHelper.requireNonNull(constants$119.g_path_get_basename$MH,"g_path_get_basename");
    }
    public static MemoryAddress g_path_get_basename ( Addressable file_name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$119.g_path_get_basename$MH, "g_path_get_basename");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(file_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_path_get_dirname$MH() {
        return RuntimeHelper.requireNonNull(constants$119.g_path_get_dirname$MH,"g_path_get_dirname");
    }
    public static MemoryAddress g_path_get_dirname ( Addressable file_name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$119.g_path_get_dirname$MH, "g_path_get_dirname");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(file_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_canonicalize_filename$MH() {
        return RuntimeHelper.requireNonNull(constants$119.g_canonicalize_filename$MH,"g_canonicalize_filename");
    }
    public static MemoryAddress g_canonicalize_filename ( Addressable filename,  Addressable relative_to) {
        var mh$ = RuntimeHelper.requireNonNull(constants$119.g_canonicalize_filename$MH, "g_canonicalize_filename");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(filename, relative_to);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strip_context$MH() {
        return RuntimeHelper.requireNonNull(constants$120.g_strip_context$MH,"g_strip_context");
    }
    public static MemoryAddress g_strip_context ( Addressable msgid,  Addressable msgval) {
        var mh$ = RuntimeHelper.requireNonNull(constants$120.g_strip_context$MH, "g_strip_context");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(msgid, msgval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_dgettext$MH() {
        return RuntimeHelper.requireNonNull(constants$120.g_dgettext$MH,"g_dgettext");
    }
    public static MemoryAddress g_dgettext ( Addressable domain,  Addressable msgid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$120.g_dgettext$MH, "g_dgettext");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(domain, msgid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_dcgettext$MH() {
        return RuntimeHelper.requireNonNull(constants$120.g_dcgettext$MH,"g_dcgettext");
    }
    public static MemoryAddress g_dcgettext ( Addressable domain,  Addressable msgid,  int category) {
        var mh$ = RuntimeHelper.requireNonNull(constants$120.g_dcgettext$MH, "g_dcgettext");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(domain, msgid, category);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_dngettext$MH() {
        return RuntimeHelper.requireNonNull(constants$120.g_dngettext$MH,"g_dngettext");
    }
    public static MemoryAddress g_dngettext ( Addressable domain,  Addressable msgid,  Addressable msgid_plural,  long n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$120.g_dngettext$MH, "g_dngettext");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(domain, msgid, msgid_plural, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_dpgettext$MH() {
        return RuntimeHelper.requireNonNull(constants$120.g_dpgettext$MH,"g_dpgettext");
    }
    public static MemoryAddress g_dpgettext ( Addressable domain,  Addressable msgctxtid,  long msgidoffset) {
        var mh$ = RuntimeHelper.requireNonNull(constants$120.g_dpgettext$MH, "g_dpgettext");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(domain, msgctxtid, msgidoffset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_dpgettext2$MH() {
        return RuntimeHelper.requireNonNull(constants$120.g_dpgettext2$MH,"g_dpgettext2");
    }
    public static MemoryAddress g_dpgettext2 ( Addressable domain,  Addressable context,  Addressable msgid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$120.g_dpgettext2$MH, "g_dpgettext2");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(domain, context, msgid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_free$MH() {
        return RuntimeHelper.requireNonNull(constants$121.g_free$MH,"g_free");
    }
    public static void g_free ( Addressable mem) {
        var mh$ = RuntimeHelper.requireNonNull(constants$121.g_free$MH, "g_free");
        try {
            mh$.invokeExact(mem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_clear_pointer$MH() {
        return RuntimeHelper.requireNonNull(constants$121.g_clear_pointer$MH,"g_clear_pointer");
    }
    public static void g_clear_pointer ( Addressable pp,  Addressable destroy) {
        var mh$ = RuntimeHelper.requireNonNull(constants$121.g_clear_pointer$MH, "g_clear_pointer");
        try {
            mh$.invokeExact(pp, destroy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$121.g_malloc$MH,"g_malloc");
    }
    public static MemoryAddress g_malloc ( long n_bytes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$121.g_malloc$MH, "g_malloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(n_bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_malloc0$MH() {
        return RuntimeHelper.requireNonNull(constants$121.g_malloc0$MH,"g_malloc0");
    }
    public static MemoryAddress g_malloc0 ( long n_bytes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$121.g_malloc0$MH, "g_malloc0");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(n_bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$121.g_realloc$MH,"g_realloc");
    }
    public static MemoryAddress g_realloc ( Addressable mem,  long n_bytes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$121.g_realloc$MH, "g_realloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(mem, n_bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_try_malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$121.g_try_malloc$MH,"g_try_malloc");
    }
    public static MemoryAddress g_try_malloc ( long n_bytes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$121.g_try_malloc$MH, "g_try_malloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(n_bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_try_malloc0$MH() {
        return RuntimeHelper.requireNonNull(constants$122.g_try_malloc0$MH,"g_try_malloc0");
    }
    public static MemoryAddress g_try_malloc0 ( long n_bytes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$122.g_try_malloc0$MH, "g_try_malloc0");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(n_bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_try_realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$122.g_try_realloc$MH,"g_try_realloc");
    }
    public static MemoryAddress g_try_realloc ( Addressable mem,  long n_bytes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$122.g_try_realloc$MH, "g_try_realloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(mem, n_bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_malloc_n$MH() {
        return RuntimeHelper.requireNonNull(constants$122.g_malloc_n$MH,"g_malloc_n");
    }
    public static MemoryAddress g_malloc_n ( long n_blocks,  long n_block_bytes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$122.g_malloc_n$MH, "g_malloc_n");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(n_blocks, n_block_bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_malloc0_n$MH() {
        return RuntimeHelper.requireNonNull(constants$122.g_malloc0_n$MH,"g_malloc0_n");
    }
    public static MemoryAddress g_malloc0_n ( long n_blocks,  long n_block_bytes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$122.g_malloc0_n$MH, "g_malloc0_n");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(n_blocks, n_block_bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_realloc_n$MH() {
        return RuntimeHelper.requireNonNull(constants$122.g_realloc_n$MH,"g_realloc_n");
    }
    public static MemoryAddress g_realloc_n ( Addressable mem,  long n_blocks,  long n_block_bytes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$122.g_realloc_n$MH, "g_realloc_n");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(mem, n_blocks, n_block_bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_try_malloc_n$MH() {
        return RuntimeHelper.requireNonNull(constants$122.g_try_malloc_n$MH,"g_try_malloc_n");
    }
    public static MemoryAddress g_try_malloc_n ( long n_blocks,  long n_block_bytes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$122.g_try_malloc_n$MH, "g_try_malloc_n");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(n_blocks, n_block_bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_try_malloc0_n$MH() {
        return RuntimeHelper.requireNonNull(constants$123.g_try_malloc0_n$MH,"g_try_malloc0_n");
    }
    public static MemoryAddress g_try_malloc0_n ( long n_blocks,  long n_block_bytes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$123.g_try_malloc0_n$MH, "g_try_malloc0_n");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(n_blocks, n_block_bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_try_realloc_n$MH() {
        return RuntimeHelper.requireNonNull(constants$123.g_try_realloc_n$MH,"g_try_realloc_n");
    }
    public static MemoryAddress g_try_realloc_n ( Addressable mem,  long n_blocks,  long n_block_bytes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$123.g_try_realloc_n$MH, "g_try_realloc_n");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(mem, n_blocks, n_block_bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_steal_pointer$MH() {
        return RuntimeHelper.requireNonNull(constants$123.g_steal_pointer$MH,"g_steal_pointer");
    }
    public static MemoryAddress g_steal_pointer ( Addressable pp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$123.g_steal_pointer$MH, "g_steal_pointer");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mem_set_vtable$MH() {
        return RuntimeHelper.requireNonNull(constants$123.g_mem_set_vtable$MH,"g_mem_set_vtable");
    }
    public static void g_mem_set_vtable ( Addressable vtable) {
        var mh$ = RuntimeHelper.requireNonNull(constants$123.g_mem_set_vtable$MH, "g_mem_set_vtable");
        try {
            mh$.invokeExact(vtable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mem_is_system_malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$123.g_mem_is_system_malloc$MH,"g_mem_is_system_malloc");
    }
    public static int g_mem_is_system_malloc () {
        var mh$ = RuntimeHelper.requireNonNull(constants$123.g_mem_is_system_malloc$MH, "g_mem_is_system_malloc");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout g_mem_gc_friendly$LAYOUT() {
        return constants$123.g_mem_gc_friendly$LAYOUT;
    }
    public static VarHandle g_mem_gc_friendly$VH() {
        return constants$123.g_mem_gc_friendly$VH;
    }
    public static MemorySegment g_mem_gc_friendly$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$123.g_mem_gc_friendly$SEGMENT,"g_mem_gc_friendly");
    }
    public static int g_mem_gc_friendly$get() {
        return (int) constants$123.g_mem_gc_friendly$VH.get(RuntimeHelper.requireNonNull(constants$123.g_mem_gc_friendly$SEGMENT, "g_mem_gc_friendly"));
    }
    public static void g_mem_gc_friendly$set( int x) {
        constants$123.g_mem_gc_friendly$VH.set(RuntimeHelper.requireNonNull(constants$123.g_mem_gc_friendly$SEGMENT, "g_mem_gc_friendly"), x);
    }
    public static MemoryLayout glib_mem_profiler_table$LAYOUT() {
        return constants$124.glib_mem_profiler_table$LAYOUT;
    }
    public static VarHandle glib_mem_profiler_table$VH() {
        return constants$124.glib_mem_profiler_table$VH;
    }
    public static MemorySegment glib_mem_profiler_table$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$124.glib_mem_profiler_table$SEGMENT,"glib_mem_profiler_table");
    }
    public static MemoryAddress glib_mem_profiler_table$get() {
        return (jdk.incubator.foreign.MemoryAddress) constants$124.glib_mem_profiler_table$VH.get(RuntimeHelper.requireNonNull(constants$124.glib_mem_profiler_table$SEGMENT, "glib_mem_profiler_table"));
    }
    public static void glib_mem_profiler_table$set( MemoryAddress x) {
        constants$124.glib_mem_profiler_table$VH.set(RuntimeHelper.requireNonNull(constants$124.glib_mem_profiler_table$SEGMENT, "glib_mem_profiler_table"), x);
    }
    public static MethodHandle g_mem_profile$MH() {
        return RuntimeHelper.requireNonNull(constants$124.g_mem_profile$MH,"g_mem_profile");
    }
    public static void g_mem_profile () {
        var mh$ = RuntimeHelper.requireNonNull(constants$124.g_mem_profile$MH, "g_mem_profile");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_TRAVERSE_LEAVES() {
        return (int)1L;
    }
    public static int G_TRAVERSE_NON_LEAVES() {
        return (int)2L;
    }
    public static int G_TRAVERSE_ALL() {
        return (int)3L;
    }
    public static int G_TRAVERSE_MASK() {
        return (int)3L;
    }
    public static int G_TRAVERSE_LEAFS() {
        return (int)1L;
    }
    public static int G_TRAVERSE_NON_LEAFS() {
        return (int)2L;
    }
    public static int G_IN_ORDER() {
        return (int)0L;
    }
    public static int G_PRE_ORDER() {
        return (int)1L;
    }
    public static int G_POST_ORDER() {
        return (int)2L;
    }
    public static int G_LEVEL_ORDER() {
        return (int)3L;
    }
    public static MethodHandle g_node_new$MH() {
        return RuntimeHelper.requireNonNull(constants$125.g_node_new$MH,"g_node_new");
    }
    public static MemoryAddress g_node_new ( Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$125.g_node_new$MH, "g_node_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_node_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$125.g_node_destroy$MH,"g_node_destroy");
    }
    public static void g_node_destroy ( Addressable root) {
        var mh$ = RuntimeHelper.requireNonNull(constants$125.g_node_destroy$MH, "g_node_destroy");
        try {
            mh$.invokeExact(root);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_node_unlink$MH() {
        return RuntimeHelper.requireNonNull(constants$125.g_node_unlink$MH,"g_node_unlink");
    }
    public static void g_node_unlink ( Addressable node) {
        var mh$ = RuntimeHelper.requireNonNull(constants$125.g_node_unlink$MH, "g_node_unlink");
        try {
            mh$.invokeExact(node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_node_copy_deep$MH() {
        return RuntimeHelper.requireNonNull(constants$125.g_node_copy_deep$MH,"g_node_copy_deep");
    }
    public static MemoryAddress g_node_copy_deep ( Addressable node,  Addressable copy_func,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$125.g_node_copy_deep$MH, "g_node_copy_deep");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(node, copy_func, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_node_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$125.g_node_copy$MH,"g_node_copy");
    }
    public static MemoryAddress g_node_copy ( Addressable node) {
        var mh$ = RuntimeHelper.requireNonNull(constants$125.g_node_copy$MH, "g_node_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_node_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$125.g_node_insert$MH,"g_node_insert");
    }
    public static MemoryAddress g_node_insert ( Addressable parent,  int position,  Addressable node) {
        var mh$ = RuntimeHelper.requireNonNull(constants$125.g_node_insert$MH, "g_node_insert");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(parent, position, node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_node_insert_before$MH() {
        return RuntimeHelper.requireNonNull(constants$126.g_node_insert_before$MH,"g_node_insert_before");
    }
    public static MemoryAddress g_node_insert_before ( Addressable parent,  Addressable sibling,  Addressable node) {
        var mh$ = RuntimeHelper.requireNonNull(constants$126.g_node_insert_before$MH, "g_node_insert_before");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(parent, sibling, node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_node_insert_after$MH() {
        return RuntimeHelper.requireNonNull(constants$126.g_node_insert_after$MH,"g_node_insert_after");
    }
    public static MemoryAddress g_node_insert_after ( Addressable parent,  Addressable sibling,  Addressable node) {
        var mh$ = RuntimeHelper.requireNonNull(constants$126.g_node_insert_after$MH, "g_node_insert_after");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(parent, sibling, node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_node_prepend$MH() {
        return RuntimeHelper.requireNonNull(constants$126.g_node_prepend$MH,"g_node_prepend");
    }
    public static MemoryAddress g_node_prepend ( Addressable parent,  Addressable node) {
        var mh$ = RuntimeHelper.requireNonNull(constants$126.g_node_prepend$MH, "g_node_prepend");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(parent, node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_node_n_nodes$MH() {
        return RuntimeHelper.requireNonNull(constants$126.g_node_n_nodes$MH,"g_node_n_nodes");
    }
    public static int g_node_n_nodes ( Addressable root,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$126.g_node_n_nodes$MH, "g_node_n_nodes");
        try {
            return (int)mh$.invokeExact(root, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_node_get_root$MH() {
        return RuntimeHelper.requireNonNull(constants$126.g_node_get_root$MH,"g_node_get_root");
    }
    public static MemoryAddress g_node_get_root ( Addressable node) {
        var mh$ = RuntimeHelper.requireNonNull(constants$126.g_node_get_root$MH, "g_node_get_root");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_node_is_ancestor$MH() {
        return RuntimeHelper.requireNonNull(constants$126.g_node_is_ancestor$MH,"g_node_is_ancestor");
    }
    public static int g_node_is_ancestor ( Addressable node,  Addressable descendant) {
        var mh$ = RuntimeHelper.requireNonNull(constants$126.g_node_is_ancestor$MH, "g_node_is_ancestor");
        try {
            return (int)mh$.invokeExact(node, descendant);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_node_depth$MH() {
        return RuntimeHelper.requireNonNull(constants$127.g_node_depth$MH,"g_node_depth");
    }
    public static int g_node_depth ( Addressable node) {
        var mh$ = RuntimeHelper.requireNonNull(constants$127.g_node_depth$MH, "g_node_depth");
        try {
            return (int)mh$.invokeExact(node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_node_find$MH() {
        return RuntimeHelper.requireNonNull(constants$127.g_node_find$MH,"g_node_find");
    }
    public static MemoryAddress g_node_find ( Addressable root,  int order,  int flags,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$127.g_node_find$MH, "g_node_find");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(root, order, flags, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_node_traverse$MH() {
        return RuntimeHelper.requireNonNull(constants$127.g_node_traverse$MH,"g_node_traverse");
    }
    public static void g_node_traverse ( Addressable root,  int order,  int flags,  int max_depth,  Addressable func,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$127.g_node_traverse$MH, "g_node_traverse");
        try {
            mh$.invokeExact(root, order, flags, max_depth, func, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_node_max_height$MH() {
        return RuntimeHelper.requireNonNull(constants$127.g_node_max_height$MH,"g_node_max_height");
    }
    public static int g_node_max_height ( Addressable root) {
        var mh$ = RuntimeHelper.requireNonNull(constants$127.g_node_max_height$MH, "g_node_max_height");
        try {
            return (int)mh$.invokeExact(root);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_node_children_foreach$MH() {
        return RuntimeHelper.requireNonNull(constants$127.g_node_children_foreach$MH,"g_node_children_foreach");
    }
    public static void g_node_children_foreach ( Addressable node,  int flags,  Addressable func,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$127.g_node_children_foreach$MH, "g_node_children_foreach");
        try {
            mh$.invokeExact(node, flags, func, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_node_reverse_children$MH() {
        return RuntimeHelper.requireNonNull(constants$127.g_node_reverse_children$MH,"g_node_reverse_children");
    }
    public static void g_node_reverse_children ( Addressable node) {
        var mh$ = RuntimeHelper.requireNonNull(constants$127.g_node_reverse_children$MH, "g_node_reverse_children");
        try {
            mh$.invokeExact(node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_node_n_children$MH() {
        return RuntimeHelper.requireNonNull(constants$128.g_node_n_children$MH,"g_node_n_children");
    }
    public static int g_node_n_children ( Addressable node) {
        var mh$ = RuntimeHelper.requireNonNull(constants$128.g_node_n_children$MH, "g_node_n_children");
        try {
            return (int)mh$.invokeExact(node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_node_nth_child$MH() {
        return RuntimeHelper.requireNonNull(constants$128.g_node_nth_child$MH,"g_node_nth_child");
    }
    public static MemoryAddress g_node_nth_child ( Addressable node,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$128.g_node_nth_child$MH, "g_node_nth_child");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(node, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_node_last_child$MH() {
        return RuntimeHelper.requireNonNull(constants$128.g_node_last_child$MH,"g_node_last_child");
    }
    public static MemoryAddress g_node_last_child ( Addressable node) {
        var mh$ = RuntimeHelper.requireNonNull(constants$128.g_node_last_child$MH, "g_node_last_child");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_node_find_child$MH() {
        return RuntimeHelper.requireNonNull(constants$128.g_node_find_child$MH,"g_node_find_child");
    }
    public static MemoryAddress g_node_find_child ( Addressable node,  int flags,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$128.g_node_find_child$MH, "g_node_find_child");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(node, flags, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_node_child_position$MH() {
        return RuntimeHelper.requireNonNull(constants$128.g_node_child_position$MH,"g_node_child_position");
    }
    public static int g_node_child_position ( Addressable node,  Addressable child) {
        var mh$ = RuntimeHelper.requireNonNull(constants$128.g_node_child_position$MH, "g_node_child_position");
        try {
            return (int)mh$.invokeExact(node, child);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_node_child_index$MH() {
        return RuntimeHelper.requireNonNull(constants$128.g_node_child_index$MH,"g_node_child_index");
    }
    public static int g_node_child_index ( Addressable node,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$128.g_node_child_index$MH, "g_node_child_index");
        try {
            return (int)mh$.invokeExact(node, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_node_first_sibling$MH() {
        return RuntimeHelper.requireNonNull(constants$129.g_node_first_sibling$MH,"g_node_first_sibling");
    }
    public static MemoryAddress g_node_first_sibling ( Addressable node) {
        var mh$ = RuntimeHelper.requireNonNull(constants$129.g_node_first_sibling$MH, "g_node_first_sibling");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_node_last_sibling$MH() {
        return RuntimeHelper.requireNonNull(constants$129.g_node_last_sibling$MH,"g_node_last_sibling");
    }
    public static MemoryAddress g_node_last_sibling ( Addressable node) {
        var mh$ = RuntimeHelper.requireNonNull(constants$129.g_node_last_sibling$MH, "g_node_last_sibling");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_list_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$129.g_list_alloc$MH,"g_list_alloc");
    }
    public static MemoryAddress g_list_alloc () {
        var mh$ = RuntimeHelper.requireNonNull(constants$129.g_list_alloc$MH, "g_list_alloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_list_free$MH() {
        return RuntimeHelper.requireNonNull(constants$129.g_list_free$MH,"g_list_free");
    }
    public static void g_list_free ( Addressable list) {
        var mh$ = RuntimeHelper.requireNonNull(constants$129.g_list_free$MH, "g_list_free");
        try {
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_list_free_1$MH() {
        return RuntimeHelper.requireNonNull(constants$129.g_list_free_1$MH,"g_list_free_1");
    }
    public static void g_list_free_1 ( Addressable list) {
        var mh$ = RuntimeHelper.requireNonNull(constants$129.g_list_free_1$MH, "g_list_free_1");
        try {
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_list_free_full$MH() {
        return RuntimeHelper.requireNonNull(constants$129.g_list_free_full$MH,"g_list_free_full");
    }
    public static void g_list_free_full ( Addressable list,  Addressable free_func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$129.g_list_free_full$MH, "g_list_free_full");
        try {
            mh$.invokeExact(list, free_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_list_append$MH() {
        return RuntimeHelper.requireNonNull(constants$130.g_list_append$MH,"g_list_append");
    }
    public static MemoryAddress g_list_append ( Addressable list,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$130.g_list_append$MH, "g_list_append");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_list_prepend$MH() {
        return RuntimeHelper.requireNonNull(constants$130.g_list_prepend$MH,"g_list_prepend");
    }
    public static MemoryAddress g_list_prepend ( Addressable list,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$130.g_list_prepend$MH, "g_list_prepend");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_list_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$130.g_list_insert$MH,"g_list_insert");
    }
    public static MemoryAddress g_list_insert ( Addressable list,  Addressable data,  int position) {
        var mh$ = RuntimeHelper.requireNonNull(constants$130.g_list_insert$MH, "g_list_insert");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list, data, position);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_list_insert_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$130.g_list_insert_sorted$MH,"g_list_insert_sorted");
    }
    public static MemoryAddress g_list_insert_sorted ( Addressable list,  Addressable data,  Addressable func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$130.g_list_insert_sorted$MH, "g_list_insert_sorted");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list, data, func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_list_insert_sorted_with_data$MH() {
        return RuntimeHelper.requireNonNull(constants$130.g_list_insert_sorted_with_data$MH,"g_list_insert_sorted_with_data");
    }
    public static MemoryAddress g_list_insert_sorted_with_data ( Addressable list,  Addressable data,  Addressable func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$130.g_list_insert_sorted_with_data$MH, "g_list_insert_sorted_with_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list, data, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_list_insert_before$MH() {
        return RuntimeHelper.requireNonNull(constants$130.g_list_insert_before$MH,"g_list_insert_before");
    }
    public static MemoryAddress g_list_insert_before ( Addressable list,  Addressable sibling,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$130.g_list_insert_before$MH, "g_list_insert_before");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list, sibling, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_list_insert_before_link$MH() {
        return RuntimeHelper.requireNonNull(constants$131.g_list_insert_before_link$MH,"g_list_insert_before_link");
    }
    public static MemoryAddress g_list_insert_before_link ( Addressable list,  Addressable sibling,  Addressable link_) {
        var mh$ = RuntimeHelper.requireNonNull(constants$131.g_list_insert_before_link$MH, "g_list_insert_before_link");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list, sibling, link_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_list_concat$MH() {
        return RuntimeHelper.requireNonNull(constants$131.g_list_concat$MH,"g_list_concat");
    }
    public static MemoryAddress g_list_concat ( Addressable list1,  Addressable list2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$131.g_list_concat$MH, "g_list_concat");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list1, list2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_list_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$131.g_list_remove$MH,"g_list_remove");
    }
    public static MemoryAddress g_list_remove ( Addressable list,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$131.g_list_remove$MH, "g_list_remove");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_list_remove_all$MH() {
        return RuntimeHelper.requireNonNull(constants$131.g_list_remove_all$MH,"g_list_remove_all");
    }
    public static MemoryAddress g_list_remove_all ( Addressable list,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$131.g_list_remove_all$MH, "g_list_remove_all");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_list_remove_link$MH() {
        return RuntimeHelper.requireNonNull(constants$131.g_list_remove_link$MH,"g_list_remove_link");
    }
    public static MemoryAddress g_list_remove_link ( Addressable list,  Addressable llink) {
        var mh$ = RuntimeHelper.requireNonNull(constants$131.g_list_remove_link$MH, "g_list_remove_link");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list, llink);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_list_delete_link$MH() {
        return RuntimeHelper.requireNonNull(constants$131.g_list_delete_link$MH,"g_list_delete_link");
    }
    public static MemoryAddress g_list_delete_link ( Addressable list,  Addressable link_) {
        var mh$ = RuntimeHelper.requireNonNull(constants$131.g_list_delete_link$MH, "g_list_delete_link");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list, link_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_list_reverse$MH() {
        return RuntimeHelper.requireNonNull(constants$132.g_list_reverse$MH,"g_list_reverse");
    }
    public static MemoryAddress g_list_reverse ( Addressable list) {
        var mh$ = RuntimeHelper.requireNonNull(constants$132.g_list_reverse$MH, "g_list_reverse");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_list_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$132.g_list_copy$MH,"g_list_copy");
    }
    public static MemoryAddress g_list_copy ( Addressable list) {
        var mh$ = RuntimeHelper.requireNonNull(constants$132.g_list_copy$MH, "g_list_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_list_copy_deep$MH() {
        return RuntimeHelper.requireNonNull(constants$132.g_list_copy_deep$MH,"g_list_copy_deep");
    }
    public static MemoryAddress g_list_copy_deep ( Addressable list,  Addressable func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$132.g_list_copy_deep$MH, "g_list_copy_deep");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_list_nth$MH() {
        return RuntimeHelper.requireNonNull(constants$132.g_list_nth$MH,"g_list_nth");
    }
    public static MemoryAddress g_list_nth ( Addressable list,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$132.g_list_nth$MH, "g_list_nth");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_list_nth_prev$MH() {
        return RuntimeHelper.requireNonNull(constants$132.g_list_nth_prev$MH,"g_list_nth_prev");
    }
    public static MemoryAddress g_list_nth_prev ( Addressable list,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$132.g_list_nth_prev$MH, "g_list_nth_prev");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_list_find$MH() {
        return RuntimeHelper.requireNonNull(constants$132.g_list_find$MH,"g_list_find");
    }
    public static MemoryAddress g_list_find ( Addressable list,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$132.g_list_find$MH, "g_list_find");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_list_find_custom$MH() {
        return RuntimeHelper.requireNonNull(constants$133.g_list_find_custom$MH,"g_list_find_custom");
    }
    public static MemoryAddress g_list_find_custom ( Addressable list,  Addressable data,  Addressable func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$133.g_list_find_custom$MH, "g_list_find_custom");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list, data, func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_list_position$MH() {
        return RuntimeHelper.requireNonNull(constants$133.g_list_position$MH,"g_list_position");
    }
    public static int g_list_position ( Addressable list,  Addressable llink) {
        var mh$ = RuntimeHelper.requireNonNull(constants$133.g_list_position$MH, "g_list_position");
        try {
            return (int)mh$.invokeExact(list, llink);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_list_index$MH() {
        return RuntimeHelper.requireNonNull(constants$133.g_list_index$MH,"g_list_index");
    }
    public static int g_list_index ( Addressable list,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$133.g_list_index$MH, "g_list_index");
        try {
            return (int)mh$.invokeExact(list, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_list_last$MH() {
        return RuntimeHelper.requireNonNull(constants$133.g_list_last$MH,"g_list_last");
    }
    public static MemoryAddress g_list_last ( Addressable list) {
        var mh$ = RuntimeHelper.requireNonNull(constants$133.g_list_last$MH, "g_list_last");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_list_first$MH() {
        return RuntimeHelper.requireNonNull(constants$133.g_list_first$MH,"g_list_first");
    }
    public static MemoryAddress g_list_first ( Addressable list) {
        var mh$ = RuntimeHelper.requireNonNull(constants$133.g_list_first$MH, "g_list_first");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_list_length$MH() {
        return RuntimeHelper.requireNonNull(constants$133.g_list_length$MH,"g_list_length");
    }
    public static int g_list_length ( Addressable list) {
        var mh$ = RuntimeHelper.requireNonNull(constants$133.g_list_length$MH, "g_list_length");
        try {
            return (int)mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_list_foreach$MH() {
        return RuntimeHelper.requireNonNull(constants$134.g_list_foreach$MH,"g_list_foreach");
    }
    public static void g_list_foreach ( Addressable list,  Addressable func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$134.g_list_foreach$MH, "g_list_foreach");
        try {
            mh$.invokeExact(list, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_list_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$134.g_list_sort$MH,"g_list_sort");
    }
    public static MemoryAddress g_list_sort ( Addressable list,  Addressable compare_func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$134.g_list_sort$MH, "g_list_sort");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list, compare_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_list_sort_with_data$MH() {
        return RuntimeHelper.requireNonNull(constants$134.g_list_sort_with_data$MH,"g_list_sort_with_data");
    }
    public static MemoryAddress g_list_sort_with_data ( Addressable list,  Addressable compare_func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$134.g_list_sort_with_data$MH, "g_list_sort_with_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list, compare_func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_list_nth_data$MH() {
        return RuntimeHelper.requireNonNull(constants$134.g_list_nth_data$MH,"g_list_nth_data");
    }
    public static MemoryAddress g_list_nth_data ( Addressable list,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$134.g_list_nth_data$MH, "g_list_nth_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_clear_list$MH() {
        return RuntimeHelper.requireNonNull(constants$134.g_clear_list$MH,"g_clear_list");
    }
    public static void g_clear_list ( Addressable list_ptr,  Addressable destroy) {
        var mh$ = RuntimeHelper.requireNonNull(constants$134.g_clear_list$MH, "g_clear_list");
        try {
            mh$.invokeExact(list_ptr, destroy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hash_table_new$MH() {
        return RuntimeHelper.requireNonNull(constants$135.g_hash_table_new$MH,"g_hash_table_new");
    }
    public static MemoryAddress g_hash_table_new ( Addressable hash_func,  Addressable key_equal_func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$135.g_hash_table_new$MH, "g_hash_table_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hash_func, key_equal_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hash_table_new_full$MH() {
        return RuntimeHelper.requireNonNull(constants$135.g_hash_table_new_full$MH,"g_hash_table_new_full");
    }
    public static MemoryAddress g_hash_table_new_full ( Addressable hash_func,  Addressable key_equal_func,  Addressable key_destroy_func,  Addressable value_destroy_func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$135.g_hash_table_new_full$MH, "g_hash_table_new_full");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hash_func, key_equal_func, key_destroy_func, value_destroy_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hash_table_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$135.g_hash_table_destroy$MH,"g_hash_table_destroy");
    }
    public static void g_hash_table_destroy ( Addressable hash_table) {
        var mh$ = RuntimeHelper.requireNonNull(constants$135.g_hash_table_destroy$MH, "g_hash_table_destroy");
        try {
            mh$.invokeExact(hash_table);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hash_table_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$135.g_hash_table_insert$MH,"g_hash_table_insert");
    }
    public static int g_hash_table_insert ( Addressable hash_table,  Addressable key,  Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$135.g_hash_table_insert$MH, "g_hash_table_insert");
        try {
            return (int)mh$.invokeExact(hash_table, key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hash_table_replace$MH() {
        return RuntimeHelper.requireNonNull(constants$135.g_hash_table_replace$MH,"g_hash_table_replace");
    }
    public static int g_hash_table_replace ( Addressable hash_table,  Addressable key,  Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$135.g_hash_table_replace$MH, "g_hash_table_replace");
        try {
            return (int)mh$.invokeExact(hash_table, key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hash_table_add$MH() {
        return RuntimeHelper.requireNonNull(constants$136.g_hash_table_add$MH,"g_hash_table_add");
    }
    public static int g_hash_table_add ( Addressable hash_table,  Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$136.g_hash_table_add$MH, "g_hash_table_add");
        try {
            return (int)mh$.invokeExact(hash_table, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hash_table_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$136.g_hash_table_remove$MH,"g_hash_table_remove");
    }
    public static int g_hash_table_remove ( Addressable hash_table,  Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$136.g_hash_table_remove$MH, "g_hash_table_remove");
        try {
            return (int)mh$.invokeExact(hash_table, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hash_table_remove_all$MH() {
        return RuntimeHelper.requireNonNull(constants$136.g_hash_table_remove_all$MH,"g_hash_table_remove_all");
    }
    public static void g_hash_table_remove_all ( Addressable hash_table) {
        var mh$ = RuntimeHelper.requireNonNull(constants$136.g_hash_table_remove_all$MH, "g_hash_table_remove_all");
        try {
            mh$.invokeExact(hash_table);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hash_table_steal$MH() {
        return RuntimeHelper.requireNonNull(constants$136.g_hash_table_steal$MH,"g_hash_table_steal");
    }
    public static int g_hash_table_steal ( Addressable hash_table,  Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$136.g_hash_table_steal$MH, "g_hash_table_steal");
        try {
            return (int)mh$.invokeExact(hash_table, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hash_table_steal_extended$MH() {
        return RuntimeHelper.requireNonNull(constants$136.g_hash_table_steal_extended$MH,"g_hash_table_steal_extended");
    }
    public static int g_hash_table_steal_extended ( Addressable hash_table,  Addressable lookup_key,  Addressable stolen_key,  Addressable stolen_value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$136.g_hash_table_steal_extended$MH, "g_hash_table_steal_extended");
        try {
            return (int)mh$.invokeExact(hash_table, lookup_key, stolen_key, stolen_value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hash_table_steal_all$MH() {
        return RuntimeHelper.requireNonNull(constants$136.g_hash_table_steal_all$MH,"g_hash_table_steal_all");
    }
    public static void g_hash_table_steal_all ( Addressable hash_table) {
        var mh$ = RuntimeHelper.requireNonNull(constants$136.g_hash_table_steal_all$MH, "g_hash_table_steal_all");
        try {
            mh$.invokeExact(hash_table);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hash_table_lookup$MH() {
        return RuntimeHelper.requireNonNull(constants$137.g_hash_table_lookup$MH,"g_hash_table_lookup");
    }
    public static MemoryAddress g_hash_table_lookup ( Addressable hash_table,  Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$137.g_hash_table_lookup$MH, "g_hash_table_lookup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hash_table, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hash_table_contains$MH() {
        return RuntimeHelper.requireNonNull(constants$137.g_hash_table_contains$MH,"g_hash_table_contains");
    }
    public static int g_hash_table_contains ( Addressable hash_table,  Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$137.g_hash_table_contains$MH, "g_hash_table_contains");
        try {
            return (int)mh$.invokeExact(hash_table, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hash_table_lookup_extended$MH() {
        return RuntimeHelper.requireNonNull(constants$137.g_hash_table_lookup_extended$MH,"g_hash_table_lookup_extended");
    }
    public static int g_hash_table_lookup_extended ( Addressable hash_table,  Addressable lookup_key,  Addressable orig_key,  Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$137.g_hash_table_lookup_extended$MH, "g_hash_table_lookup_extended");
        try {
            return (int)mh$.invokeExact(hash_table, lookup_key, orig_key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hash_table_foreach$MH() {
        return RuntimeHelper.requireNonNull(constants$137.g_hash_table_foreach$MH,"g_hash_table_foreach");
    }
    public static void g_hash_table_foreach ( Addressable hash_table,  Addressable func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$137.g_hash_table_foreach$MH, "g_hash_table_foreach");
        try {
            mh$.invokeExact(hash_table, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hash_table_find$MH() {
        return RuntimeHelper.requireNonNull(constants$137.g_hash_table_find$MH,"g_hash_table_find");
    }
    public static MemoryAddress g_hash_table_find ( Addressable hash_table,  Addressable predicate,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$137.g_hash_table_find$MH, "g_hash_table_find");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hash_table, predicate, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hash_table_foreach_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$137.g_hash_table_foreach_remove$MH,"g_hash_table_foreach_remove");
    }
    public static int g_hash_table_foreach_remove ( Addressable hash_table,  Addressable func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$137.g_hash_table_foreach_remove$MH, "g_hash_table_foreach_remove");
        try {
            return (int)mh$.invokeExact(hash_table, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hash_table_foreach_steal$MH() {
        return RuntimeHelper.requireNonNull(constants$138.g_hash_table_foreach_steal$MH,"g_hash_table_foreach_steal");
    }
    public static int g_hash_table_foreach_steal ( Addressable hash_table,  Addressable func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$138.g_hash_table_foreach_steal$MH, "g_hash_table_foreach_steal");
        try {
            return (int)mh$.invokeExact(hash_table, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hash_table_size$MH() {
        return RuntimeHelper.requireNonNull(constants$138.g_hash_table_size$MH,"g_hash_table_size");
    }
    public static int g_hash_table_size ( Addressable hash_table) {
        var mh$ = RuntimeHelper.requireNonNull(constants$138.g_hash_table_size$MH, "g_hash_table_size");
        try {
            return (int)mh$.invokeExact(hash_table);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hash_table_get_keys$MH() {
        return RuntimeHelper.requireNonNull(constants$138.g_hash_table_get_keys$MH,"g_hash_table_get_keys");
    }
    public static MemoryAddress g_hash_table_get_keys ( Addressable hash_table) {
        var mh$ = RuntimeHelper.requireNonNull(constants$138.g_hash_table_get_keys$MH, "g_hash_table_get_keys");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hash_table);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hash_table_get_values$MH() {
        return RuntimeHelper.requireNonNull(constants$138.g_hash_table_get_values$MH,"g_hash_table_get_values");
    }
    public static MemoryAddress g_hash_table_get_values ( Addressable hash_table) {
        var mh$ = RuntimeHelper.requireNonNull(constants$138.g_hash_table_get_values$MH, "g_hash_table_get_values");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hash_table);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hash_table_get_keys_as_array$MH() {
        return RuntimeHelper.requireNonNull(constants$138.g_hash_table_get_keys_as_array$MH,"g_hash_table_get_keys_as_array");
    }
    public static MemoryAddress g_hash_table_get_keys_as_array ( Addressable hash_table,  Addressable length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$138.g_hash_table_get_keys_as_array$MH, "g_hash_table_get_keys_as_array");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hash_table, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hash_table_iter_init$MH() {
        return RuntimeHelper.requireNonNull(constants$138.g_hash_table_iter_init$MH,"g_hash_table_iter_init");
    }
    public static void g_hash_table_iter_init ( Addressable iter,  Addressable hash_table) {
        var mh$ = RuntimeHelper.requireNonNull(constants$138.g_hash_table_iter_init$MH, "g_hash_table_iter_init");
        try {
            mh$.invokeExact(iter, hash_table);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hash_table_iter_next$MH() {
        return RuntimeHelper.requireNonNull(constants$139.g_hash_table_iter_next$MH,"g_hash_table_iter_next");
    }
    public static int g_hash_table_iter_next ( Addressable iter,  Addressable key,  Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$139.g_hash_table_iter_next$MH, "g_hash_table_iter_next");
        try {
            return (int)mh$.invokeExact(iter, key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hash_table_iter_get_hash_table$MH() {
        return RuntimeHelper.requireNonNull(constants$139.g_hash_table_iter_get_hash_table$MH,"g_hash_table_iter_get_hash_table");
    }
    public static MemoryAddress g_hash_table_iter_get_hash_table ( Addressable iter) {
        var mh$ = RuntimeHelper.requireNonNull(constants$139.g_hash_table_iter_get_hash_table$MH, "g_hash_table_iter_get_hash_table");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hash_table_iter_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$139.g_hash_table_iter_remove$MH,"g_hash_table_iter_remove");
    }
    public static void g_hash_table_iter_remove ( Addressable iter) {
        var mh$ = RuntimeHelper.requireNonNull(constants$139.g_hash_table_iter_remove$MH, "g_hash_table_iter_remove");
        try {
            mh$.invokeExact(iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hash_table_iter_replace$MH() {
        return RuntimeHelper.requireNonNull(constants$139.g_hash_table_iter_replace$MH,"g_hash_table_iter_replace");
    }
    public static void g_hash_table_iter_replace ( Addressable iter,  Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$139.g_hash_table_iter_replace$MH, "g_hash_table_iter_replace");
        try {
            mh$.invokeExact(iter, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hash_table_iter_steal$MH() {
        return RuntimeHelper.requireNonNull(constants$139.g_hash_table_iter_steal$MH,"g_hash_table_iter_steal");
    }
    public static void g_hash_table_iter_steal ( Addressable iter) {
        var mh$ = RuntimeHelper.requireNonNull(constants$139.g_hash_table_iter_steal$MH, "g_hash_table_iter_steal");
        try {
            mh$.invokeExact(iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hash_table_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$139.g_hash_table_ref$MH,"g_hash_table_ref");
    }
    public static MemoryAddress g_hash_table_ref ( Addressable hash_table) {
        var mh$ = RuntimeHelper.requireNonNull(constants$139.g_hash_table_ref$MH, "g_hash_table_ref");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hash_table);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hash_table_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$140.g_hash_table_unref$MH,"g_hash_table_unref");
    }
    public static void g_hash_table_unref ( Addressable hash_table) {
        var mh$ = RuntimeHelper.requireNonNull(constants$140.g_hash_table_unref$MH, "g_hash_table_unref");
        try {
            mh$.invokeExact(hash_table);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_str_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$140.g_str_equal$MH,"g_str_equal");
    }
    public static int g_str_equal ( Addressable v1,  Addressable v2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$140.g_str_equal$MH, "g_str_equal");
        try {
            return (int)mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_str_hash$MH() {
        return RuntimeHelper.requireNonNull(constants$140.g_str_hash$MH,"g_str_hash");
    }
    public static int g_str_hash ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$140.g_str_hash$MH, "g_str_hash");
        try {
            return (int)mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_int_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$140.g_int_equal$MH,"g_int_equal");
    }
    public static int g_int_equal ( Addressable v1,  Addressable v2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$140.g_int_equal$MH, "g_int_equal");
        try {
            return (int)mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_int_hash$MH() {
        return RuntimeHelper.requireNonNull(constants$140.g_int_hash$MH,"g_int_hash");
    }
    public static int g_int_hash ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$140.g_int_hash$MH, "g_int_hash");
        try {
            return (int)mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_int64_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$140.g_int64_equal$MH,"g_int64_equal");
    }
    public static int g_int64_equal ( Addressable v1,  Addressable v2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$140.g_int64_equal$MH, "g_int64_equal");
        try {
            return (int)mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_int64_hash$MH() {
        return RuntimeHelper.requireNonNull(constants$141.g_int64_hash$MH,"g_int64_hash");
    }
    public static int g_int64_hash ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$141.g_int64_hash$MH, "g_int64_hash");
        try {
            return (int)mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_double_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$141.g_double_equal$MH,"g_double_equal");
    }
    public static int g_double_equal ( Addressable v1,  Addressable v2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$141.g_double_equal$MH, "g_double_equal");
        try {
            return (int)mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_double_hash$MH() {
        return RuntimeHelper.requireNonNull(constants$141.g_double_hash$MH,"g_double_hash");
    }
    public static int g_double_hash ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$141.g_double_hash$MH, "g_double_hash");
        try {
            return (int)mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_direct_hash$MH() {
        return RuntimeHelper.requireNonNull(constants$141.g_direct_hash$MH,"g_direct_hash");
    }
    public static int g_direct_hash ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$141.g_direct_hash$MH, "g_direct_hash");
        try {
            return (int)mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_direct_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$141.g_direct_equal$MH,"g_direct_equal");
    }
    public static int g_direct_equal ( Addressable v1,  Addressable v2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$141.g_direct_equal$MH, "g_direct_equal");
        try {
            return (int)mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hmac_new$MH() {
        return RuntimeHelper.requireNonNull(constants$141.g_hmac_new$MH,"g_hmac_new");
    }
    public static MemoryAddress g_hmac_new ( int digest_type,  Addressable key,  long key_len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$141.g_hmac_new$MH, "g_hmac_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(digest_type, key, key_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hmac_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$142.g_hmac_copy$MH,"g_hmac_copy");
    }
    public static MemoryAddress g_hmac_copy ( Addressable hmac) {
        var mh$ = RuntimeHelper.requireNonNull(constants$142.g_hmac_copy$MH, "g_hmac_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hmac);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hmac_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$142.g_hmac_ref$MH,"g_hmac_ref");
    }
    public static MemoryAddress g_hmac_ref ( Addressable hmac) {
        var mh$ = RuntimeHelper.requireNonNull(constants$142.g_hmac_ref$MH, "g_hmac_ref");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hmac);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hmac_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$142.g_hmac_unref$MH,"g_hmac_unref");
    }
    public static void g_hmac_unref ( Addressable hmac) {
        var mh$ = RuntimeHelper.requireNonNull(constants$142.g_hmac_unref$MH, "g_hmac_unref");
        try {
            mh$.invokeExact(hmac);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hmac_update$MH() {
        return RuntimeHelper.requireNonNull(constants$142.g_hmac_update$MH,"g_hmac_update");
    }
    public static void g_hmac_update ( Addressable hmac,  Addressable data,  long length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$142.g_hmac_update$MH, "g_hmac_update");
        try {
            mh$.invokeExact(hmac, data, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hmac_get_string$MH() {
        return RuntimeHelper.requireNonNull(constants$142.g_hmac_get_string$MH,"g_hmac_get_string");
    }
    public static MemoryAddress g_hmac_get_string ( Addressable hmac) {
        var mh$ = RuntimeHelper.requireNonNull(constants$142.g_hmac_get_string$MH, "g_hmac_get_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hmac);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hmac_get_digest$MH() {
        return RuntimeHelper.requireNonNull(constants$142.g_hmac_get_digest$MH,"g_hmac_get_digest");
    }
    public static void g_hmac_get_digest ( Addressable hmac,  Addressable buffer,  Addressable digest_len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$142.g_hmac_get_digest$MH, "g_hmac_get_digest");
        try {
            mh$.invokeExact(hmac, buffer, digest_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_compute_hmac_for_data$MH() {
        return RuntimeHelper.requireNonNull(constants$143.g_compute_hmac_for_data$MH,"g_compute_hmac_for_data");
    }
    public static MemoryAddress g_compute_hmac_for_data ( int digest_type,  Addressable key,  long key_len,  Addressable data,  long length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$143.g_compute_hmac_for_data$MH, "g_compute_hmac_for_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(digest_type, key, key_len, data, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_compute_hmac_for_string$MH() {
        return RuntimeHelper.requireNonNull(constants$143.g_compute_hmac_for_string$MH,"g_compute_hmac_for_string");
    }
    public static MemoryAddress g_compute_hmac_for_string ( int digest_type,  Addressable key,  long key_len,  Addressable str,  long length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$143.g_compute_hmac_for_string$MH, "g_compute_hmac_for_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(digest_type, key, key_len, str, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_compute_hmac_for_bytes$MH() {
        return RuntimeHelper.requireNonNull(constants$143.g_compute_hmac_for_bytes$MH,"g_compute_hmac_for_bytes");
    }
    public static MemoryAddress g_compute_hmac_for_bytes ( int digest_type,  Addressable key,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$143.g_compute_hmac_for_bytes$MH, "g_compute_hmac_for_bytes");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(digest_type, key, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_HOOK_FLAG_ACTIVE() {
        return (int)1L;
    }
    public static int G_HOOK_FLAG_IN_CALL() {
        return (int)2L;
    }
    public static int G_HOOK_FLAG_MASK() {
        return (int)15L;
    }
    public static MethodHandle g_hook_list_init$MH() {
        return RuntimeHelper.requireNonNull(constants$145.g_hook_list_init$MH,"g_hook_list_init");
    }
    public static void g_hook_list_init ( Addressable hook_list,  int hook_size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$145.g_hook_list_init$MH, "g_hook_list_init");
        try {
            mh$.invokeExact(hook_list, hook_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hook_list_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$146.g_hook_list_clear$MH,"g_hook_list_clear");
    }
    public static void g_hook_list_clear ( Addressable hook_list) {
        var mh$ = RuntimeHelper.requireNonNull(constants$146.g_hook_list_clear$MH, "g_hook_list_clear");
        try {
            mh$.invokeExact(hook_list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hook_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$146.g_hook_alloc$MH,"g_hook_alloc");
    }
    public static MemoryAddress g_hook_alloc ( Addressable hook_list) {
        var mh$ = RuntimeHelper.requireNonNull(constants$146.g_hook_alloc$MH, "g_hook_alloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hook_list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hook_free$MH() {
        return RuntimeHelper.requireNonNull(constants$146.g_hook_free$MH,"g_hook_free");
    }
    public static void g_hook_free ( Addressable hook_list,  Addressable hook) {
        var mh$ = RuntimeHelper.requireNonNull(constants$146.g_hook_free$MH, "g_hook_free");
        try {
            mh$.invokeExact(hook_list, hook);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hook_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$146.g_hook_ref$MH,"g_hook_ref");
    }
    public static MemoryAddress g_hook_ref ( Addressable hook_list,  Addressable hook) {
        var mh$ = RuntimeHelper.requireNonNull(constants$146.g_hook_ref$MH, "g_hook_ref");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hook_list, hook);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hook_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$146.g_hook_unref$MH,"g_hook_unref");
    }
    public static void g_hook_unref ( Addressable hook_list,  Addressable hook) {
        var mh$ = RuntimeHelper.requireNonNull(constants$146.g_hook_unref$MH, "g_hook_unref");
        try {
            mh$.invokeExact(hook_list, hook);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hook_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$146.g_hook_destroy$MH,"g_hook_destroy");
    }
    public static int g_hook_destroy ( Addressable hook_list,  long hook_id) {
        var mh$ = RuntimeHelper.requireNonNull(constants$146.g_hook_destroy$MH, "g_hook_destroy");
        try {
            return (int)mh$.invokeExact(hook_list, hook_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hook_destroy_link$MH() {
        return RuntimeHelper.requireNonNull(constants$147.g_hook_destroy_link$MH,"g_hook_destroy_link");
    }
    public static void g_hook_destroy_link ( Addressable hook_list,  Addressable hook) {
        var mh$ = RuntimeHelper.requireNonNull(constants$147.g_hook_destroy_link$MH, "g_hook_destroy_link");
        try {
            mh$.invokeExact(hook_list, hook);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hook_prepend$MH() {
        return RuntimeHelper.requireNonNull(constants$147.g_hook_prepend$MH,"g_hook_prepend");
    }
    public static void g_hook_prepend ( Addressable hook_list,  Addressable hook) {
        var mh$ = RuntimeHelper.requireNonNull(constants$147.g_hook_prepend$MH, "g_hook_prepend");
        try {
            mh$.invokeExact(hook_list, hook);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hook_insert_before$MH() {
        return RuntimeHelper.requireNonNull(constants$147.g_hook_insert_before$MH,"g_hook_insert_before");
    }
    public static void g_hook_insert_before ( Addressable hook_list,  Addressable sibling,  Addressable hook) {
        var mh$ = RuntimeHelper.requireNonNull(constants$147.g_hook_insert_before$MH, "g_hook_insert_before");
        try {
            mh$.invokeExact(hook_list, sibling, hook);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hook_insert_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$147.g_hook_insert_sorted$MH,"g_hook_insert_sorted");
    }
    public static void g_hook_insert_sorted ( Addressable hook_list,  Addressable hook,  Addressable func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$147.g_hook_insert_sorted$MH, "g_hook_insert_sorted");
        try {
            mh$.invokeExact(hook_list, hook, func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hook_get$MH() {
        return RuntimeHelper.requireNonNull(constants$147.g_hook_get$MH,"g_hook_get");
    }
    public static MemoryAddress g_hook_get ( Addressable hook_list,  long hook_id) {
        var mh$ = RuntimeHelper.requireNonNull(constants$147.g_hook_get$MH, "g_hook_get");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hook_list, hook_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hook_find$MH() {
        return RuntimeHelper.requireNonNull(constants$147.g_hook_find$MH,"g_hook_find");
    }
    public static MemoryAddress g_hook_find ( Addressable hook_list,  int need_valids,  Addressable func,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$147.g_hook_find$MH, "g_hook_find");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hook_list, need_valids, func, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hook_find_data$MH() {
        return RuntimeHelper.requireNonNull(constants$148.g_hook_find_data$MH,"g_hook_find_data");
    }
    public static MemoryAddress g_hook_find_data ( Addressable hook_list,  int need_valids,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$148.g_hook_find_data$MH, "g_hook_find_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hook_list, need_valids, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hook_find_func$MH() {
        return RuntimeHelper.requireNonNull(constants$148.g_hook_find_func$MH,"g_hook_find_func");
    }
    public static MemoryAddress g_hook_find_func ( Addressable hook_list,  int need_valids,  Addressable func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$148.g_hook_find_func$MH, "g_hook_find_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hook_list, need_valids, func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hook_find_func_data$MH() {
        return RuntimeHelper.requireNonNull(constants$148.g_hook_find_func_data$MH,"g_hook_find_func_data");
    }
    public static MemoryAddress g_hook_find_func_data ( Addressable hook_list,  int need_valids,  Addressable func,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$148.g_hook_find_func_data$MH, "g_hook_find_func_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hook_list, need_valids, func, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hook_first_valid$MH() {
        return RuntimeHelper.requireNonNull(constants$148.g_hook_first_valid$MH,"g_hook_first_valid");
    }
    public static MemoryAddress g_hook_first_valid ( Addressable hook_list,  int may_be_in_call) {
        var mh$ = RuntimeHelper.requireNonNull(constants$148.g_hook_first_valid$MH, "g_hook_first_valid");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hook_list, may_be_in_call);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hook_next_valid$MH() {
        return RuntimeHelper.requireNonNull(constants$148.g_hook_next_valid$MH,"g_hook_next_valid");
    }
    public static MemoryAddress g_hook_next_valid ( Addressable hook_list,  Addressable hook,  int may_be_in_call) {
        var mh$ = RuntimeHelper.requireNonNull(constants$148.g_hook_next_valid$MH, "g_hook_next_valid");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hook_list, hook, may_be_in_call);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hook_compare_ids$MH() {
        return RuntimeHelper.requireNonNull(constants$148.g_hook_compare_ids$MH,"g_hook_compare_ids");
    }
    public static int g_hook_compare_ids ( Addressable new_hook,  Addressable sibling) {
        var mh$ = RuntimeHelper.requireNonNull(constants$148.g_hook_compare_ids$MH, "g_hook_compare_ids");
        try {
            return (int)mh$.invokeExact(new_hook, sibling);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hook_list_invoke$MH() {
        return RuntimeHelper.requireNonNull(constants$149.g_hook_list_invoke$MH,"g_hook_list_invoke");
    }
    public static void g_hook_list_invoke ( Addressable hook_list,  int may_recurse) {
        var mh$ = RuntimeHelper.requireNonNull(constants$149.g_hook_list_invoke$MH, "g_hook_list_invoke");
        try {
            mh$.invokeExact(hook_list, may_recurse);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hook_list_invoke_check$MH() {
        return RuntimeHelper.requireNonNull(constants$149.g_hook_list_invoke_check$MH,"g_hook_list_invoke_check");
    }
    public static void g_hook_list_invoke_check ( Addressable hook_list,  int may_recurse) {
        var mh$ = RuntimeHelper.requireNonNull(constants$149.g_hook_list_invoke_check$MH, "g_hook_list_invoke_check");
        try {
            mh$.invokeExact(hook_list, may_recurse);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hook_list_marshal$MH() {
        return RuntimeHelper.requireNonNull(constants$149.g_hook_list_marshal$MH,"g_hook_list_marshal");
    }
    public static void g_hook_list_marshal ( Addressable hook_list,  int may_recurse,  Addressable marshaller,  Addressable marshal_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$149.g_hook_list_marshal$MH, "g_hook_list_marshal");
        try {
            mh$.invokeExact(hook_list, may_recurse, marshaller, marshal_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hook_list_marshal_check$MH() {
        return RuntimeHelper.requireNonNull(constants$149.g_hook_list_marshal_check$MH,"g_hook_list_marshal_check");
    }
    public static void g_hook_list_marshal_check ( Addressable hook_list,  int may_recurse,  Addressable marshaller,  Addressable marshal_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$149.g_hook_list_marshal_check$MH, "g_hook_list_marshal_check");
        try {
            mh$.invokeExact(hook_list, may_recurse, marshaller, marshal_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hostname_is_non_ascii$MH() {
        return RuntimeHelper.requireNonNull(constants$149.g_hostname_is_non_ascii$MH,"g_hostname_is_non_ascii");
    }
    public static int g_hostname_is_non_ascii ( Addressable hostname) {
        var mh$ = RuntimeHelper.requireNonNull(constants$149.g_hostname_is_non_ascii$MH, "g_hostname_is_non_ascii");
        try {
            return (int)mh$.invokeExact(hostname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hostname_is_ascii_encoded$MH() {
        return RuntimeHelper.requireNonNull(constants$149.g_hostname_is_ascii_encoded$MH,"g_hostname_is_ascii_encoded");
    }
    public static int g_hostname_is_ascii_encoded ( Addressable hostname) {
        var mh$ = RuntimeHelper.requireNonNull(constants$149.g_hostname_is_ascii_encoded$MH, "g_hostname_is_ascii_encoded");
        try {
            return (int)mh$.invokeExact(hostname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hostname_is_ip_address$MH() {
        return RuntimeHelper.requireNonNull(constants$150.g_hostname_is_ip_address$MH,"g_hostname_is_ip_address");
    }
    public static int g_hostname_is_ip_address ( Addressable hostname) {
        var mh$ = RuntimeHelper.requireNonNull(constants$150.g_hostname_is_ip_address$MH, "g_hostname_is_ip_address");
        try {
            return (int)mh$.invokeExact(hostname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hostname_to_ascii$MH() {
        return RuntimeHelper.requireNonNull(constants$150.g_hostname_to_ascii$MH,"g_hostname_to_ascii");
    }
    public static MemoryAddress g_hostname_to_ascii ( Addressable hostname) {
        var mh$ = RuntimeHelper.requireNonNull(constants$150.g_hostname_to_ascii$MH, "g_hostname_to_ascii");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hostname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_hostname_to_unicode$MH() {
        return RuntimeHelper.requireNonNull(constants$150.g_hostname_to_unicode$MH,"g_hostname_to_unicode");
    }
    public static MemoryAddress g_hostname_to_unicode ( Addressable hostname) {
        var mh$ = RuntimeHelper.requireNonNull(constants$150.g_hostname_to_unicode$MH, "g_hostname_to_unicode");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hostname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_poll$MH() {
        return RuntimeHelper.requireNonNull(constants$150.g_poll$MH,"g_poll");
    }
    public static int g_poll ( Addressable fds,  int nfds,  int timeout) {
        var mh$ = RuntimeHelper.requireNonNull(constants$150.g_poll$MH, "g_poll");
        try {
            return (int)mh$.invokeExact(fds, nfds, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slist_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$151.g_slist_alloc$MH,"g_slist_alloc");
    }
    public static MemoryAddress g_slist_alloc () {
        var mh$ = RuntimeHelper.requireNonNull(constants$151.g_slist_alloc$MH, "g_slist_alloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slist_free$MH() {
        return RuntimeHelper.requireNonNull(constants$151.g_slist_free$MH,"g_slist_free");
    }
    public static void g_slist_free ( Addressable list) {
        var mh$ = RuntimeHelper.requireNonNull(constants$151.g_slist_free$MH, "g_slist_free");
        try {
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slist_free_1$MH() {
        return RuntimeHelper.requireNonNull(constants$151.g_slist_free_1$MH,"g_slist_free_1");
    }
    public static void g_slist_free_1 ( Addressable list) {
        var mh$ = RuntimeHelper.requireNonNull(constants$151.g_slist_free_1$MH, "g_slist_free_1");
        try {
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slist_free_full$MH() {
        return RuntimeHelper.requireNonNull(constants$151.g_slist_free_full$MH,"g_slist_free_full");
    }
    public static void g_slist_free_full ( Addressable list,  Addressable free_func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$151.g_slist_free_full$MH, "g_slist_free_full");
        try {
            mh$.invokeExact(list, free_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slist_append$MH() {
        return RuntimeHelper.requireNonNull(constants$151.g_slist_append$MH,"g_slist_append");
    }
    public static MemoryAddress g_slist_append ( Addressable list,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$151.g_slist_append$MH, "g_slist_append");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slist_prepend$MH() {
        return RuntimeHelper.requireNonNull(constants$151.g_slist_prepend$MH,"g_slist_prepend");
    }
    public static MemoryAddress g_slist_prepend ( Addressable list,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$151.g_slist_prepend$MH, "g_slist_prepend");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slist_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$152.g_slist_insert$MH,"g_slist_insert");
    }
    public static MemoryAddress g_slist_insert ( Addressable list,  Addressable data,  int position) {
        var mh$ = RuntimeHelper.requireNonNull(constants$152.g_slist_insert$MH, "g_slist_insert");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list, data, position);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slist_insert_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$152.g_slist_insert_sorted$MH,"g_slist_insert_sorted");
    }
    public static MemoryAddress g_slist_insert_sorted ( Addressable list,  Addressable data,  Addressable func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$152.g_slist_insert_sorted$MH, "g_slist_insert_sorted");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list, data, func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slist_insert_sorted_with_data$MH() {
        return RuntimeHelper.requireNonNull(constants$152.g_slist_insert_sorted_with_data$MH,"g_slist_insert_sorted_with_data");
    }
    public static MemoryAddress g_slist_insert_sorted_with_data ( Addressable list,  Addressable data,  Addressable func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$152.g_slist_insert_sorted_with_data$MH, "g_slist_insert_sorted_with_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list, data, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slist_insert_before$MH() {
        return RuntimeHelper.requireNonNull(constants$152.g_slist_insert_before$MH,"g_slist_insert_before");
    }
    public static MemoryAddress g_slist_insert_before ( Addressable slist,  Addressable sibling,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$152.g_slist_insert_before$MH, "g_slist_insert_before");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(slist, sibling, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slist_concat$MH() {
        return RuntimeHelper.requireNonNull(constants$152.g_slist_concat$MH,"g_slist_concat");
    }
    public static MemoryAddress g_slist_concat ( Addressable list1,  Addressable list2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$152.g_slist_concat$MH, "g_slist_concat");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list1, list2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slist_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$152.g_slist_remove$MH,"g_slist_remove");
    }
    public static MemoryAddress g_slist_remove ( Addressable list,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$152.g_slist_remove$MH, "g_slist_remove");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slist_remove_all$MH() {
        return RuntimeHelper.requireNonNull(constants$153.g_slist_remove_all$MH,"g_slist_remove_all");
    }
    public static MemoryAddress g_slist_remove_all ( Addressable list,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$153.g_slist_remove_all$MH, "g_slist_remove_all");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slist_remove_link$MH() {
        return RuntimeHelper.requireNonNull(constants$153.g_slist_remove_link$MH,"g_slist_remove_link");
    }
    public static MemoryAddress g_slist_remove_link ( Addressable list,  Addressable link_) {
        var mh$ = RuntimeHelper.requireNonNull(constants$153.g_slist_remove_link$MH, "g_slist_remove_link");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list, link_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slist_delete_link$MH() {
        return RuntimeHelper.requireNonNull(constants$153.g_slist_delete_link$MH,"g_slist_delete_link");
    }
    public static MemoryAddress g_slist_delete_link ( Addressable list,  Addressable link_) {
        var mh$ = RuntimeHelper.requireNonNull(constants$153.g_slist_delete_link$MH, "g_slist_delete_link");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list, link_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slist_reverse$MH() {
        return RuntimeHelper.requireNonNull(constants$153.g_slist_reverse$MH,"g_slist_reverse");
    }
    public static MemoryAddress g_slist_reverse ( Addressable list) {
        var mh$ = RuntimeHelper.requireNonNull(constants$153.g_slist_reverse$MH, "g_slist_reverse");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slist_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$153.g_slist_copy$MH,"g_slist_copy");
    }
    public static MemoryAddress g_slist_copy ( Addressable list) {
        var mh$ = RuntimeHelper.requireNonNull(constants$153.g_slist_copy$MH, "g_slist_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slist_copy_deep$MH() {
        return RuntimeHelper.requireNonNull(constants$153.g_slist_copy_deep$MH,"g_slist_copy_deep");
    }
    public static MemoryAddress g_slist_copy_deep ( Addressable list,  Addressable func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$153.g_slist_copy_deep$MH, "g_slist_copy_deep");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slist_nth$MH() {
        return RuntimeHelper.requireNonNull(constants$154.g_slist_nth$MH,"g_slist_nth");
    }
    public static MemoryAddress g_slist_nth ( Addressable list,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$154.g_slist_nth$MH, "g_slist_nth");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slist_find$MH() {
        return RuntimeHelper.requireNonNull(constants$154.g_slist_find$MH,"g_slist_find");
    }
    public static MemoryAddress g_slist_find ( Addressable list,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$154.g_slist_find$MH, "g_slist_find");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slist_find_custom$MH() {
        return RuntimeHelper.requireNonNull(constants$154.g_slist_find_custom$MH,"g_slist_find_custom");
    }
    public static MemoryAddress g_slist_find_custom ( Addressable list,  Addressable data,  Addressable func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$154.g_slist_find_custom$MH, "g_slist_find_custom");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list, data, func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slist_position$MH() {
        return RuntimeHelper.requireNonNull(constants$154.g_slist_position$MH,"g_slist_position");
    }
    public static int g_slist_position ( Addressable list,  Addressable llink) {
        var mh$ = RuntimeHelper.requireNonNull(constants$154.g_slist_position$MH, "g_slist_position");
        try {
            return (int)mh$.invokeExact(list, llink);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slist_index$MH() {
        return RuntimeHelper.requireNonNull(constants$154.g_slist_index$MH,"g_slist_index");
    }
    public static int g_slist_index ( Addressable list,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$154.g_slist_index$MH, "g_slist_index");
        try {
            return (int)mh$.invokeExact(list, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slist_last$MH() {
        return RuntimeHelper.requireNonNull(constants$154.g_slist_last$MH,"g_slist_last");
    }
    public static MemoryAddress g_slist_last ( Addressable list) {
        var mh$ = RuntimeHelper.requireNonNull(constants$154.g_slist_last$MH, "g_slist_last");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slist_length$MH() {
        return RuntimeHelper.requireNonNull(constants$155.g_slist_length$MH,"g_slist_length");
    }
    public static int g_slist_length ( Addressable list) {
        var mh$ = RuntimeHelper.requireNonNull(constants$155.g_slist_length$MH, "g_slist_length");
        try {
            return (int)mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slist_foreach$MH() {
        return RuntimeHelper.requireNonNull(constants$155.g_slist_foreach$MH,"g_slist_foreach");
    }
    public static void g_slist_foreach ( Addressable list,  Addressable func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$155.g_slist_foreach$MH, "g_slist_foreach");
        try {
            mh$.invokeExact(list, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slist_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$155.g_slist_sort$MH,"g_slist_sort");
    }
    public static MemoryAddress g_slist_sort ( Addressable list,  Addressable compare_func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$155.g_slist_sort$MH, "g_slist_sort");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list, compare_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slist_sort_with_data$MH() {
        return RuntimeHelper.requireNonNull(constants$155.g_slist_sort_with_data$MH,"g_slist_sort_with_data");
    }
    public static MemoryAddress g_slist_sort_with_data ( Addressable list,  Addressable compare_func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$155.g_slist_sort_with_data$MH, "g_slist_sort_with_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list, compare_func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slist_nth_data$MH() {
        return RuntimeHelper.requireNonNull(constants$155.g_slist_nth_data$MH,"g_slist_nth_data");
    }
    public static MemoryAddress g_slist_nth_data ( Addressable list,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$155.g_slist_nth_data$MH, "g_slist_nth_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(list, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_clear_slist$MH() {
        return RuntimeHelper.requireNonNull(constants$155.g_clear_slist$MH,"g_clear_slist");
    }
    public static void g_clear_slist ( Addressable slist_ptr,  Addressable destroy) {
        var mh$ = RuntimeHelper.requireNonNull(constants$155.g_clear_slist$MH, "g_clear_slist");
        try {
            mh$.invokeExact(slist_ptr, destroy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_IO_IN() {
        return (int)1L;
    }
    public static int G_IO_OUT() {
        return (int)4L;
    }
    public static int G_IO_PRI() {
        return (int)2L;
    }
    public static int G_IO_ERR() {
        return (int)8L;
    }
    public static int G_IO_HUP() {
        return (int)16L;
    }
    public static int G_IO_NVAL() {
        return (int)32L;
    }
    public static MethodHandle g_main_context_new$MH() {
        return RuntimeHelper.requireNonNull(constants$157.g_main_context_new$MH,"g_main_context_new");
    }
    public static MemoryAddress g_main_context_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$157.g_main_context_new$MH, "g_main_context_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_main_context_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$157.g_main_context_ref$MH,"g_main_context_ref");
    }
    public static MemoryAddress g_main_context_ref ( Addressable context) {
        var mh$ = RuntimeHelper.requireNonNull(constants$157.g_main_context_ref$MH, "g_main_context_ref");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_main_context_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$157.g_main_context_unref$MH,"g_main_context_unref");
    }
    public static void g_main_context_unref ( Addressable context) {
        var mh$ = RuntimeHelper.requireNonNull(constants$157.g_main_context_unref$MH, "g_main_context_unref");
        try {
            mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_main_context_default$MH() {
        return RuntimeHelper.requireNonNull(constants$157.g_main_context_default$MH,"g_main_context_default");
    }
    public static MemoryAddress g_main_context_default () {
        var mh$ = RuntimeHelper.requireNonNull(constants$157.g_main_context_default$MH, "g_main_context_default");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_main_context_iteration$MH() {
        return RuntimeHelper.requireNonNull(constants$158.g_main_context_iteration$MH,"g_main_context_iteration");
    }
    public static int g_main_context_iteration ( Addressable context,  int may_block) {
        var mh$ = RuntimeHelper.requireNonNull(constants$158.g_main_context_iteration$MH, "g_main_context_iteration");
        try {
            return (int)mh$.invokeExact(context, may_block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_main_context_pending$MH() {
        return RuntimeHelper.requireNonNull(constants$158.g_main_context_pending$MH,"g_main_context_pending");
    }
    public static int g_main_context_pending ( Addressable context) {
        var mh$ = RuntimeHelper.requireNonNull(constants$158.g_main_context_pending$MH, "g_main_context_pending");
        try {
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_main_context_find_source_by_id$MH() {
        return RuntimeHelper.requireNonNull(constants$158.g_main_context_find_source_by_id$MH,"g_main_context_find_source_by_id");
    }
    public static MemoryAddress g_main_context_find_source_by_id ( Addressable context,  int source_id) {
        var mh$ = RuntimeHelper.requireNonNull(constants$158.g_main_context_find_source_by_id$MH, "g_main_context_find_source_by_id");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(context, source_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_main_context_find_source_by_user_data$MH() {
        return RuntimeHelper.requireNonNull(constants$158.g_main_context_find_source_by_user_data$MH,"g_main_context_find_source_by_user_data");
    }
    public static MemoryAddress g_main_context_find_source_by_user_data ( Addressable context,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$158.g_main_context_find_source_by_user_data$MH, "g_main_context_find_source_by_user_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(context, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_main_context_find_source_by_funcs_user_data$MH() {
        return RuntimeHelper.requireNonNull(constants$158.g_main_context_find_source_by_funcs_user_data$MH,"g_main_context_find_source_by_funcs_user_data");
    }
    public static MemoryAddress g_main_context_find_source_by_funcs_user_data ( Addressable context,  Addressable funcs,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$158.g_main_context_find_source_by_funcs_user_data$MH, "g_main_context_find_source_by_funcs_user_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(context, funcs, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_main_context_wakeup$MH() {
        return RuntimeHelper.requireNonNull(constants$158.g_main_context_wakeup$MH,"g_main_context_wakeup");
    }
    public static void g_main_context_wakeup ( Addressable context) {
        var mh$ = RuntimeHelper.requireNonNull(constants$158.g_main_context_wakeup$MH, "g_main_context_wakeup");
        try {
            mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_main_context_acquire$MH() {
        return RuntimeHelper.requireNonNull(constants$159.g_main_context_acquire$MH,"g_main_context_acquire");
    }
    public static int g_main_context_acquire ( Addressable context) {
        var mh$ = RuntimeHelper.requireNonNull(constants$159.g_main_context_acquire$MH, "g_main_context_acquire");
        try {
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_main_context_release$MH() {
        return RuntimeHelper.requireNonNull(constants$159.g_main_context_release$MH,"g_main_context_release");
    }
    public static void g_main_context_release ( Addressable context) {
        var mh$ = RuntimeHelper.requireNonNull(constants$159.g_main_context_release$MH, "g_main_context_release");
        try {
            mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_main_context_is_owner$MH() {
        return RuntimeHelper.requireNonNull(constants$159.g_main_context_is_owner$MH,"g_main_context_is_owner");
    }
    public static int g_main_context_is_owner ( Addressable context) {
        var mh$ = RuntimeHelper.requireNonNull(constants$159.g_main_context_is_owner$MH, "g_main_context_is_owner");
        try {
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_main_context_wait$MH() {
        return RuntimeHelper.requireNonNull(constants$159.g_main_context_wait$MH,"g_main_context_wait");
    }
    public static int g_main_context_wait ( Addressable context,  Addressable cond,  Addressable mutex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$159.g_main_context_wait$MH, "g_main_context_wait");
        try {
            return (int)mh$.invokeExact(context, cond, mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_main_context_prepare$MH() {
        return RuntimeHelper.requireNonNull(constants$159.g_main_context_prepare$MH,"g_main_context_prepare");
    }
    public static int g_main_context_prepare ( Addressable context,  Addressable priority) {
        var mh$ = RuntimeHelper.requireNonNull(constants$159.g_main_context_prepare$MH, "g_main_context_prepare");
        try {
            return (int)mh$.invokeExact(context, priority);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_main_context_query$MH() {
        return RuntimeHelper.requireNonNull(constants$159.g_main_context_query$MH,"g_main_context_query");
    }
    public static int g_main_context_query ( Addressable context,  int max_priority,  Addressable timeout_,  Addressable fds,  int n_fds) {
        var mh$ = RuntimeHelper.requireNonNull(constants$159.g_main_context_query$MH, "g_main_context_query");
        try {
            return (int)mh$.invokeExact(context, max_priority, timeout_, fds, n_fds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


