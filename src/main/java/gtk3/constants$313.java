// Generated by jextract

package gtk3;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
class constants$313 {

    static final FunctionDescriptor g_test_run_suite$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle g_test_run_suite$MH = RuntimeHelper.downcallHandle(
        "g_test_run_suite",
        constants$313.g_test_run_suite$FUNC, false
    );
    static final FunctionDescriptor g_test_trap_assertions$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle g_test_trap_assertions$MH = RuntimeHelper.downcallHandle(
        "g_test_trap_assertions",
        constants$313.g_test_trap_assertions$FUNC, false
    );
    static final FunctionDescriptor g_assertion_message$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle g_assertion_message$MH = RuntimeHelper.downcallHandle(
        "g_assertion_message",
        constants$313.g_assertion_message$FUNC, false
    );
    static final FunctionDescriptor g_assertion_message_expr$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle g_assertion_message_expr$MH = RuntimeHelper.downcallHandle(
        "g_assertion_message_expr",
        constants$313.g_assertion_message_expr$FUNC, false
    );
    static final FunctionDescriptor g_assertion_message_cmpstr$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle g_assertion_message_cmpstr$MH = RuntimeHelper.downcallHandle(
        "g_assertion_message_cmpstr",
        constants$313.g_assertion_message_cmpstr$FUNC, false
    );
    static final FunctionDescriptor g_assertion_message_cmpstrv$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle g_assertion_message_cmpstrv$MH = RuntimeHelper.downcallHandle(
        "g_assertion_message_cmpstrv",
        constants$313.g_assertion_message_cmpstrv$FUNC, false
    );
}


