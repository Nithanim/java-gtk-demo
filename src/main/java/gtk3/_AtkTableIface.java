// Generated by jextract

package gtk3;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _AtkTableIface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("parent"),
        Constants$root.C_POINTER$LAYOUT.withName("ref_at"),
        Constants$root.C_POINTER$LAYOUT.withName("get_index_at"),
        Constants$root.C_POINTER$LAYOUT.withName("get_column_at_index"),
        Constants$root.C_POINTER$LAYOUT.withName("get_row_at_index"),
        Constants$root.C_POINTER$LAYOUT.withName("get_n_columns"),
        Constants$root.C_POINTER$LAYOUT.withName("get_n_rows"),
        Constants$root.C_POINTER$LAYOUT.withName("get_column_extent_at"),
        Constants$root.C_POINTER$LAYOUT.withName("get_row_extent_at"),
        Constants$root.C_POINTER$LAYOUT.withName("get_caption"),
        Constants$root.C_POINTER$LAYOUT.withName("get_column_description"),
        Constants$root.C_POINTER$LAYOUT.withName("get_column_header"),
        Constants$root.C_POINTER$LAYOUT.withName("get_row_description"),
        Constants$root.C_POINTER$LAYOUT.withName("get_row_header"),
        Constants$root.C_POINTER$LAYOUT.withName("get_summary"),
        Constants$root.C_POINTER$LAYOUT.withName("set_caption"),
        Constants$root.C_POINTER$LAYOUT.withName("set_column_description"),
        Constants$root.C_POINTER$LAYOUT.withName("set_column_header"),
        Constants$root.C_POINTER$LAYOUT.withName("set_row_description"),
        Constants$root.C_POINTER$LAYOUT.withName("set_row_header"),
        Constants$root.C_POINTER$LAYOUT.withName("set_summary"),
        Constants$root.C_POINTER$LAYOUT.withName("get_selected_columns"),
        Constants$root.C_POINTER$LAYOUT.withName("get_selected_rows"),
        Constants$root.C_POINTER$LAYOUT.withName("is_column_selected"),
        Constants$root.C_POINTER$LAYOUT.withName("is_row_selected"),
        Constants$root.C_POINTER$LAYOUT.withName("is_selected"),
        Constants$root.C_POINTER$LAYOUT.withName("add_row_selection"),
        Constants$root.C_POINTER$LAYOUT.withName("remove_row_selection"),
        Constants$root.C_POINTER$LAYOUT.withName("add_column_selection"),
        Constants$root.C_POINTER$LAYOUT.withName("remove_column_selection"),
        Constants$root.C_POINTER$LAYOUT.withName("row_inserted"),
        Constants$root.C_POINTER$LAYOUT.withName("column_inserted"),
        Constants$root.C_POINTER$LAYOUT.withName("row_deleted"),
        Constants$root.C_POINTER$LAYOUT.withName("column_deleted"),
        Constants$root.C_POINTER$LAYOUT.withName("row_reordered"),
        Constants$root.C_POINTER$LAYOUT.withName("column_reordered"),
        Constants$root.C_POINTER$LAYOUT.withName("model_changed")
    ).withName("_AtkTableIface");
    public static MemoryLayout $LAYOUT() {
        return _AtkTableIface.$struct$LAYOUT;
    }
    public static MemorySegment parent$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor ref_at$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle ref_at$MH = RuntimeHelper.downcallHandle(
        _AtkTableIface.ref_at$FUNC, false
    );
    public interface ref_at {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress _x0, int _x1, int _x2);
        static NativeSymbol allocate(ref_at fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(ref_at.class, fi, _AtkTableIface.ref_at$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;II)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static ref_at ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("ref_at::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, int _x1, int _x2) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_AtkTableIface.ref_at$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, _x1, _x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ref_at$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ref_at"));
    public static VarHandle ref_at$VH() {
        return _AtkTableIface.ref_at$VH;
    }
    public static MemoryAddress ref_at$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.ref_at$VH.get(seg);
    }
    public static void ref_at$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableIface.ref_at$VH.set(seg, x);
    }
    public static MemoryAddress ref_at$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.ref_at$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ref_at$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableIface.ref_at$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ref_at ref_at (MemorySegment segment, ResourceScope scope) {
        return ref_at.ofAddress(ref_at$get(segment), scope);
    }
    static final FunctionDescriptor get_index_at$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle get_index_at$MH = RuntimeHelper.downcallHandle(
        _AtkTableIface.get_index_at$FUNC, false
    );
    public interface get_index_at {

        int apply(jdk.incubator.foreign.MemoryAddress _x0, int _x1, int _x2);
        static NativeSymbol allocate(get_index_at fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_index_at.class, fi, _AtkTableIface.get_index_at$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;II)I", scope);
        }
        static get_index_at ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_index_at::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, int _x1, int _x2) -> {
                try {
                    return (int)_AtkTableIface.get_index_at$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, _x1, _x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_index_at$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_index_at"));
    public static VarHandle get_index_at$VH() {
        return _AtkTableIface.get_index_at$VH;
    }
    public static MemoryAddress get_index_at$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.get_index_at$VH.get(seg);
    }
    public static void get_index_at$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableIface.get_index_at$VH.set(seg, x);
    }
    public static MemoryAddress get_index_at$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.get_index_at$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_index_at$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableIface.get_index_at$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_index_at get_index_at (MemorySegment segment, ResourceScope scope) {
        return get_index_at.ofAddress(get_index_at$get(segment), scope);
    }
    static final FunctionDescriptor get_column_at_index$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle get_column_at_index$MH = RuntimeHelper.downcallHandle(
        _AtkTableIface.get_column_at_index$FUNC, false
    );
    public interface get_column_at_index {

        int apply(jdk.incubator.foreign.MemoryAddress _x0, int _x1);
        static NativeSymbol allocate(get_column_at_index fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_column_at_index.class, fi, _AtkTableIface.get_column_at_index$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static get_column_at_index ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_column_at_index::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, int _x1) -> {
                try {
                    return (int)_AtkTableIface.get_column_at_index$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, _x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_column_at_index$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_column_at_index"));
    public static VarHandle get_column_at_index$VH() {
        return _AtkTableIface.get_column_at_index$VH;
    }
    public static MemoryAddress get_column_at_index$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.get_column_at_index$VH.get(seg);
    }
    public static void get_column_at_index$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableIface.get_column_at_index$VH.set(seg, x);
    }
    public static MemoryAddress get_column_at_index$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.get_column_at_index$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_column_at_index$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableIface.get_column_at_index$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_column_at_index get_column_at_index (MemorySegment segment, ResourceScope scope) {
        return get_column_at_index.ofAddress(get_column_at_index$get(segment), scope);
    }
    static final FunctionDescriptor get_row_at_index$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle get_row_at_index$MH = RuntimeHelper.downcallHandle(
        _AtkTableIface.get_row_at_index$FUNC, false
    );
    public interface get_row_at_index {

        int apply(jdk.incubator.foreign.MemoryAddress _x0, int _x1);
        static NativeSymbol allocate(get_row_at_index fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_row_at_index.class, fi, _AtkTableIface.get_row_at_index$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static get_row_at_index ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_row_at_index::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, int _x1) -> {
                try {
                    return (int)_AtkTableIface.get_row_at_index$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, _x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_row_at_index$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_row_at_index"));
    public static VarHandle get_row_at_index$VH() {
        return _AtkTableIface.get_row_at_index$VH;
    }
    public static MemoryAddress get_row_at_index$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.get_row_at_index$VH.get(seg);
    }
    public static void get_row_at_index$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableIface.get_row_at_index$VH.set(seg, x);
    }
    public static MemoryAddress get_row_at_index$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.get_row_at_index$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_row_at_index$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableIface.get_row_at_index$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_row_at_index get_row_at_index (MemorySegment segment, ResourceScope scope) {
        return get_row_at_index.ofAddress(get_row_at_index$get(segment), scope);
    }
    static final FunctionDescriptor get_n_columns$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_n_columns$MH = RuntimeHelper.downcallHandle(
        _AtkTableIface.get_n_columns$FUNC, false
    );
    public interface get_n_columns {

        int apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(get_n_columns fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_n_columns.class, fi, _AtkTableIface.get_n_columns$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_n_columns ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_n_columns::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    return (int)_AtkTableIface.get_n_columns$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_n_columns$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_n_columns"));
    public static VarHandle get_n_columns$VH() {
        return _AtkTableIface.get_n_columns$VH;
    }
    public static MemoryAddress get_n_columns$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.get_n_columns$VH.get(seg);
    }
    public static void get_n_columns$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableIface.get_n_columns$VH.set(seg, x);
    }
    public static MemoryAddress get_n_columns$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.get_n_columns$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_n_columns$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableIface.get_n_columns$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_n_columns get_n_columns (MemorySegment segment, ResourceScope scope) {
        return get_n_columns.ofAddress(get_n_columns$get(segment), scope);
    }
    static final FunctionDescriptor get_n_rows$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_n_rows$MH = RuntimeHelper.downcallHandle(
        _AtkTableIface.get_n_rows$FUNC, false
    );
    public interface get_n_rows {

        int apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(get_n_rows fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_n_rows.class, fi, _AtkTableIface.get_n_rows$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_n_rows ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_n_rows::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    return (int)_AtkTableIface.get_n_rows$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_n_rows$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_n_rows"));
    public static VarHandle get_n_rows$VH() {
        return _AtkTableIface.get_n_rows$VH;
    }
    public static MemoryAddress get_n_rows$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.get_n_rows$VH.get(seg);
    }
    public static void get_n_rows$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableIface.get_n_rows$VH.set(seg, x);
    }
    public static MemoryAddress get_n_rows$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.get_n_rows$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_n_rows$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableIface.get_n_rows$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_n_rows get_n_rows (MemorySegment segment, ResourceScope scope) {
        return get_n_rows.ofAddress(get_n_rows$get(segment), scope);
    }
    static final FunctionDescriptor get_column_extent_at$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle get_column_extent_at$MH = RuntimeHelper.downcallHandle(
        _AtkTableIface.get_column_extent_at$FUNC, false
    );
    public interface get_column_extent_at {

        int apply(jdk.incubator.foreign.MemoryAddress _x0, int _x1, int _x2);
        static NativeSymbol allocate(get_column_extent_at fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_column_extent_at.class, fi, _AtkTableIface.get_column_extent_at$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;II)I", scope);
        }
        static get_column_extent_at ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_column_extent_at::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, int _x1, int _x2) -> {
                try {
                    return (int)_AtkTableIface.get_column_extent_at$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, _x1, _x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_column_extent_at$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_column_extent_at"));
    public static VarHandle get_column_extent_at$VH() {
        return _AtkTableIface.get_column_extent_at$VH;
    }
    public static MemoryAddress get_column_extent_at$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.get_column_extent_at$VH.get(seg);
    }
    public static void get_column_extent_at$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableIface.get_column_extent_at$VH.set(seg, x);
    }
    public static MemoryAddress get_column_extent_at$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.get_column_extent_at$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_column_extent_at$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableIface.get_column_extent_at$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_column_extent_at get_column_extent_at (MemorySegment segment, ResourceScope scope) {
        return get_column_extent_at.ofAddress(get_column_extent_at$get(segment), scope);
    }
    static final FunctionDescriptor get_row_extent_at$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle get_row_extent_at$MH = RuntimeHelper.downcallHandle(
        _AtkTableIface.get_row_extent_at$FUNC, false
    );
    public interface get_row_extent_at {

        int apply(jdk.incubator.foreign.MemoryAddress _x0, int _x1, int _x2);
        static NativeSymbol allocate(get_row_extent_at fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_row_extent_at.class, fi, _AtkTableIface.get_row_extent_at$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;II)I", scope);
        }
        static get_row_extent_at ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_row_extent_at::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, int _x1, int _x2) -> {
                try {
                    return (int)_AtkTableIface.get_row_extent_at$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, _x1, _x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_row_extent_at$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_row_extent_at"));
    public static VarHandle get_row_extent_at$VH() {
        return _AtkTableIface.get_row_extent_at$VH;
    }
    public static MemoryAddress get_row_extent_at$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.get_row_extent_at$VH.get(seg);
    }
    public static void get_row_extent_at$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableIface.get_row_extent_at$VH.set(seg, x);
    }
    public static MemoryAddress get_row_extent_at$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.get_row_extent_at$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_row_extent_at$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableIface.get_row_extent_at$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_row_extent_at get_row_extent_at (MemorySegment segment, ResourceScope scope) {
        return get_row_extent_at.ofAddress(get_row_extent_at$get(segment), scope);
    }
    static final FunctionDescriptor get_caption$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_caption$MH = RuntimeHelper.downcallHandle(
        _AtkTableIface.get_caption$FUNC, false
    );
    public interface get_caption {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(get_caption fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_caption.class, fi, _AtkTableIface.get_caption$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_caption ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_caption::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_AtkTableIface.get_caption$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_caption$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_caption"));
    public static VarHandle get_caption$VH() {
        return _AtkTableIface.get_caption$VH;
    }
    public static MemoryAddress get_caption$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.get_caption$VH.get(seg);
    }
    public static void get_caption$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableIface.get_caption$VH.set(seg, x);
    }
    public static MemoryAddress get_caption$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.get_caption$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_caption$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableIface.get_caption$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_caption get_caption (MemorySegment segment, ResourceScope scope) {
        return get_caption.ofAddress(get_caption$get(segment), scope);
    }
    static final FunctionDescriptor get_column_description$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle get_column_description$MH = RuntimeHelper.downcallHandle(
        _AtkTableIface.get_column_description$FUNC, false
    );
    public interface get_column_description {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress _x0, int _x1);
        static NativeSymbol allocate(get_column_description fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_column_description.class, fi, _AtkTableIface.get_column_description$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_column_description ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_column_description::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, int _x1) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_AtkTableIface.get_column_description$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, _x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_column_description$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_column_description"));
    public static VarHandle get_column_description$VH() {
        return _AtkTableIface.get_column_description$VH;
    }
    public static MemoryAddress get_column_description$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.get_column_description$VH.get(seg);
    }
    public static void get_column_description$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableIface.get_column_description$VH.set(seg, x);
    }
    public static MemoryAddress get_column_description$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.get_column_description$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_column_description$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableIface.get_column_description$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_column_description get_column_description (MemorySegment segment, ResourceScope scope) {
        return get_column_description.ofAddress(get_column_description$get(segment), scope);
    }
    static final FunctionDescriptor get_column_header$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle get_column_header$MH = RuntimeHelper.downcallHandle(
        _AtkTableIface.get_column_header$FUNC, false
    );
    public interface get_column_header {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress _x0, int _x1);
        static NativeSymbol allocate(get_column_header fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_column_header.class, fi, _AtkTableIface.get_column_header$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_column_header ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_column_header::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, int _x1) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_AtkTableIface.get_column_header$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, _x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_column_header$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_column_header"));
    public static VarHandle get_column_header$VH() {
        return _AtkTableIface.get_column_header$VH;
    }
    public static MemoryAddress get_column_header$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.get_column_header$VH.get(seg);
    }
    public static void get_column_header$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableIface.get_column_header$VH.set(seg, x);
    }
    public static MemoryAddress get_column_header$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.get_column_header$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_column_header$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableIface.get_column_header$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_column_header get_column_header (MemorySegment segment, ResourceScope scope) {
        return get_column_header.ofAddress(get_column_header$get(segment), scope);
    }
    static final FunctionDescriptor get_row_description$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle get_row_description$MH = RuntimeHelper.downcallHandle(
        _AtkTableIface.get_row_description$FUNC, false
    );
    public interface get_row_description {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress _x0, int _x1);
        static NativeSymbol allocate(get_row_description fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_row_description.class, fi, _AtkTableIface.get_row_description$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_row_description ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_row_description::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, int _x1) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_AtkTableIface.get_row_description$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, _x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_row_description$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_row_description"));
    public static VarHandle get_row_description$VH() {
        return _AtkTableIface.get_row_description$VH;
    }
    public static MemoryAddress get_row_description$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.get_row_description$VH.get(seg);
    }
    public static void get_row_description$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableIface.get_row_description$VH.set(seg, x);
    }
    public static MemoryAddress get_row_description$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.get_row_description$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_row_description$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableIface.get_row_description$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_row_description get_row_description (MemorySegment segment, ResourceScope scope) {
        return get_row_description.ofAddress(get_row_description$get(segment), scope);
    }
    static final FunctionDescriptor get_row_header$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle get_row_header$MH = RuntimeHelper.downcallHandle(
        _AtkTableIface.get_row_header$FUNC, false
    );
    public interface get_row_header {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress _x0, int _x1);
        static NativeSymbol allocate(get_row_header fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_row_header.class, fi, _AtkTableIface.get_row_header$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_row_header ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_row_header::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, int _x1) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_AtkTableIface.get_row_header$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, _x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_row_header$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_row_header"));
    public static VarHandle get_row_header$VH() {
        return _AtkTableIface.get_row_header$VH;
    }
    public static MemoryAddress get_row_header$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.get_row_header$VH.get(seg);
    }
    public static void get_row_header$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableIface.get_row_header$VH.set(seg, x);
    }
    public static MemoryAddress get_row_header$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.get_row_header$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_row_header$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableIface.get_row_header$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_row_header get_row_header (MemorySegment segment, ResourceScope scope) {
        return get_row_header.ofAddress(get_row_header$get(segment), scope);
    }
    static final FunctionDescriptor get_summary$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_summary$MH = RuntimeHelper.downcallHandle(
        _AtkTableIface.get_summary$FUNC, false
    );
    public interface get_summary {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(get_summary fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_summary.class, fi, _AtkTableIface.get_summary$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_summary ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_summary::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_AtkTableIface.get_summary$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_summary$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_summary"));
    public static VarHandle get_summary$VH() {
        return _AtkTableIface.get_summary$VH;
    }
    public static MemoryAddress get_summary$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.get_summary$VH.get(seg);
    }
    public static void get_summary$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableIface.get_summary$VH.set(seg, x);
    }
    public static MemoryAddress get_summary$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.get_summary$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_summary$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableIface.get_summary$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_summary get_summary (MemorySegment segment, ResourceScope scope) {
        return get_summary.ofAddress(get_summary$get(segment), scope);
    }
    static final FunctionDescriptor set_caption$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_caption$MH = RuntimeHelper.downcallHandle(
        _AtkTableIface.set_caption$FUNC, false
    );
    public interface set_caption {

        void apply(jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1);
        static NativeSymbol allocate(set_caption fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(set_caption.class, fi, _AtkTableIface.set_caption$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static set_caption ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("set_caption::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1) -> {
                try {
                    _AtkTableIface.set_caption$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, (jdk.incubator.foreign.Addressable)_x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_caption$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_caption"));
    public static VarHandle set_caption$VH() {
        return _AtkTableIface.set_caption$VH;
    }
    public static MemoryAddress set_caption$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.set_caption$VH.get(seg);
    }
    public static void set_caption$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableIface.set_caption$VH.set(seg, x);
    }
    public static MemoryAddress set_caption$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.set_caption$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_caption$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableIface.set_caption$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_caption set_caption (MemorySegment segment, ResourceScope scope) {
        return set_caption.ofAddress(set_caption$get(segment), scope);
    }
    static final FunctionDescriptor set_column_description$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_column_description$MH = RuntimeHelper.downcallHandle(
        _AtkTableIface.set_column_description$FUNC, false
    );
    public interface set_column_description {

        void apply(jdk.incubator.foreign.MemoryAddress _x0, int _x1, jdk.incubator.foreign.MemoryAddress _x2);
        static NativeSymbol allocate(set_column_description fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(set_column_description.class, fi, _AtkTableIface.set_column_description$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static set_column_description ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("set_column_description::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, int _x1, jdk.incubator.foreign.MemoryAddress _x2) -> {
                try {
                    _AtkTableIface.set_column_description$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, _x1, (jdk.incubator.foreign.Addressable)_x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_column_description$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_column_description"));
    public static VarHandle set_column_description$VH() {
        return _AtkTableIface.set_column_description$VH;
    }
    public static MemoryAddress set_column_description$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.set_column_description$VH.get(seg);
    }
    public static void set_column_description$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableIface.set_column_description$VH.set(seg, x);
    }
    public static MemoryAddress set_column_description$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.set_column_description$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_column_description$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableIface.set_column_description$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_column_description set_column_description (MemorySegment segment, ResourceScope scope) {
        return set_column_description.ofAddress(set_column_description$get(segment), scope);
    }
    static final FunctionDescriptor set_column_header$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_column_header$MH = RuntimeHelper.downcallHandle(
        _AtkTableIface.set_column_header$FUNC, false
    );
    public interface set_column_header {

        void apply(jdk.incubator.foreign.MemoryAddress _x0, int _x1, jdk.incubator.foreign.MemoryAddress _x2);
        static NativeSymbol allocate(set_column_header fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(set_column_header.class, fi, _AtkTableIface.set_column_header$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static set_column_header ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("set_column_header::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, int _x1, jdk.incubator.foreign.MemoryAddress _x2) -> {
                try {
                    _AtkTableIface.set_column_header$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, _x1, (jdk.incubator.foreign.Addressable)_x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_column_header$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_column_header"));
    public static VarHandle set_column_header$VH() {
        return _AtkTableIface.set_column_header$VH;
    }
    public static MemoryAddress set_column_header$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.set_column_header$VH.get(seg);
    }
    public static void set_column_header$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableIface.set_column_header$VH.set(seg, x);
    }
    public static MemoryAddress set_column_header$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.set_column_header$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_column_header$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableIface.set_column_header$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_column_header set_column_header (MemorySegment segment, ResourceScope scope) {
        return set_column_header.ofAddress(set_column_header$get(segment), scope);
    }
    static final FunctionDescriptor set_row_description$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_row_description$MH = RuntimeHelper.downcallHandle(
        _AtkTableIface.set_row_description$FUNC, false
    );
    public interface set_row_description {

        void apply(jdk.incubator.foreign.MemoryAddress _x0, int _x1, jdk.incubator.foreign.MemoryAddress _x2);
        static NativeSymbol allocate(set_row_description fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(set_row_description.class, fi, _AtkTableIface.set_row_description$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static set_row_description ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("set_row_description::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, int _x1, jdk.incubator.foreign.MemoryAddress _x2) -> {
                try {
                    _AtkTableIface.set_row_description$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, _x1, (jdk.incubator.foreign.Addressable)_x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_row_description$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_row_description"));
    public static VarHandle set_row_description$VH() {
        return _AtkTableIface.set_row_description$VH;
    }
    public static MemoryAddress set_row_description$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.set_row_description$VH.get(seg);
    }
    public static void set_row_description$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableIface.set_row_description$VH.set(seg, x);
    }
    public static MemoryAddress set_row_description$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.set_row_description$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_row_description$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableIface.set_row_description$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_row_description set_row_description (MemorySegment segment, ResourceScope scope) {
        return set_row_description.ofAddress(set_row_description$get(segment), scope);
    }
    static final FunctionDescriptor set_row_header$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_row_header$MH = RuntimeHelper.downcallHandle(
        _AtkTableIface.set_row_header$FUNC, false
    );
    public interface set_row_header {

        void apply(jdk.incubator.foreign.MemoryAddress _x0, int _x1, jdk.incubator.foreign.MemoryAddress _x2);
        static NativeSymbol allocate(set_row_header fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(set_row_header.class, fi, _AtkTableIface.set_row_header$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static set_row_header ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("set_row_header::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, int _x1, jdk.incubator.foreign.MemoryAddress _x2) -> {
                try {
                    _AtkTableIface.set_row_header$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, _x1, (jdk.incubator.foreign.Addressable)_x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_row_header$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_row_header"));
    public static VarHandle set_row_header$VH() {
        return _AtkTableIface.set_row_header$VH;
    }
    public static MemoryAddress set_row_header$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.set_row_header$VH.get(seg);
    }
    public static void set_row_header$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableIface.set_row_header$VH.set(seg, x);
    }
    public static MemoryAddress set_row_header$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.set_row_header$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_row_header$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableIface.set_row_header$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_row_header set_row_header (MemorySegment segment, ResourceScope scope) {
        return set_row_header.ofAddress(set_row_header$get(segment), scope);
    }
    static final FunctionDescriptor set_summary$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_summary$MH = RuntimeHelper.downcallHandle(
        _AtkTableIface.set_summary$FUNC, false
    );
    public interface set_summary {

        void apply(jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1);
        static NativeSymbol allocate(set_summary fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(set_summary.class, fi, _AtkTableIface.set_summary$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static set_summary ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("set_summary::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1) -> {
                try {
                    _AtkTableIface.set_summary$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, (jdk.incubator.foreign.Addressable)_x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_summary$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_summary"));
    public static VarHandle set_summary$VH() {
        return _AtkTableIface.set_summary$VH;
    }
    public static MemoryAddress set_summary$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.set_summary$VH.get(seg);
    }
    public static void set_summary$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableIface.set_summary$VH.set(seg, x);
    }
    public static MemoryAddress set_summary$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.set_summary$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_summary$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableIface.set_summary$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_summary set_summary (MemorySegment segment, ResourceScope scope) {
        return set_summary.ofAddress(set_summary$get(segment), scope);
    }
    static final FunctionDescriptor get_selected_columns$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_selected_columns$MH = RuntimeHelper.downcallHandle(
        _AtkTableIface.get_selected_columns$FUNC, false
    );
    public interface get_selected_columns {

        int apply(jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1);
        static NativeSymbol allocate(get_selected_columns fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_selected_columns.class, fi, _AtkTableIface.get_selected_columns$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_selected_columns ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_selected_columns::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1) -> {
                try {
                    return (int)_AtkTableIface.get_selected_columns$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, (jdk.incubator.foreign.Addressable)_x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_selected_columns$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_selected_columns"));
    public static VarHandle get_selected_columns$VH() {
        return _AtkTableIface.get_selected_columns$VH;
    }
    public static MemoryAddress get_selected_columns$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.get_selected_columns$VH.get(seg);
    }
    public static void get_selected_columns$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableIface.get_selected_columns$VH.set(seg, x);
    }
    public static MemoryAddress get_selected_columns$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.get_selected_columns$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_selected_columns$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableIface.get_selected_columns$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_selected_columns get_selected_columns (MemorySegment segment, ResourceScope scope) {
        return get_selected_columns.ofAddress(get_selected_columns$get(segment), scope);
    }
    static final FunctionDescriptor get_selected_rows$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_selected_rows$MH = RuntimeHelper.downcallHandle(
        _AtkTableIface.get_selected_rows$FUNC, false
    );
    public interface get_selected_rows {

        int apply(jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1);
        static NativeSymbol allocate(get_selected_rows fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_selected_rows.class, fi, _AtkTableIface.get_selected_rows$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_selected_rows ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_selected_rows::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1) -> {
                try {
                    return (int)_AtkTableIface.get_selected_rows$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, (jdk.incubator.foreign.Addressable)_x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_selected_rows$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_selected_rows"));
    public static VarHandle get_selected_rows$VH() {
        return _AtkTableIface.get_selected_rows$VH;
    }
    public static MemoryAddress get_selected_rows$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.get_selected_rows$VH.get(seg);
    }
    public static void get_selected_rows$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableIface.get_selected_rows$VH.set(seg, x);
    }
    public static MemoryAddress get_selected_rows$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.get_selected_rows$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_selected_rows$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableIface.get_selected_rows$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_selected_rows get_selected_rows (MemorySegment segment, ResourceScope scope) {
        return get_selected_rows.ofAddress(get_selected_rows$get(segment), scope);
    }
    static final FunctionDescriptor is_column_selected$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle is_column_selected$MH = RuntimeHelper.downcallHandle(
        _AtkTableIface.is_column_selected$FUNC, false
    );
    public interface is_column_selected {

        int apply(jdk.incubator.foreign.MemoryAddress _x0, int _x1);
        static NativeSymbol allocate(is_column_selected fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(is_column_selected.class, fi, _AtkTableIface.is_column_selected$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static is_column_selected ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("is_column_selected::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, int _x1) -> {
                try {
                    return (int)_AtkTableIface.is_column_selected$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, _x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle is_column_selected$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("is_column_selected"));
    public static VarHandle is_column_selected$VH() {
        return _AtkTableIface.is_column_selected$VH;
    }
    public static MemoryAddress is_column_selected$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.is_column_selected$VH.get(seg);
    }
    public static void is_column_selected$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableIface.is_column_selected$VH.set(seg, x);
    }
    public static MemoryAddress is_column_selected$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.is_column_selected$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_column_selected$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableIface.is_column_selected$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static is_column_selected is_column_selected (MemorySegment segment, ResourceScope scope) {
        return is_column_selected.ofAddress(is_column_selected$get(segment), scope);
    }
    static final FunctionDescriptor is_row_selected$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle is_row_selected$MH = RuntimeHelper.downcallHandle(
        _AtkTableIface.is_row_selected$FUNC, false
    );
    public interface is_row_selected {

        int apply(jdk.incubator.foreign.MemoryAddress _x0, int _x1);
        static NativeSymbol allocate(is_row_selected fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(is_row_selected.class, fi, _AtkTableIface.is_row_selected$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static is_row_selected ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("is_row_selected::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, int _x1) -> {
                try {
                    return (int)_AtkTableIface.is_row_selected$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, _x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle is_row_selected$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("is_row_selected"));
    public static VarHandle is_row_selected$VH() {
        return _AtkTableIface.is_row_selected$VH;
    }
    public static MemoryAddress is_row_selected$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.is_row_selected$VH.get(seg);
    }
    public static void is_row_selected$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableIface.is_row_selected$VH.set(seg, x);
    }
    public static MemoryAddress is_row_selected$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.is_row_selected$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_row_selected$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableIface.is_row_selected$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static is_row_selected is_row_selected (MemorySegment segment, ResourceScope scope) {
        return is_row_selected.ofAddress(is_row_selected$get(segment), scope);
    }
    static final FunctionDescriptor is_selected$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle is_selected$MH = RuntimeHelper.downcallHandle(
        _AtkTableIface.is_selected$FUNC, false
    );
    public interface is_selected {

        int apply(jdk.incubator.foreign.MemoryAddress _x0, int _x1, int _x2);
        static NativeSymbol allocate(is_selected fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(is_selected.class, fi, _AtkTableIface.is_selected$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;II)I", scope);
        }
        static is_selected ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("is_selected::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, int _x1, int _x2) -> {
                try {
                    return (int)_AtkTableIface.is_selected$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, _x1, _x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle is_selected$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("is_selected"));
    public static VarHandle is_selected$VH() {
        return _AtkTableIface.is_selected$VH;
    }
    public static MemoryAddress is_selected$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.is_selected$VH.get(seg);
    }
    public static void is_selected$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableIface.is_selected$VH.set(seg, x);
    }
    public static MemoryAddress is_selected$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.is_selected$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_selected$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableIface.is_selected$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static is_selected is_selected (MemorySegment segment, ResourceScope scope) {
        return is_selected.ofAddress(is_selected$get(segment), scope);
    }
    static final FunctionDescriptor add_row_selection$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle add_row_selection$MH = RuntimeHelper.downcallHandle(
        _AtkTableIface.add_row_selection$FUNC, false
    );
    public interface add_row_selection {

        int apply(jdk.incubator.foreign.MemoryAddress _x0, int _x1);
        static NativeSymbol allocate(add_row_selection fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(add_row_selection.class, fi, _AtkTableIface.add_row_selection$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static add_row_selection ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("add_row_selection::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, int _x1) -> {
                try {
                    return (int)_AtkTableIface.add_row_selection$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, _x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle add_row_selection$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("add_row_selection"));
    public static VarHandle add_row_selection$VH() {
        return _AtkTableIface.add_row_selection$VH;
    }
    public static MemoryAddress add_row_selection$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.add_row_selection$VH.get(seg);
    }
    public static void add_row_selection$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableIface.add_row_selection$VH.set(seg, x);
    }
    public static MemoryAddress add_row_selection$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.add_row_selection$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void add_row_selection$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableIface.add_row_selection$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static add_row_selection add_row_selection (MemorySegment segment, ResourceScope scope) {
        return add_row_selection.ofAddress(add_row_selection$get(segment), scope);
    }
    static final FunctionDescriptor remove_row_selection$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle remove_row_selection$MH = RuntimeHelper.downcallHandle(
        _AtkTableIface.remove_row_selection$FUNC, false
    );
    public interface remove_row_selection {

        int apply(jdk.incubator.foreign.MemoryAddress _x0, int _x1);
        static NativeSymbol allocate(remove_row_selection fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(remove_row_selection.class, fi, _AtkTableIface.remove_row_selection$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static remove_row_selection ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("remove_row_selection::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, int _x1) -> {
                try {
                    return (int)_AtkTableIface.remove_row_selection$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, _x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle remove_row_selection$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("remove_row_selection"));
    public static VarHandle remove_row_selection$VH() {
        return _AtkTableIface.remove_row_selection$VH;
    }
    public static MemoryAddress remove_row_selection$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.remove_row_selection$VH.get(seg);
    }
    public static void remove_row_selection$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableIface.remove_row_selection$VH.set(seg, x);
    }
    public static MemoryAddress remove_row_selection$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.remove_row_selection$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void remove_row_selection$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableIface.remove_row_selection$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static remove_row_selection remove_row_selection (MemorySegment segment, ResourceScope scope) {
        return remove_row_selection.ofAddress(remove_row_selection$get(segment), scope);
    }
    static final FunctionDescriptor add_column_selection$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle add_column_selection$MH = RuntimeHelper.downcallHandle(
        _AtkTableIface.add_column_selection$FUNC, false
    );
    public interface add_column_selection {

        int apply(jdk.incubator.foreign.MemoryAddress _x0, int _x1);
        static NativeSymbol allocate(add_column_selection fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(add_column_selection.class, fi, _AtkTableIface.add_column_selection$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static add_column_selection ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("add_column_selection::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, int _x1) -> {
                try {
                    return (int)_AtkTableIface.add_column_selection$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, _x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle add_column_selection$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("add_column_selection"));
    public static VarHandle add_column_selection$VH() {
        return _AtkTableIface.add_column_selection$VH;
    }
    public static MemoryAddress add_column_selection$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.add_column_selection$VH.get(seg);
    }
    public static void add_column_selection$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableIface.add_column_selection$VH.set(seg, x);
    }
    public static MemoryAddress add_column_selection$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.add_column_selection$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void add_column_selection$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableIface.add_column_selection$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static add_column_selection add_column_selection (MemorySegment segment, ResourceScope scope) {
        return add_column_selection.ofAddress(add_column_selection$get(segment), scope);
    }
    static final FunctionDescriptor remove_column_selection$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle remove_column_selection$MH = RuntimeHelper.downcallHandle(
        _AtkTableIface.remove_column_selection$FUNC, false
    );
    public interface remove_column_selection {

        int apply(jdk.incubator.foreign.MemoryAddress _x0, int _x1);
        static NativeSymbol allocate(remove_column_selection fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(remove_column_selection.class, fi, _AtkTableIface.remove_column_selection$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static remove_column_selection ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("remove_column_selection::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, int _x1) -> {
                try {
                    return (int)_AtkTableIface.remove_column_selection$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, _x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle remove_column_selection$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("remove_column_selection"));
    public static VarHandle remove_column_selection$VH() {
        return _AtkTableIface.remove_column_selection$VH;
    }
    public static MemoryAddress remove_column_selection$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.remove_column_selection$VH.get(seg);
    }
    public static void remove_column_selection$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableIface.remove_column_selection$VH.set(seg, x);
    }
    public static MemoryAddress remove_column_selection$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.remove_column_selection$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void remove_column_selection$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableIface.remove_column_selection$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static remove_column_selection remove_column_selection (MemorySegment segment, ResourceScope scope) {
        return remove_column_selection.ofAddress(remove_column_selection$get(segment), scope);
    }
    static final FunctionDescriptor row_inserted$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle row_inserted$MH = RuntimeHelper.downcallHandle(
        _AtkTableIface.row_inserted$FUNC, false
    );
    public interface row_inserted {

        void apply(jdk.incubator.foreign.MemoryAddress _x0, int _x1, int _x2);
        static NativeSymbol allocate(row_inserted fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(row_inserted.class, fi, _AtkTableIface.row_inserted$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;II)V", scope);
        }
        static row_inserted ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("row_inserted::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, int _x1, int _x2) -> {
                try {
                    _AtkTableIface.row_inserted$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, _x1, _x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle row_inserted$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("row_inserted"));
    public static VarHandle row_inserted$VH() {
        return _AtkTableIface.row_inserted$VH;
    }
    public static MemoryAddress row_inserted$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.row_inserted$VH.get(seg);
    }
    public static void row_inserted$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableIface.row_inserted$VH.set(seg, x);
    }
    public static MemoryAddress row_inserted$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.row_inserted$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void row_inserted$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableIface.row_inserted$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static row_inserted row_inserted (MemorySegment segment, ResourceScope scope) {
        return row_inserted.ofAddress(row_inserted$get(segment), scope);
    }
    static final FunctionDescriptor column_inserted$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle column_inserted$MH = RuntimeHelper.downcallHandle(
        _AtkTableIface.column_inserted$FUNC, false
    );
    public interface column_inserted {

        void apply(jdk.incubator.foreign.MemoryAddress _x0, int _x1, int _x2);
        static NativeSymbol allocate(column_inserted fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(column_inserted.class, fi, _AtkTableIface.column_inserted$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;II)V", scope);
        }
        static column_inserted ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("column_inserted::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, int _x1, int _x2) -> {
                try {
                    _AtkTableIface.column_inserted$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, _x1, _x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle column_inserted$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("column_inserted"));
    public static VarHandle column_inserted$VH() {
        return _AtkTableIface.column_inserted$VH;
    }
    public static MemoryAddress column_inserted$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.column_inserted$VH.get(seg);
    }
    public static void column_inserted$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableIface.column_inserted$VH.set(seg, x);
    }
    public static MemoryAddress column_inserted$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.column_inserted$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void column_inserted$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableIface.column_inserted$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static column_inserted column_inserted (MemorySegment segment, ResourceScope scope) {
        return column_inserted.ofAddress(column_inserted$get(segment), scope);
    }
    static final FunctionDescriptor row_deleted$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle row_deleted$MH = RuntimeHelper.downcallHandle(
        _AtkTableIface.row_deleted$FUNC, false
    );
    public interface row_deleted {

        void apply(jdk.incubator.foreign.MemoryAddress _x0, int _x1, int _x2);
        static NativeSymbol allocate(row_deleted fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(row_deleted.class, fi, _AtkTableIface.row_deleted$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;II)V", scope);
        }
        static row_deleted ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("row_deleted::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, int _x1, int _x2) -> {
                try {
                    _AtkTableIface.row_deleted$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, _x1, _x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle row_deleted$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("row_deleted"));
    public static VarHandle row_deleted$VH() {
        return _AtkTableIface.row_deleted$VH;
    }
    public static MemoryAddress row_deleted$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.row_deleted$VH.get(seg);
    }
    public static void row_deleted$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableIface.row_deleted$VH.set(seg, x);
    }
    public static MemoryAddress row_deleted$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.row_deleted$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void row_deleted$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableIface.row_deleted$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static row_deleted row_deleted (MemorySegment segment, ResourceScope scope) {
        return row_deleted.ofAddress(row_deleted$get(segment), scope);
    }
    static final FunctionDescriptor column_deleted$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle column_deleted$MH = RuntimeHelper.downcallHandle(
        _AtkTableIface.column_deleted$FUNC, false
    );
    public interface column_deleted {

        void apply(jdk.incubator.foreign.MemoryAddress _x0, int _x1, int _x2);
        static NativeSymbol allocate(column_deleted fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(column_deleted.class, fi, _AtkTableIface.column_deleted$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;II)V", scope);
        }
        static column_deleted ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("column_deleted::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, int _x1, int _x2) -> {
                try {
                    _AtkTableIface.column_deleted$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, _x1, _x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle column_deleted$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("column_deleted"));
    public static VarHandle column_deleted$VH() {
        return _AtkTableIface.column_deleted$VH;
    }
    public static MemoryAddress column_deleted$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.column_deleted$VH.get(seg);
    }
    public static void column_deleted$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableIface.column_deleted$VH.set(seg, x);
    }
    public static MemoryAddress column_deleted$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.column_deleted$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void column_deleted$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableIface.column_deleted$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static column_deleted column_deleted (MemorySegment segment, ResourceScope scope) {
        return column_deleted.ofAddress(column_deleted$get(segment), scope);
    }
    static final FunctionDescriptor row_reordered$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle row_reordered$MH = RuntimeHelper.downcallHandle(
        _AtkTableIface.row_reordered$FUNC, false
    );
    public interface row_reordered {

        void apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(row_reordered fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(row_reordered.class, fi, _AtkTableIface.row_reordered$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static row_reordered ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("row_reordered::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    _AtkTableIface.row_reordered$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle row_reordered$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("row_reordered"));
    public static VarHandle row_reordered$VH() {
        return _AtkTableIface.row_reordered$VH;
    }
    public static MemoryAddress row_reordered$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.row_reordered$VH.get(seg);
    }
    public static void row_reordered$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableIface.row_reordered$VH.set(seg, x);
    }
    public static MemoryAddress row_reordered$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.row_reordered$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void row_reordered$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableIface.row_reordered$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static row_reordered row_reordered (MemorySegment segment, ResourceScope scope) {
        return row_reordered.ofAddress(row_reordered$get(segment), scope);
    }
    static final FunctionDescriptor column_reordered$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle column_reordered$MH = RuntimeHelper.downcallHandle(
        _AtkTableIface.column_reordered$FUNC, false
    );
    public interface column_reordered {

        void apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(column_reordered fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(column_reordered.class, fi, _AtkTableIface.column_reordered$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static column_reordered ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("column_reordered::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    _AtkTableIface.column_reordered$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle column_reordered$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("column_reordered"));
    public static VarHandle column_reordered$VH() {
        return _AtkTableIface.column_reordered$VH;
    }
    public static MemoryAddress column_reordered$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.column_reordered$VH.get(seg);
    }
    public static void column_reordered$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableIface.column_reordered$VH.set(seg, x);
    }
    public static MemoryAddress column_reordered$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.column_reordered$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void column_reordered$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableIface.column_reordered$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static column_reordered column_reordered (MemorySegment segment, ResourceScope scope) {
        return column_reordered.ofAddress(column_reordered$get(segment), scope);
    }
    static final FunctionDescriptor model_changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle model_changed$MH = RuntimeHelper.downcallHandle(
        _AtkTableIface.model_changed$FUNC, false
    );
    public interface model_changed {

        void apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(model_changed fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(model_changed.class, fi, _AtkTableIface.model_changed$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static model_changed ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("model_changed::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    _AtkTableIface.model_changed$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle model_changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("model_changed"));
    public static VarHandle model_changed$VH() {
        return _AtkTableIface.model_changed$VH;
    }
    public static MemoryAddress model_changed$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.model_changed$VH.get(seg);
    }
    public static void model_changed$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableIface.model_changed$VH.set(seg, x);
    }
    public static MemoryAddress model_changed$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableIface.model_changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void model_changed$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableIface.model_changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static model_changed model_changed (MemorySegment segment, ResourceScope scope) {
        return model_changed.ofAddress(model_changed$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


