// Generated by jextract

package gtk3;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public interface GClosureMarshal {

    void apply(jdk.incubator.foreign.MemoryAddress closure, jdk.incubator.foreign.MemoryAddress return_value, int n_param_values, jdk.incubator.foreign.MemoryAddress param_values, jdk.incubator.foreign.MemoryAddress invocation_hint, jdk.incubator.foreign.MemoryAddress marshal_data);
    static NativeSymbol allocate(GClosureMarshal fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(GClosureMarshal.class, fi, constants$438.GClosureMarshal$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
    }
    static GClosureMarshal ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("GClosureMarshal::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress closure, jdk.incubator.foreign.MemoryAddress return_value, int n_param_values, jdk.incubator.foreign.MemoryAddress param_values, jdk.incubator.foreign.MemoryAddress invocation_hint, jdk.incubator.foreign.MemoryAddress marshal_data) -> {
            try {
                constants$439.GClosureMarshal$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)closure, (jdk.incubator.foreign.Addressable)return_value, n_param_values, (jdk.incubator.foreign.Addressable)param_values, (jdk.incubator.foreign.Addressable)invocation_hint, (jdk.incubator.foreign.Addressable)marshal_data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


