// Generated by jextract

package gtk3;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _AtkObjectFactoryClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("create_accessible"),
        Constants$root.C_POINTER$LAYOUT.withName("invalidate"),
        Constants$root.C_POINTER$LAYOUT.withName("get_accessible_type"),
        Constants$root.C_POINTER$LAYOUT.withName("pad1"),
        Constants$root.C_POINTER$LAYOUT.withName("pad2")
    ).withName("_AtkObjectFactoryClass");
    public static MemoryLayout $LAYOUT() {
        return _AtkObjectFactoryClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor create_accessible$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle create_accessible$MH = RuntimeHelper.downcallHandle(
        _AtkObjectFactoryClass.create_accessible$FUNC, false
    );
    public interface create_accessible {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(create_accessible fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(create_accessible.class, fi, _AtkObjectFactoryClass.create_accessible$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static create_accessible ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("create_accessible::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_AtkObjectFactoryClass.create_accessible$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle create_accessible$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("create_accessible"));
    public static VarHandle create_accessible$VH() {
        return _AtkObjectFactoryClass.create_accessible$VH;
    }
    public static MemoryAddress create_accessible$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkObjectFactoryClass.create_accessible$VH.get(seg);
    }
    public static void create_accessible$set( MemorySegment seg, MemoryAddress x) {
        _AtkObjectFactoryClass.create_accessible$VH.set(seg, x);
    }
    public static MemoryAddress create_accessible$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkObjectFactoryClass.create_accessible$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void create_accessible$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkObjectFactoryClass.create_accessible$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static create_accessible create_accessible (MemorySegment segment, ResourceScope scope) {
        return create_accessible.ofAddress(create_accessible$get(segment), scope);
    }
    static final FunctionDescriptor invalidate$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle invalidate$MH = RuntimeHelper.downcallHandle(
        _AtkObjectFactoryClass.invalidate$FUNC, false
    );
    public interface invalidate {

        void apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(invalidate fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(invalidate.class, fi, _AtkObjectFactoryClass.invalidate$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static invalidate ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("invalidate::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    _AtkObjectFactoryClass.invalidate$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle invalidate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("invalidate"));
    public static VarHandle invalidate$VH() {
        return _AtkObjectFactoryClass.invalidate$VH;
    }
    public static MemoryAddress invalidate$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkObjectFactoryClass.invalidate$VH.get(seg);
    }
    public static void invalidate$set( MemorySegment seg, MemoryAddress x) {
        _AtkObjectFactoryClass.invalidate$VH.set(seg, x);
    }
    public static MemoryAddress invalidate$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkObjectFactoryClass.invalidate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void invalidate$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkObjectFactoryClass.invalidate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static invalidate invalidate (MemorySegment segment, ResourceScope scope) {
        return invalidate.ofAddress(invalidate$get(segment), scope);
    }
    static final FunctionDescriptor get_accessible_type$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT);
    static final MethodHandle get_accessible_type$MH = RuntimeHelper.downcallHandle(
        _AtkObjectFactoryClass.get_accessible_type$FUNC, false
    );
    public interface get_accessible_type {

        long apply();
        static NativeSymbol allocate(get_accessible_type fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_accessible_type.class, fi, _AtkObjectFactoryClass.get_accessible_type$FUNC, "()J", scope);
        }
        static get_accessible_type ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_accessible_type::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return () -> {
                try {
                    return (long)_AtkObjectFactoryClass.get_accessible_type$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_accessible_type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_accessible_type"));
    public static VarHandle get_accessible_type$VH() {
        return _AtkObjectFactoryClass.get_accessible_type$VH;
    }
    public static MemoryAddress get_accessible_type$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkObjectFactoryClass.get_accessible_type$VH.get(seg);
    }
    public static void get_accessible_type$set( MemorySegment seg, MemoryAddress x) {
        _AtkObjectFactoryClass.get_accessible_type$VH.set(seg, x);
    }
    public static MemoryAddress get_accessible_type$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkObjectFactoryClass.get_accessible_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_accessible_type$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkObjectFactoryClass.get_accessible_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_accessible_type get_accessible_type (MemorySegment segment, ResourceScope scope) {
        return get_accessible_type.ofAddress(get_accessible_type$get(segment), scope);
    }
    static final VarHandle pad1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pad1"));
    public static VarHandle pad1$VH() {
        return _AtkObjectFactoryClass.pad1$VH;
    }
    public static MemoryAddress pad1$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkObjectFactoryClass.pad1$VH.get(seg);
    }
    public static void pad1$set( MemorySegment seg, MemoryAddress x) {
        _AtkObjectFactoryClass.pad1$VH.set(seg, x);
    }
    public static MemoryAddress pad1$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkObjectFactoryClass.pad1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pad1$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkObjectFactoryClass.pad1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AtkFunction pad1 (MemorySegment segment, ResourceScope scope) {
        return AtkFunction.ofAddress(pad1$get(segment), scope);
    }
    static final VarHandle pad2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pad2"));
    public static VarHandle pad2$VH() {
        return _AtkObjectFactoryClass.pad2$VH;
    }
    public static MemoryAddress pad2$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkObjectFactoryClass.pad2$VH.get(seg);
    }
    public static void pad2$set( MemorySegment seg, MemoryAddress x) {
        _AtkObjectFactoryClass.pad2$VH.set(seg, x);
    }
    public static MemoryAddress pad2$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkObjectFactoryClass.pad2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pad2$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkObjectFactoryClass.pad2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AtkFunction pad2 (MemorySegment segment, ResourceScope scope) {
        return AtkFunction.ofAddress(pad2$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


