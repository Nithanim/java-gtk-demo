// Generated by jextract

package gtk3;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _GtkRecentManagerClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("changed"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_recent1"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_recent2"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_recent3"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_recent4")
    ).withName("_GtkRecentManagerClass");
    public static MemoryLayout $LAYOUT() {
        return _GtkRecentManagerClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle changed$MH = RuntimeHelper.downcallHandle(
        _GtkRecentManagerClass.changed$FUNC, false
    );
    public interface changed {

        void apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(changed fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(changed.class, fi, _GtkRecentManagerClass.changed$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static changed ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("changed::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    _GtkRecentManagerClass.changed$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("changed"));
    public static VarHandle changed$VH() {
        return _GtkRecentManagerClass.changed$VH;
    }
    public static MemoryAddress changed$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkRecentManagerClass.changed$VH.get(seg);
    }
    public static void changed$set( MemorySegment seg, MemoryAddress x) {
        _GtkRecentManagerClass.changed$VH.set(seg, x);
    }
    public static MemoryAddress changed$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkRecentManagerClass.changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void changed$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkRecentManagerClass.changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static changed changed (MemorySegment segment, ResourceScope scope) {
        return changed.ofAddress(changed$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_recent1$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_recent1$MH = RuntimeHelper.downcallHandle(
        _GtkRecentManagerClass._gtk_recent1$FUNC, false
    );
    public interface _gtk_recent1 {

        void apply();
        static NativeSymbol allocate(_gtk_recent1 fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(_gtk_recent1.class, fi, _GtkRecentManagerClass._gtk_recent1$FUNC, "()V", scope);
        }
        static _gtk_recent1 ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("_gtk_recent1::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return () -> {
                try {
                    _GtkRecentManagerClass._gtk_recent1$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_recent1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_recent1"));
    public static VarHandle _gtk_recent1$VH() {
        return _GtkRecentManagerClass._gtk_recent1$VH;
    }
    public static MemoryAddress _gtk_recent1$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkRecentManagerClass._gtk_recent1$VH.get(seg);
    }
    public static void _gtk_recent1$set( MemorySegment seg, MemoryAddress x) {
        _GtkRecentManagerClass._gtk_recent1$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_recent1$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkRecentManagerClass._gtk_recent1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_recent1$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkRecentManagerClass._gtk_recent1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_recent1 _gtk_recent1 (MemorySegment segment, ResourceScope scope) {
        return _gtk_recent1.ofAddress(_gtk_recent1$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_recent2$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_recent2$MH = RuntimeHelper.downcallHandle(
        _GtkRecentManagerClass._gtk_recent2$FUNC, false
    );
    public interface _gtk_recent2 {

        void apply();
        static NativeSymbol allocate(_gtk_recent2 fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(_gtk_recent2.class, fi, _GtkRecentManagerClass._gtk_recent2$FUNC, "()V", scope);
        }
        static _gtk_recent2 ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("_gtk_recent2::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return () -> {
                try {
                    _GtkRecentManagerClass._gtk_recent2$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_recent2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_recent2"));
    public static VarHandle _gtk_recent2$VH() {
        return _GtkRecentManagerClass._gtk_recent2$VH;
    }
    public static MemoryAddress _gtk_recent2$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkRecentManagerClass._gtk_recent2$VH.get(seg);
    }
    public static void _gtk_recent2$set( MemorySegment seg, MemoryAddress x) {
        _GtkRecentManagerClass._gtk_recent2$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_recent2$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkRecentManagerClass._gtk_recent2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_recent2$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkRecentManagerClass._gtk_recent2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_recent2 _gtk_recent2 (MemorySegment segment, ResourceScope scope) {
        return _gtk_recent2.ofAddress(_gtk_recent2$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_recent3$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_recent3$MH = RuntimeHelper.downcallHandle(
        _GtkRecentManagerClass._gtk_recent3$FUNC, false
    );
    public interface _gtk_recent3 {

        void apply();
        static NativeSymbol allocate(_gtk_recent3 fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(_gtk_recent3.class, fi, _GtkRecentManagerClass._gtk_recent3$FUNC, "()V", scope);
        }
        static _gtk_recent3 ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("_gtk_recent3::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return () -> {
                try {
                    _GtkRecentManagerClass._gtk_recent3$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_recent3$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_recent3"));
    public static VarHandle _gtk_recent3$VH() {
        return _GtkRecentManagerClass._gtk_recent3$VH;
    }
    public static MemoryAddress _gtk_recent3$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkRecentManagerClass._gtk_recent3$VH.get(seg);
    }
    public static void _gtk_recent3$set( MemorySegment seg, MemoryAddress x) {
        _GtkRecentManagerClass._gtk_recent3$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_recent3$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkRecentManagerClass._gtk_recent3$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_recent3$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkRecentManagerClass._gtk_recent3$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_recent3 _gtk_recent3 (MemorySegment segment, ResourceScope scope) {
        return _gtk_recent3.ofAddress(_gtk_recent3$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_recent4$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_recent4$MH = RuntimeHelper.downcallHandle(
        _GtkRecentManagerClass._gtk_recent4$FUNC, false
    );
    public interface _gtk_recent4 {

        void apply();
        static NativeSymbol allocate(_gtk_recent4 fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(_gtk_recent4.class, fi, _GtkRecentManagerClass._gtk_recent4$FUNC, "()V", scope);
        }
        static _gtk_recent4 ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("_gtk_recent4::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return () -> {
                try {
                    _GtkRecentManagerClass._gtk_recent4$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_recent4$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_recent4"));
    public static VarHandle _gtk_recent4$VH() {
        return _GtkRecentManagerClass._gtk_recent4$VH;
    }
    public static MemoryAddress _gtk_recent4$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkRecentManagerClass._gtk_recent4$VH.get(seg);
    }
    public static void _gtk_recent4$set( MemorySegment seg, MemoryAddress x) {
        _GtkRecentManagerClass._gtk_recent4$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_recent4$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkRecentManagerClass._gtk_recent4$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_recent4$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkRecentManagerClass._gtk_recent4$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_recent4 _gtk_recent4 (MemorySegment segment, ResourceScope scope) {
        return _gtk_recent4.ofAddress(_gtk_recent4$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


