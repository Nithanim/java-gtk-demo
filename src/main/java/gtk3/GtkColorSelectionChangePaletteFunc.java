// Generated by jextract

package gtk3;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public interface GtkColorSelectionChangePaletteFunc {

    void apply(jdk.incubator.foreign.MemoryAddress colors, int n_colors);
    static NativeSymbol allocate(GtkColorSelectionChangePaletteFunc fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(GtkColorSelectionChangePaletteFunc.class, fi, constants$2084.GtkColorSelectionChangePaletteFunc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)V", scope);
    }
    static GtkColorSelectionChangePaletteFunc ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("GtkColorSelectionChangePaletteFunc::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress colors, int n_colors) -> {
            try {
                constants$2084.GtkColorSelectionChangePaletteFunc$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)colors, n_colors);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


