// Generated by jextract

package gtk3;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public interface hb_font_get_glyph_advances_func_t {

    void apply(jdk.incubator.foreign.MemoryAddress font, jdk.incubator.foreign.MemoryAddress font_data, int count, jdk.incubator.foreign.MemoryAddress first_glyph, int glyph_stride, jdk.incubator.foreign.MemoryAddress first_advance, int advance_stride, jdk.incubator.foreign.MemoryAddress user_data);
    static NativeSymbol allocate(hb_font_get_glyph_advances_func_t fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(hb_font_get_glyph_advances_func_t.class, fi, constants$995.hb_font_get_glyph_advances_func_t$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)V", scope);
    }
    static hb_font_get_glyph_advances_func_t ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("hb_font_get_glyph_advances_func_t::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress font, jdk.incubator.foreign.MemoryAddress font_data, int count, jdk.incubator.foreign.MemoryAddress first_glyph, int glyph_stride, jdk.incubator.foreign.MemoryAddress first_advance, int advance_stride, jdk.incubator.foreign.MemoryAddress user_data) -> {
            try {
                constants$995.hb_font_get_glyph_advances_func_t$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)font, (jdk.incubator.foreign.Addressable)font_data, count, (jdk.incubator.foreign.Addressable)first_glyph, glyph_stride, (jdk.incubator.foreign.Addressable)first_advance, advance_stride, (jdk.incubator.foreign.Addressable)user_data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


