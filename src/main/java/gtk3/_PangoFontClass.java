// Generated by jextract

package gtk3;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _PangoFontClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("describe"),
        Constants$root.C_POINTER$LAYOUT.withName("get_coverage"),
        Constants$root.C_POINTER$LAYOUT.withName("get_glyph_extents"),
        Constants$root.C_POINTER$LAYOUT.withName("get_metrics"),
        Constants$root.C_POINTER$LAYOUT.withName("get_font_map"),
        Constants$root.C_POINTER$LAYOUT.withName("describe_absolute"),
        Constants$root.C_POINTER$LAYOUT.withName("get_features"),
        Constants$root.C_POINTER$LAYOUT.withName("create_hb_font")
    ).withName("_PangoFontClass");
    public static MemoryLayout $LAYOUT() {
        return _PangoFontClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor describe$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle describe$MH = RuntimeHelper.downcallHandle(
        _PangoFontClass.describe$FUNC, false
    );
    public interface describe {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(describe fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(describe.class, fi, _PangoFontClass.describe$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static describe ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("describe::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_PangoFontClass.describe$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle describe$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("describe"));
    public static VarHandle describe$VH() {
        return _PangoFontClass.describe$VH;
    }
    public static MemoryAddress describe$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontClass.describe$VH.get(seg);
    }
    public static void describe$set( MemorySegment seg, MemoryAddress x) {
        _PangoFontClass.describe$VH.set(seg, x);
    }
    public static MemoryAddress describe$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontClass.describe$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void describe$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoFontClass.describe$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static describe describe (MemorySegment segment, ResourceScope scope) {
        return describe.ofAddress(describe$get(segment), scope);
    }
    static final FunctionDescriptor get_coverage$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_coverage$MH = RuntimeHelper.downcallHandle(
        _PangoFontClass.get_coverage$FUNC, false
    );
    public interface get_coverage {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1);
        static NativeSymbol allocate(get_coverage fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_coverage.class, fi, _PangoFontClass.get_coverage$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_coverage ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_coverage::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_PangoFontClass.get_coverage$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, (jdk.incubator.foreign.Addressable)_x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_coverage$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_coverage"));
    public static VarHandle get_coverage$VH() {
        return _PangoFontClass.get_coverage$VH;
    }
    public static MemoryAddress get_coverage$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontClass.get_coverage$VH.get(seg);
    }
    public static void get_coverage$set( MemorySegment seg, MemoryAddress x) {
        _PangoFontClass.get_coverage$VH.set(seg, x);
    }
    public static MemoryAddress get_coverage$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontClass.get_coverage$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_coverage$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoFontClass.get_coverage$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_coverage get_coverage (MemorySegment segment, ResourceScope scope) {
        return get_coverage.ofAddress(get_coverage$get(segment), scope);
    }
    static final FunctionDescriptor get_glyph_extents$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_glyph_extents$MH = RuntimeHelper.downcallHandle(
        _PangoFontClass.get_glyph_extents$FUNC, false
    );
    public interface get_glyph_extents {

        void apply(jdk.incubator.foreign.MemoryAddress _x0, int _x1, jdk.incubator.foreign.MemoryAddress _x2, jdk.incubator.foreign.MemoryAddress _x3);
        static NativeSymbol allocate(get_glyph_extents fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_glyph_extents.class, fi, _PangoFontClass.get_glyph_extents$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static get_glyph_extents ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_glyph_extents::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, int _x1, jdk.incubator.foreign.MemoryAddress _x2, jdk.incubator.foreign.MemoryAddress _x3) -> {
                try {
                    _PangoFontClass.get_glyph_extents$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, _x1, (jdk.incubator.foreign.Addressable)_x2, (jdk.incubator.foreign.Addressable)_x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_glyph_extents$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_glyph_extents"));
    public static VarHandle get_glyph_extents$VH() {
        return _PangoFontClass.get_glyph_extents$VH;
    }
    public static MemoryAddress get_glyph_extents$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontClass.get_glyph_extents$VH.get(seg);
    }
    public static void get_glyph_extents$set( MemorySegment seg, MemoryAddress x) {
        _PangoFontClass.get_glyph_extents$VH.set(seg, x);
    }
    public static MemoryAddress get_glyph_extents$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontClass.get_glyph_extents$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_glyph_extents$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoFontClass.get_glyph_extents$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_glyph_extents get_glyph_extents (MemorySegment segment, ResourceScope scope) {
        return get_glyph_extents.ofAddress(get_glyph_extents$get(segment), scope);
    }
    static final FunctionDescriptor get_metrics$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_metrics$MH = RuntimeHelper.downcallHandle(
        _PangoFontClass.get_metrics$FUNC, false
    );
    public interface get_metrics {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1);
        static NativeSymbol allocate(get_metrics fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_metrics.class, fi, _PangoFontClass.get_metrics$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_metrics ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_metrics::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_PangoFontClass.get_metrics$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, (jdk.incubator.foreign.Addressable)_x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_metrics$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_metrics"));
    public static VarHandle get_metrics$VH() {
        return _PangoFontClass.get_metrics$VH;
    }
    public static MemoryAddress get_metrics$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontClass.get_metrics$VH.get(seg);
    }
    public static void get_metrics$set( MemorySegment seg, MemoryAddress x) {
        _PangoFontClass.get_metrics$VH.set(seg, x);
    }
    public static MemoryAddress get_metrics$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontClass.get_metrics$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_metrics$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoFontClass.get_metrics$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_metrics get_metrics (MemorySegment segment, ResourceScope scope) {
        return get_metrics.ofAddress(get_metrics$get(segment), scope);
    }
    static final FunctionDescriptor get_font_map$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_font_map$MH = RuntimeHelper.downcallHandle(
        _PangoFontClass.get_font_map$FUNC, false
    );
    public interface get_font_map {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(get_font_map fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_font_map.class, fi, _PangoFontClass.get_font_map$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_font_map ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_font_map::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_PangoFontClass.get_font_map$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_font_map$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_font_map"));
    public static VarHandle get_font_map$VH() {
        return _PangoFontClass.get_font_map$VH;
    }
    public static MemoryAddress get_font_map$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontClass.get_font_map$VH.get(seg);
    }
    public static void get_font_map$set( MemorySegment seg, MemoryAddress x) {
        _PangoFontClass.get_font_map$VH.set(seg, x);
    }
    public static MemoryAddress get_font_map$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontClass.get_font_map$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_font_map$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoFontClass.get_font_map$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_font_map get_font_map (MemorySegment segment, ResourceScope scope) {
        return get_font_map.ofAddress(get_font_map$get(segment), scope);
    }
    static final FunctionDescriptor describe_absolute$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle describe_absolute$MH = RuntimeHelper.downcallHandle(
        _PangoFontClass.describe_absolute$FUNC, false
    );
    public interface describe_absolute {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(describe_absolute fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(describe_absolute.class, fi, _PangoFontClass.describe_absolute$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static describe_absolute ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("describe_absolute::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_PangoFontClass.describe_absolute$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle describe_absolute$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("describe_absolute"));
    public static VarHandle describe_absolute$VH() {
        return _PangoFontClass.describe_absolute$VH;
    }
    public static MemoryAddress describe_absolute$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontClass.describe_absolute$VH.get(seg);
    }
    public static void describe_absolute$set( MemorySegment seg, MemoryAddress x) {
        _PangoFontClass.describe_absolute$VH.set(seg, x);
    }
    public static MemoryAddress describe_absolute$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontClass.describe_absolute$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void describe_absolute$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoFontClass.describe_absolute$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static describe_absolute describe_absolute (MemorySegment segment, ResourceScope scope) {
        return describe_absolute.ofAddress(describe_absolute$get(segment), scope);
    }
    static final FunctionDescriptor get_features$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_features$MH = RuntimeHelper.downcallHandle(
        _PangoFontClass.get_features$FUNC, false
    );
    public interface get_features {

        void apply(jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1, int _x2, jdk.incubator.foreign.MemoryAddress _x3);
        static NativeSymbol allocate(get_features fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_features.class, fi, _PangoFontClass.get_features$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static get_features ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_features::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1, int _x2, jdk.incubator.foreign.MemoryAddress _x3) -> {
                try {
                    _PangoFontClass.get_features$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, (jdk.incubator.foreign.Addressable)_x1, _x2, (jdk.incubator.foreign.Addressable)_x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_features$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_features"));
    public static VarHandle get_features$VH() {
        return _PangoFontClass.get_features$VH;
    }
    public static MemoryAddress get_features$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontClass.get_features$VH.get(seg);
    }
    public static void get_features$set( MemorySegment seg, MemoryAddress x) {
        _PangoFontClass.get_features$VH.set(seg, x);
    }
    public static MemoryAddress get_features$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontClass.get_features$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_features$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoFontClass.get_features$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_features get_features (MemorySegment segment, ResourceScope scope) {
        return get_features.ofAddress(get_features$get(segment), scope);
    }
    static final FunctionDescriptor create_hb_font$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle create_hb_font$MH = RuntimeHelper.downcallHandle(
        _PangoFontClass.create_hb_font$FUNC, false
    );
    public interface create_hb_font {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(create_hb_font fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(create_hb_font.class, fi, _PangoFontClass.create_hb_font$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static create_hb_font ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("create_hb_font::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_PangoFontClass.create_hb_font$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle create_hb_font$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("create_hb_font"));
    public static VarHandle create_hb_font$VH() {
        return _PangoFontClass.create_hb_font$VH;
    }
    public static MemoryAddress create_hb_font$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontClass.create_hb_font$VH.get(seg);
    }
    public static void create_hb_font$set( MemorySegment seg, MemoryAddress x) {
        _PangoFontClass.create_hb_font$VH.set(seg, x);
    }
    public static MemoryAddress create_hb_font$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontClass.create_hb_font$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void create_hb_font$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoFontClass.create_hb_font$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static create_hb_font create_hb_font (MemorySegment segment, ResourceScope scope) {
        return create_hb_font.ofAddress(create_hb_font$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


