// Generated by jextract

package gtk3;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _PangoFontFamilyClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("list_faces"),
        Constants$root.C_POINTER$LAYOUT.withName("get_name"),
        Constants$root.C_POINTER$LAYOUT.withName("is_monospace"),
        Constants$root.C_POINTER$LAYOUT.withName("is_variable"),
        Constants$root.C_POINTER$LAYOUT.withName("get_face"),
        Constants$root.C_POINTER$LAYOUT.withName("_pango_reserved2")
    ).withName("_PangoFontFamilyClass");
    public static MemoryLayout $LAYOUT() {
        return _PangoFontFamilyClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor list_faces$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle list_faces$MH = RuntimeHelper.downcallHandle(
        _PangoFontFamilyClass.list_faces$FUNC, false
    );
    public interface list_faces {

        void apply(jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1, jdk.incubator.foreign.MemoryAddress _x2);
        static NativeSymbol allocate(list_faces fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(list_faces.class, fi, _PangoFontFamilyClass.list_faces$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static list_faces ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("list_faces::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1, jdk.incubator.foreign.MemoryAddress _x2) -> {
                try {
                    _PangoFontFamilyClass.list_faces$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, (jdk.incubator.foreign.Addressable)_x1, (jdk.incubator.foreign.Addressable)_x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle list_faces$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("list_faces"));
    public static VarHandle list_faces$VH() {
        return _PangoFontFamilyClass.list_faces$VH;
    }
    public static MemoryAddress list_faces$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontFamilyClass.list_faces$VH.get(seg);
    }
    public static void list_faces$set( MemorySegment seg, MemoryAddress x) {
        _PangoFontFamilyClass.list_faces$VH.set(seg, x);
    }
    public static MemoryAddress list_faces$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontFamilyClass.list_faces$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void list_faces$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoFontFamilyClass.list_faces$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static list_faces list_faces (MemorySegment segment, ResourceScope scope) {
        return list_faces.ofAddress(list_faces$get(segment), scope);
    }
    static final FunctionDescriptor get_name$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_name$MH = RuntimeHelper.downcallHandle(
        _PangoFontFamilyClass.get_name$FUNC, false
    );
    public interface get_name {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(get_name fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_name.class, fi, _PangoFontFamilyClass.get_name$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_name ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_name::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_PangoFontFamilyClass.get_name$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_name"));
    public static VarHandle get_name$VH() {
        return _PangoFontFamilyClass.get_name$VH;
    }
    public static MemoryAddress get_name$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontFamilyClass.get_name$VH.get(seg);
    }
    public static void get_name$set( MemorySegment seg, MemoryAddress x) {
        _PangoFontFamilyClass.get_name$VH.set(seg, x);
    }
    public static MemoryAddress get_name$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontFamilyClass.get_name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_name$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoFontFamilyClass.get_name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_name get_name (MemorySegment segment, ResourceScope scope) {
        return get_name.ofAddress(get_name$get(segment), scope);
    }
    static final FunctionDescriptor is_monospace$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle is_monospace$MH = RuntimeHelper.downcallHandle(
        _PangoFontFamilyClass.is_monospace$FUNC, false
    );
    public interface is_monospace {

        int apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(is_monospace fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(is_monospace.class, fi, _PangoFontFamilyClass.is_monospace$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static is_monospace ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("is_monospace::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    return (int)_PangoFontFamilyClass.is_monospace$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle is_monospace$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("is_monospace"));
    public static VarHandle is_monospace$VH() {
        return _PangoFontFamilyClass.is_monospace$VH;
    }
    public static MemoryAddress is_monospace$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontFamilyClass.is_monospace$VH.get(seg);
    }
    public static void is_monospace$set( MemorySegment seg, MemoryAddress x) {
        _PangoFontFamilyClass.is_monospace$VH.set(seg, x);
    }
    public static MemoryAddress is_monospace$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontFamilyClass.is_monospace$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_monospace$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoFontFamilyClass.is_monospace$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static is_monospace is_monospace (MemorySegment segment, ResourceScope scope) {
        return is_monospace.ofAddress(is_monospace$get(segment), scope);
    }
    static final FunctionDescriptor is_variable$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle is_variable$MH = RuntimeHelper.downcallHandle(
        _PangoFontFamilyClass.is_variable$FUNC, false
    );
    public interface is_variable {

        int apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(is_variable fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(is_variable.class, fi, _PangoFontFamilyClass.is_variable$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static is_variable ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("is_variable::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    return (int)_PangoFontFamilyClass.is_variable$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle is_variable$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("is_variable"));
    public static VarHandle is_variable$VH() {
        return _PangoFontFamilyClass.is_variable$VH;
    }
    public static MemoryAddress is_variable$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontFamilyClass.is_variable$VH.get(seg);
    }
    public static void is_variable$set( MemorySegment seg, MemoryAddress x) {
        _PangoFontFamilyClass.is_variable$VH.set(seg, x);
    }
    public static MemoryAddress is_variable$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontFamilyClass.is_variable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_variable$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoFontFamilyClass.is_variable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static is_variable is_variable (MemorySegment segment, ResourceScope scope) {
        return is_variable.ofAddress(is_variable$get(segment), scope);
    }
    static final FunctionDescriptor get_face$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_face$MH = RuntimeHelper.downcallHandle(
        _PangoFontFamilyClass.get_face$FUNC, false
    );
    public interface get_face {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1);
        static NativeSymbol allocate(get_face fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_face.class, fi, _PangoFontFamilyClass.get_face$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_face ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_face::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_PangoFontFamilyClass.get_face$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, (jdk.incubator.foreign.Addressable)_x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_face$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_face"));
    public static VarHandle get_face$VH() {
        return _PangoFontFamilyClass.get_face$VH;
    }
    public static MemoryAddress get_face$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontFamilyClass.get_face$VH.get(seg);
    }
    public static void get_face$set( MemorySegment seg, MemoryAddress x) {
        _PangoFontFamilyClass.get_face$VH.set(seg, x);
    }
    public static MemoryAddress get_face$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontFamilyClass.get_face$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_face$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoFontFamilyClass.get_face$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_face get_face (MemorySegment segment, ResourceScope scope) {
        return get_face.ofAddress(get_face$get(segment), scope);
    }
    static final FunctionDescriptor _pango_reserved2$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _pango_reserved2$MH = RuntimeHelper.downcallHandle(
        _PangoFontFamilyClass._pango_reserved2$FUNC, false
    );
    public interface _pango_reserved2 {

        void apply();
        static NativeSymbol allocate(_pango_reserved2 fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(_pango_reserved2.class, fi, _PangoFontFamilyClass._pango_reserved2$FUNC, "()V", scope);
        }
        static _pango_reserved2 ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("_pango_reserved2::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return () -> {
                try {
                    _PangoFontFamilyClass._pango_reserved2$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _pango_reserved2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_pango_reserved2"));
    public static VarHandle _pango_reserved2$VH() {
        return _PangoFontFamilyClass._pango_reserved2$VH;
    }
    public static MemoryAddress _pango_reserved2$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontFamilyClass._pango_reserved2$VH.get(seg);
    }
    public static void _pango_reserved2$set( MemorySegment seg, MemoryAddress x) {
        _PangoFontFamilyClass._pango_reserved2$VH.set(seg, x);
    }
    public static MemoryAddress _pango_reserved2$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontFamilyClass._pango_reserved2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _pango_reserved2$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoFontFamilyClass._pango_reserved2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _pango_reserved2 _pango_reserved2 (MemorySegment segment, ResourceScope scope) {
        return _pango_reserved2.ofAddress(_pango_reserved2$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


