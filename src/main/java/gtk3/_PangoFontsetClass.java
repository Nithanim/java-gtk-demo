// Generated by jextract

package gtk3;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _PangoFontsetClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("get_font"),
        Constants$root.C_POINTER$LAYOUT.withName("get_metrics"),
        Constants$root.C_POINTER$LAYOUT.withName("get_language"),
        Constants$root.C_POINTER$LAYOUT.withName("foreach"),
        Constants$root.C_POINTER$LAYOUT.withName("_pango_reserved1"),
        Constants$root.C_POINTER$LAYOUT.withName("_pango_reserved2"),
        Constants$root.C_POINTER$LAYOUT.withName("_pango_reserved3"),
        Constants$root.C_POINTER$LAYOUT.withName("_pango_reserved4")
    ).withName("_PangoFontsetClass");
    public static MemoryLayout $LAYOUT() {
        return _PangoFontsetClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor get_font$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle get_font$MH = RuntimeHelper.downcallHandle(
        _PangoFontsetClass.get_font$FUNC, false
    );
    public interface get_font {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress _x0, int _x1);
        static NativeSymbol allocate(get_font fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_font.class, fi, _PangoFontsetClass.get_font$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_font ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_font::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, int _x1) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_PangoFontsetClass.get_font$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, _x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_font$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_font"));
    public static VarHandle get_font$VH() {
        return _PangoFontsetClass.get_font$VH;
    }
    public static MemoryAddress get_font$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontsetClass.get_font$VH.get(seg);
    }
    public static void get_font$set( MemorySegment seg, MemoryAddress x) {
        _PangoFontsetClass.get_font$VH.set(seg, x);
    }
    public static MemoryAddress get_font$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontsetClass.get_font$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_font$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoFontsetClass.get_font$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_font get_font (MemorySegment segment, ResourceScope scope) {
        return get_font.ofAddress(get_font$get(segment), scope);
    }
    static final FunctionDescriptor get_metrics$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_metrics$MH = RuntimeHelper.downcallHandle(
        _PangoFontsetClass.get_metrics$FUNC, false
    );
    public interface get_metrics {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(get_metrics fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_metrics.class, fi, _PangoFontsetClass.get_metrics$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_metrics ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_metrics::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_PangoFontsetClass.get_metrics$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_metrics$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_metrics"));
    public static VarHandle get_metrics$VH() {
        return _PangoFontsetClass.get_metrics$VH;
    }
    public static MemoryAddress get_metrics$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontsetClass.get_metrics$VH.get(seg);
    }
    public static void get_metrics$set( MemorySegment seg, MemoryAddress x) {
        _PangoFontsetClass.get_metrics$VH.set(seg, x);
    }
    public static MemoryAddress get_metrics$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontsetClass.get_metrics$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_metrics$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoFontsetClass.get_metrics$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_metrics get_metrics (MemorySegment segment, ResourceScope scope) {
        return get_metrics.ofAddress(get_metrics$get(segment), scope);
    }
    static final FunctionDescriptor get_language$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_language$MH = RuntimeHelper.downcallHandle(
        _PangoFontsetClass.get_language$FUNC, false
    );
    public interface get_language {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(get_language fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_language.class, fi, _PangoFontsetClass.get_language$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_language ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_language::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_PangoFontsetClass.get_language$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_language$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_language"));
    public static VarHandle get_language$VH() {
        return _PangoFontsetClass.get_language$VH;
    }
    public static MemoryAddress get_language$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontsetClass.get_language$VH.get(seg);
    }
    public static void get_language$set( MemorySegment seg, MemoryAddress x) {
        _PangoFontsetClass.get_language$VH.set(seg, x);
    }
    public static MemoryAddress get_language$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontsetClass.get_language$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_language$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoFontsetClass.get_language$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_language get_language (MemorySegment segment, ResourceScope scope) {
        return get_language.ofAddress(get_language$get(segment), scope);
    }
    static final FunctionDescriptor foreach$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle foreach$MH = RuntimeHelper.downcallHandle(
        _PangoFontsetClass.foreach$FUNC, false
    );
    public interface foreach {

        void apply(jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1, jdk.incubator.foreign.MemoryAddress _x2);
        static NativeSymbol allocate(foreach fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(foreach.class, fi, _PangoFontsetClass.foreach$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static foreach ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("foreach::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1, jdk.incubator.foreign.MemoryAddress _x2) -> {
                try {
                    _PangoFontsetClass.foreach$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, (jdk.incubator.foreign.Addressable)_x1, (jdk.incubator.foreign.Addressable)_x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle foreach$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("foreach"));
    public static VarHandle foreach$VH() {
        return _PangoFontsetClass.foreach$VH;
    }
    public static MemoryAddress foreach$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontsetClass.foreach$VH.get(seg);
    }
    public static void foreach$set( MemorySegment seg, MemoryAddress x) {
        _PangoFontsetClass.foreach$VH.set(seg, x);
    }
    public static MemoryAddress foreach$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontsetClass.foreach$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void foreach$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoFontsetClass.foreach$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static foreach foreach (MemorySegment segment, ResourceScope scope) {
        return foreach.ofAddress(foreach$get(segment), scope);
    }
    static final FunctionDescriptor _pango_reserved1$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _pango_reserved1$MH = RuntimeHelper.downcallHandle(
        _PangoFontsetClass._pango_reserved1$FUNC, false
    );
    public interface _pango_reserved1 {

        void apply();
        static NativeSymbol allocate(_pango_reserved1 fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(_pango_reserved1.class, fi, _PangoFontsetClass._pango_reserved1$FUNC, "()V", scope);
        }
        static _pango_reserved1 ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("_pango_reserved1::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return () -> {
                try {
                    _PangoFontsetClass._pango_reserved1$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _pango_reserved1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_pango_reserved1"));
    public static VarHandle _pango_reserved1$VH() {
        return _PangoFontsetClass._pango_reserved1$VH;
    }
    public static MemoryAddress _pango_reserved1$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontsetClass._pango_reserved1$VH.get(seg);
    }
    public static void _pango_reserved1$set( MemorySegment seg, MemoryAddress x) {
        _PangoFontsetClass._pango_reserved1$VH.set(seg, x);
    }
    public static MemoryAddress _pango_reserved1$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontsetClass._pango_reserved1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _pango_reserved1$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoFontsetClass._pango_reserved1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _pango_reserved1 _pango_reserved1 (MemorySegment segment, ResourceScope scope) {
        return _pango_reserved1.ofAddress(_pango_reserved1$get(segment), scope);
    }
    static final FunctionDescriptor _pango_reserved2$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _pango_reserved2$MH = RuntimeHelper.downcallHandle(
        _PangoFontsetClass._pango_reserved2$FUNC, false
    );
    public interface _pango_reserved2 {

        void apply();
        static NativeSymbol allocate(_pango_reserved2 fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(_pango_reserved2.class, fi, _PangoFontsetClass._pango_reserved2$FUNC, "()V", scope);
        }
        static _pango_reserved2 ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("_pango_reserved2::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return () -> {
                try {
                    _PangoFontsetClass._pango_reserved2$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _pango_reserved2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_pango_reserved2"));
    public static VarHandle _pango_reserved2$VH() {
        return _PangoFontsetClass._pango_reserved2$VH;
    }
    public static MemoryAddress _pango_reserved2$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontsetClass._pango_reserved2$VH.get(seg);
    }
    public static void _pango_reserved2$set( MemorySegment seg, MemoryAddress x) {
        _PangoFontsetClass._pango_reserved2$VH.set(seg, x);
    }
    public static MemoryAddress _pango_reserved2$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontsetClass._pango_reserved2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _pango_reserved2$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoFontsetClass._pango_reserved2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _pango_reserved2 _pango_reserved2 (MemorySegment segment, ResourceScope scope) {
        return _pango_reserved2.ofAddress(_pango_reserved2$get(segment), scope);
    }
    static final FunctionDescriptor _pango_reserved3$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _pango_reserved3$MH = RuntimeHelper.downcallHandle(
        _PangoFontsetClass._pango_reserved3$FUNC, false
    );
    public interface _pango_reserved3 {

        void apply();
        static NativeSymbol allocate(_pango_reserved3 fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(_pango_reserved3.class, fi, _PangoFontsetClass._pango_reserved3$FUNC, "()V", scope);
        }
        static _pango_reserved3 ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("_pango_reserved3::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return () -> {
                try {
                    _PangoFontsetClass._pango_reserved3$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _pango_reserved3$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_pango_reserved3"));
    public static VarHandle _pango_reserved3$VH() {
        return _PangoFontsetClass._pango_reserved3$VH;
    }
    public static MemoryAddress _pango_reserved3$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontsetClass._pango_reserved3$VH.get(seg);
    }
    public static void _pango_reserved3$set( MemorySegment seg, MemoryAddress x) {
        _PangoFontsetClass._pango_reserved3$VH.set(seg, x);
    }
    public static MemoryAddress _pango_reserved3$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontsetClass._pango_reserved3$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _pango_reserved3$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoFontsetClass._pango_reserved3$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _pango_reserved3 _pango_reserved3 (MemorySegment segment, ResourceScope scope) {
        return _pango_reserved3.ofAddress(_pango_reserved3$get(segment), scope);
    }
    static final FunctionDescriptor _pango_reserved4$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _pango_reserved4$MH = RuntimeHelper.downcallHandle(
        _PangoFontsetClass._pango_reserved4$FUNC, false
    );
    public interface _pango_reserved4 {

        void apply();
        static NativeSymbol allocate(_pango_reserved4 fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(_pango_reserved4.class, fi, _PangoFontsetClass._pango_reserved4$FUNC, "()V", scope);
        }
        static _pango_reserved4 ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("_pango_reserved4::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return () -> {
                try {
                    _PangoFontsetClass._pango_reserved4$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _pango_reserved4$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_pango_reserved4"));
    public static VarHandle _pango_reserved4$VH() {
        return _PangoFontsetClass._pango_reserved4$VH;
    }
    public static MemoryAddress _pango_reserved4$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontsetClass._pango_reserved4$VH.get(seg);
    }
    public static void _pango_reserved4$set( MemorySegment seg, MemoryAddress x) {
        _PangoFontsetClass._pango_reserved4$VH.set(seg, x);
    }
    public static MemoryAddress _pango_reserved4$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontsetClass._pango_reserved4$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _pango_reserved4$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoFontsetClass._pango_reserved4$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _pango_reserved4 _pango_reserved4 (MemorySegment segment, ResourceScope scope) {
        return _pango_reserved4.ofAddress(_pango_reserved4$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


