// Generated by jextract

package gtk3;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _GtkRecentChooserIface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("base_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("set_current_uri"),
        Constants$root.C_POINTER$LAYOUT.withName("get_current_uri"),
        Constants$root.C_POINTER$LAYOUT.withName("select_uri"),
        Constants$root.C_POINTER$LAYOUT.withName("unselect_uri"),
        Constants$root.C_POINTER$LAYOUT.withName("select_all"),
        Constants$root.C_POINTER$LAYOUT.withName("unselect_all"),
        Constants$root.C_POINTER$LAYOUT.withName("get_items"),
        Constants$root.C_POINTER$LAYOUT.withName("get_recent_manager"),
        Constants$root.C_POINTER$LAYOUT.withName("add_filter"),
        Constants$root.C_POINTER$LAYOUT.withName("remove_filter"),
        Constants$root.C_POINTER$LAYOUT.withName("list_filters"),
        Constants$root.C_POINTER$LAYOUT.withName("set_sort_func"),
        Constants$root.C_POINTER$LAYOUT.withName("item_activated"),
        Constants$root.C_POINTER$LAYOUT.withName("selection_changed")
    ).withName("_GtkRecentChooserIface");
    public static MemoryLayout $LAYOUT() {
        return _GtkRecentChooserIface.$struct$LAYOUT;
    }
    public static MemorySegment base_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor set_current_uri$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_current_uri$MH = RuntimeHelper.downcallHandle(
        _GtkRecentChooserIface.set_current_uri$FUNC, false
    );
    public interface set_current_uri {

        int apply(jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1, jdk.incubator.foreign.MemoryAddress _x2);
        static NativeSymbol allocate(set_current_uri fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(set_current_uri.class, fi, _GtkRecentChooserIface.set_current_uri$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static set_current_uri ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("set_current_uri::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1, jdk.incubator.foreign.MemoryAddress _x2) -> {
                try {
                    return (int)_GtkRecentChooserIface.set_current_uri$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, (jdk.incubator.foreign.Addressable)_x1, (jdk.incubator.foreign.Addressable)_x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_current_uri$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_current_uri"));
    public static VarHandle set_current_uri$VH() {
        return _GtkRecentChooserIface.set_current_uri$VH;
    }
    public static MemoryAddress set_current_uri$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkRecentChooserIface.set_current_uri$VH.get(seg);
    }
    public static void set_current_uri$set( MemorySegment seg, MemoryAddress x) {
        _GtkRecentChooserIface.set_current_uri$VH.set(seg, x);
    }
    public static MemoryAddress set_current_uri$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkRecentChooserIface.set_current_uri$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_current_uri$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkRecentChooserIface.set_current_uri$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_current_uri set_current_uri (MemorySegment segment, ResourceScope scope) {
        return set_current_uri.ofAddress(set_current_uri$get(segment), scope);
    }
    static final FunctionDescriptor get_current_uri$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_current_uri$MH = RuntimeHelper.downcallHandle(
        _GtkRecentChooserIface.get_current_uri$FUNC, false
    );
    public interface get_current_uri {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(get_current_uri fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_current_uri.class, fi, _GtkRecentChooserIface.get_current_uri$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_current_uri ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_current_uri::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_GtkRecentChooserIface.get_current_uri$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_current_uri$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_current_uri"));
    public static VarHandle get_current_uri$VH() {
        return _GtkRecentChooserIface.get_current_uri$VH;
    }
    public static MemoryAddress get_current_uri$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkRecentChooserIface.get_current_uri$VH.get(seg);
    }
    public static void get_current_uri$set( MemorySegment seg, MemoryAddress x) {
        _GtkRecentChooserIface.get_current_uri$VH.set(seg, x);
    }
    public static MemoryAddress get_current_uri$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkRecentChooserIface.get_current_uri$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_current_uri$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkRecentChooserIface.get_current_uri$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_current_uri get_current_uri (MemorySegment segment, ResourceScope scope) {
        return get_current_uri.ofAddress(get_current_uri$get(segment), scope);
    }
    static final FunctionDescriptor select_uri$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle select_uri$MH = RuntimeHelper.downcallHandle(
        _GtkRecentChooserIface.select_uri$FUNC, false
    );
    public interface select_uri {

        int apply(jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1, jdk.incubator.foreign.MemoryAddress _x2);
        static NativeSymbol allocate(select_uri fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(select_uri.class, fi, _GtkRecentChooserIface.select_uri$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static select_uri ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("select_uri::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1, jdk.incubator.foreign.MemoryAddress _x2) -> {
                try {
                    return (int)_GtkRecentChooserIface.select_uri$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, (jdk.incubator.foreign.Addressable)_x1, (jdk.incubator.foreign.Addressable)_x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle select_uri$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("select_uri"));
    public static VarHandle select_uri$VH() {
        return _GtkRecentChooserIface.select_uri$VH;
    }
    public static MemoryAddress select_uri$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkRecentChooserIface.select_uri$VH.get(seg);
    }
    public static void select_uri$set( MemorySegment seg, MemoryAddress x) {
        _GtkRecentChooserIface.select_uri$VH.set(seg, x);
    }
    public static MemoryAddress select_uri$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkRecentChooserIface.select_uri$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void select_uri$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkRecentChooserIface.select_uri$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static select_uri select_uri (MemorySegment segment, ResourceScope scope) {
        return select_uri.ofAddress(select_uri$get(segment), scope);
    }
    static final FunctionDescriptor unselect_uri$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle unselect_uri$MH = RuntimeHelper.downcallHandle(
        _GtkRecentChooserIface.unselect_uri$FUNC, false
    );
    public interface unselect_uri {

        void apply(jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1);
        static NativeSymbol allocate(unselect_uri fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(unselect_uri.class, fi, _GtkRecentChooserIface.unselect_uri$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static unselect_uri ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("unselect_uri::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1) -> {
                try {
                    _GtkRecentChooserIface.unselect_uri$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, (jdk.incubator.foreign.Addressable)_x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle unselect_uri$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("unselect_uri"));
    public static VarHandle unselect_uri$VH() {
        return _GtkRecentChooserIface.unselect_uri$VH;
    }
    public static MemoryAddress unselect_uri$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkRecentChooserIface.unselect_uri$VH.get(seg);
    }
    public static void unselect_uri$set( MemorySegment seg, MemoryAddress x) {
        _GtkRecentChooserIface.unselect_uri$VH.set(seg, x);
    }
    public static MemoryAddress unselect_uri$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkRecentChooserIface.unselect_uri$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void unselect_uri$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkRecentChooserIface.unselect_uri$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static unselect_uri unselect_uri (MemorySegment segment, ResourceScope scope) {
        return unselect_uri.ofAddress(unselect_uri$get(segment), scope);
    }
    static final FunctionDescriptor select_all$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle select_all$MH = RuntimeHelper.downcallHandle(
        _GtkRecentChooserIface.select_all$FUNC, false
    );
    public interface select_all {

        void apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(select_all fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(select_all.class, fi, _GtkRecentChooserIface.select_all$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static select_all ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("select_all::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    _GtkRecentChooserIface.select_all$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle select_all$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("select_all"));
    public static VarHandle select_all$VH() {
        return _GtkRecentChooserIface.select_all$VH;
    }
    public static MemoryAddress select_all$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkRecentChooserIface.select_all$VH.get(seg);
    }
    public static void select_all$set( MemorySegment seg, MemoryAddress x) {
        _GtkRecentChooserIface.select_all$VH.set(seg, x);
    }
    public static MemoryAddress select_all$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkRecentChooserIface.select_all$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void select_all$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkRecentChooserIface.select_all$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static select_all select_all (MemorySegment segment, ResourceScope scope) {
        return select_all.ofAddress(select_all$get(segment), scope);
    }
    static final FunctionDescriptor unselect_all$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle unselect_all$MH = RuntimeHelper.downcallHandle(
        _GtkRecentChooserIface.unselect_all$FUNC, false
    );
    public interface unselect_all {

        void apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(unselect_all fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(unselect_all.class, fi, _GtkRecentChooserIface.unselect_all$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static unselect_all ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("unselect_all::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    _GtkRecentChooserIface.unselect_all$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle unselect_all$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("unselect_all"));
    public static VarHandle unselect_all$VH() {
        return _GtkRecentChooserIface.unselect_all$VH;
    }
    public static MemoryAddress unselect_all$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkRecentChooserIface.unselect_all$VH.get(seg);
    }
    public static void unselect_all$set( MemorySegment seg, MemoryAddress x) {
        _GtkRecentChooserIface.unselect_all$VH.set(seg, x);
    }
    public static MemoryAddress unselect_all$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkRecentChooserIface.unselect_all$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void unselect_all$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkRecentChooserIface.unselect_all$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static unselect_all unselect_all (MemorySegment segment, ResourceScope scope) {
        return unselect_all.ofAddress(unselect_all$get(segment), scope);
    }
    static final FunctionDescriptor get_items$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_items$MH = RuntimeHelper.downcallHandle(
        _GtkRecentChooserIface.get_items$FUNC, false
    );
    public interface get_items {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(get_items fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_items.class, fi, _GtkRecentChooserIface.get_items$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_items ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_items::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_GtkRecentChooserIface.get_items$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_items$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_items"));
    public static VarHandle get_items$VH() {
        return _GtkRecentChooserIface.get_items$VH;
    }
    public static MemoryAddress get_items$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkRecentChooserIface.get_items$VH.get(seg);
    }
    public static void get_items$set( MemorySegment seg, MemoryAddress x) {
        _GtkRecentChooserIface.get_items$VH.set(seg, x);
    }
    public static MemoryAddress get_items$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkRecentChooserIface.get_items$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_items$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkRecentChooserIface.get_items$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_items get_items (MemorySegment segment, ResourceScope scope) {
        return get_items.ofAddress(get_items$get(segment), scope);
    }
    static final FunctionDescriptor get_recent_manager$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_recent_manager$MH = RuntimeHelper.downcallHandle(
        _GtkRecentChooserIface.get_recent_manager$FUNC, false
    );
    public interface get_recent_manager {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(get_recent_manager fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_recent_manager.class, fi, _GtkRecentChooserIface.get_recent_manager$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_recent_manager ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_recent_manager::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_GtkRecentChooserIface.get_recent_manager$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_recent_manager$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_recent_manager"));
    public static VarHandle get_recent_manager$VH() {
        return _GtkRecentChooserIface.get_recent_manager$VH;
    }
    public static MemoryAddress get_recent_manager$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkRecentChooserIface.get_recent_manager$VH.get(seg);
    }
    public static void get_recent_manager$set( MemorySegment seg, MemoryAddress x) {
        _GtkRecentChooserIface.get_recent_manager$VH.set(seg, x);
    }
    public static MemoryAddress get_recent_manager$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkRecentChooserIface.get_recent_manager$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_recent_manager$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkRecentChooserIface.get_recent_manager$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_recent_manager get_recent_manager (MemorySegment segment, ResourceScope scope) {
        return get_recent_manager.ofAddress(get_recent_manager$get(segment), scope);
    }
    static final FunctionDescriptor add_filter$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle add_filter$MH = RuntimeHelper.downcallHandle(
        _GtkRecentChooserIface.add_filter$FUNC, false
    );
    public interface add_filter {

        void apply(jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1);
        static NativeSymbol allocate(add_filter fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(add_filter.class, fi, _GtkRecentChooserIface.add_filter$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static add_filter ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("add_filter::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1) -> {
                try {
                    _GtkRecentChooserIface.add_filter$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, (jdk.incubator.foreign.Addressable)_x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle add_filter$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("add_filter"));
    public static VarHandle add_filter$VH() {
        return _GtkRecentChooserIface.add_filter$VH;
    }
    public static MemoryAddress add_filter$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkRecentChooserIface.add_filter$VH.get(seg);
    }
    public static void add_filter$set( MemorySegment seg, MemoryAddress x) {
        _GtkRecentChooserIface.add_filter$VH.set(seg, x);
    }
    public static MemoryAddress add_filter$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkRecentChooserIface.add_filter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void add_filter$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkRecentChooserIface.add_filter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static add_filter add_filter (MemorySegment segment, ResourceScope scope) {
        return add_filter.ofAddress(add_filter$get(segment), scope);
    }
    static final FunctionDescriptor remove_filter$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle remove_filter$MH = RuntimeHelper.downcallHandle(
        _GtkRecentChooserIface.remove_filter$FUNC, false
    );
    public interface remove_filter {

        void apply(jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1);
        static NativeSymbol allocate(remove_filter fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(remove_filter.class, fi, _GtkRecentChooserIface.remove_filter$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static remove_filter ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("remove_filter::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1) -> {
                try {
                    _GtkRecentChooserIface.remove_filter$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, (jdk.incubator.foreign.Addressable)_x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle remove_filter$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("remove_filter"));
    public static VarHandle remove_filter$VH() {
        return _GtkRecentChooserIface.remove_filter$VH;
    }
    public static MemoryAddress remove_filter$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkRecentChooserIface.remove_filter$VH.get(seg);
    }
    public static void remove_filter$set( MemorySegment seg, MemoryAddress x) {
        _GtkRecentChooserIface.remove_filter$VH.set(seg, x);
    }
    public static MemoryAddress remove_filter$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkRecentChooserIface.remove_filter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void remove_filter$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkRecentChooserIface.remove_filter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static remove_filter remove_filter (MemorySegment segment, ResourceScope scope) {
        return remove_filter.ofAddress(remove_filter$get(segment), scope);
    }
    static final FunctionDescriptor list_filters$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle list_filters$MH = RuntimeHelper.downcallHandle(
        _GtkRecentChooserIface.list_filters$FUNC, false
    );
    public interface list_filters {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(list_filters fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(list_filters.class, fi, _GtkRecentChooserIface.list_filters$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static list_filters ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("list_filters::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_GtkRecentChooserIface.list_filters$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle list_filters$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("list_filters"));
    public static VarHandle list_filters$VH() {
        return _GtkRecentChooserIface.list_filters$VH;
    }
    public static MemoryAddress list_filters$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkRecentChooserIface.list_filters$VH.get(seg);
    }
    public static void list_filters$set( MemorySegment seg, MemoryAddress x) {
        _GtkRecentChooserIface.list_filters$VH.set(seg, x);
    }
    public static MemoryAddress list_filters$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkRecentChooserIface.list_filters$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void list_filters$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkRecentChooserIface.list_filters$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static list_filters list_filters (MemorySegment segment, ResourceScope scope) {
        return list_filters.ofAddress(list_filters$get(segment), scope);
    }
    static final FunctionDescriptor set_sort_func$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_sort_func$MH = RuntimeHelper.downcallHandle(
        _GtkRecentChooserIface.set_sort_func$FUNC, false
    );
    public interface set_sort_func {

        void apply(jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1, jdk.incubator.foreign.MemoryAddress _x2, jdk.incubator.foreign.MemoryAddress _x3);
        static NativeSymbol allocate(set_sort_func fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(set_sort_func.class, fi, _GtkRecentChooserIface.set_sort_func$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static set_sort_func ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("set_sort_func::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1, jdk.incubator.foreign.MemoryAddress _x2, jdk.incubator.foreign.MemoryAddress _x3) -> {
                try {
                    _GtkRecentChooserIface.set_sort_func$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, (jdk.incubator.foreign.Addressable)_x1, (jdk.incubator.foreign.Addressable)_x2, (jdk.incubator.foreign.Addressable)_x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_sort_func$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_sort_func"));
    public static VarHandle set_sort_func$VH() {
        return _GtkRecentChooserIface.set_sort_func$VH;
    }
    public static MemoryAddress set_sort_func$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkRecentChooserIface.set_sort_func$VH.get(seg);
    }
    public static void set_sort_func$set( MemorySegment seg, MemoryAddress x) {
        _GtkRecentChooserIface.set_sort_func$VH.set(seg, x);
    }
    public static MemoryAddress set_sort_func$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkRecentChooserIface.set_sort_func$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_sort_func$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkRecentChooserIface.set_sort_func$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_sort_func set_sort_func (MemorySegment segment, ResourceScope scope) {
        return set_sort_func.ofAddress(set_sort_func$get(segment), scope);
    }
    static final FunctionDescriptor item_activated$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle item_activated$MH = RuntimeHelper.downcallHandle(
        _GtkRecentChooserIface.item_activated$FUNC, false
    );
    public interface item_activated {

        void apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(item_activated fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(item_activated.class, fi, _GtkRecentChooserIface.item_activated$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static item_activated ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("item_activated::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    _GtkRecentChooserIface.item_activated$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle item_activated$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("item_activated"));
    public static VarHandle item_activated$VH() {
        return _GtkRecentChooserIface.item_activated$VH;
    }
    public static MemoryAddress item_activated$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkRecentChooserIface.item_activated$VH.get(seg);
    }
    public static void item_activated$set( MemorySegment seg, MemoryAddress x) {
        _GtkRecentChooserIface.item_activated$VH.set(seg, x);
    }
    public static MemoryAddress item_activated$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkRecentChooserIface.item_activated$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void item_activated$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkRecentChooserIface.item_activated$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static item_activated item_activated (MemorySegment segment, ResourceScope scope) {
        return item_activated.ofAddress(item_activated$get(segment), scope);
    }
    static final FunctionDescriptor selection_changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle selection_changed$MH = RuntimeHelper.downcallHandle(
        _GtkRecentChooserIface.selection_changed$FUNC, false
    );
    public interface selection_changed {

        void apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(selection_changed fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(selection_changed.class, fi, _GtkRecentChooserIface.selection_changed$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static selection_changed ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("selection_changed::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    _GtkRecentChooserIface.selection_changed$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle selection_changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("selection_changed"));
    public static VarHandle selection_changed$VH() {
        return _GtkRecentChooserIface.selection_changed$VH;
    }
    public static MemoryAddress selection_changed$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkRecentChooserIface.selection_changed$VH.get(seg);
    }
    public static void selection_changed$set( MemorySegment seg, MemoryAddress x) {
        _GtkRecentChooserIface.selection_changed$VH.set(seg, x);
    }
    public static MemoryAddress selection_changed$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkRecentChooserIface.selection_changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void selection_changed$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkRecentChooserIface.selection_changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static selection_changed selection_changed (MemorySegment segment, ResourceScope scope) {
        return selection_changed.ofAddress(selection_changed$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


