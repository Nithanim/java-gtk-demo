// Generated by jextract

package gtk3;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _GtkEntryClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
                ).withName("g_type_class"),
                Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
                Constants$root.C_POINTER$LAYOUT.withName("constructor"),
                Constants$root.C_POINTER$LAYOUT.withName("set_property"),
                Constants$root.C_POINTER$LAYOUT.withName("get_property"),
                Constants$root.C_POINTER$LAYOUT.withName("dispose"),
                Constants$root.C_POINTER$LAYOUT.withName("finalize"),
                Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
                Constants$root.C_POINTER$LAYOUT.withName("notify"),
                Constants$root.C_POINTER$LAYOUT.withName("constructed"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
                MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
            ).withName("parent_class"),
            Constants$root.C_INT$LAYOUT.withName("activate_signal"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_child_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("destroy"),
            Constants$root.C_POINTER$LAYOUT.withName("show"),
            Constants$root.C_POINTER$LAYOUT.withName("show_all"),
            Constants$root.C_POINTER$LAYOUT.withName("hide"),
            Constants$root.C_POINTER$LAYOUT.withName("map"),
            Constants$root.C_POINTER$LAYOUT.withName("unmap"),
            Constants$root.C_POINTER$LAYOUT.withName("realize"),
            Constants$root.C_POINTER$LAYOUT.withName("unrealize"),
            Constants$root.C_POINTER$LAYOUT.withName("size_allocate"),
            Constants$root.C_POINTER$LAYOUT.withName("state_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("state_flags_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("parent_set"),
            Constants$root.C_POINTER$LAYOUT.withName("hierarchy_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("style_set"),
            Constants$root.C_POINTER$LAYOUT.withName("direction_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("grab_notify"),
            Constants$root.C_POINTER$LAYOUT.withName("child_notify"),
            Constants$root.C_POINTER$LAYOUT.withName("draw"),
            Constants$root.C_POINTER$LAYOUT.withName("get_request_mode"),
            Constants$root.C_POINTER$LAYOUT.withName("get_preferred_height"),
            Constants$root.C_POINTER$LAYOUT.withName("get_preferred_width_for_height"),
            Constants$root.C_POINTER$LAYOUT.withName("get_preferred_width"),
            Constants$root.C_POINTER$LAYOUT.withName("get_preferred_height_for_width"),
            Constants$root.C_POINTER$LAYOUT.withName("mnemonic_activate"),
            Constants$root.C_POINTER$LAYOUT.withName("grab_focus"),
            Constants$root.C_POINTER$LAYOUT.withName("focus"),
            Constants$root.C_POINTER$LAYOUT.withName("move_focus"),
            Constants$root.C_POINTER$LAYOUT.withName("keynav_failed"),
            Constants$root.C_POINTER$LAYOUT.withName("event"),
            Constants$root.C_POINTER$LAYOUT.withName("button_press_event"),
            Constants$root.C_POINTER$LAYOUT.withName("button_release_event"),
            Constants$root.C_POINTER$LAYOUT.withName("scroll_event"),
            Constants$root.C_POINTER$LAYOUT.withName("motion_notify_event"),
            Constants$root.C_POINTER$LAYOUT.withName("delete_event"),
            Constants$root.C_POINTER$LAYOUT.withName("destroy_event"),
            Constants$root.C_POINTER$LAYOUT.withName("key_press_event"),
            Constants$root.C_POINTER$LAYOUT.withName("key_release_event"),
            Constants$root.C_POINTER$LAYOUT.withName("enter_notify_event"),
            Constants$root.C_POINTER$LAYOUT.withName("leave_notify_event"),
            Constants$root.C_POINTER$LAYOUT.withName("configure_event"),
            Constants$root.C_POINTER$LAYOUT.withName("focus_in_event"),
            Constants$root.C_POINTER$LAYOUT.withName("focus_out_event"),
            Constants$root.C_POINTER$LAYOUT.withName("map_event"),
            Constants$root.C_POINTER$LAYOUT.withName("unmap_event"),
            Constants$root.C_POINTER$LAYOUT.withName("property_notify_event"),
            Constants$root.C_POINTER$LAYOUT.withName("selection_clear_event"),
            Constants$root.C_POINTER$LAYOUT.withName("selection_request_event"),
            Constants$root.C_POINTER$LAYOUT.withName("selection_notify_event"),
            Constants$root.C_POINTER$LAYOUT.withName("proximity_in_event"),
            Constants$root.C_POINTER$LAYOUT.withName("proximity_out_event"),
            Constants$root.C_POINTER$LAYOUT.withName("visibility_notify_event"),
            Constants$root.C_POINTER$LAYOUT.withName("window_state_event"),
            Constants$root.C_POINTER$LAYOUT.withName("damage_event"),
            Constants$root.C_POINTER$LAYOUT.withName("grab_broken_event"),
            Constants$root.C_POINTER$LAYOUT.withName("selection_get"),
            Constants$root.C_POINTER$LAYOUT.withName("selection_received"),
            Constants$root.C_POINTER$LAYOUT.withName("drag_begin"),
            Constants$root.C_POINTER$LAYOUT.withName("drag_end"),
            Constants$root.C_POINTER$LAYOUT.withName("drag_data_get"),
            Constants$root.C_POINTER$LAYOUT.withName("drag_data_delete"),
            Constants$root.C_POINTER$LAYOUT.withName("drag_leave"),
            Constants$root.C_POINTER$LAYOUT.withName("drag_motion"),
            Constants$root.C_POINTER$LAYOUT.withName("drag_drop"),
            Constants$root.C_POINTER$LAYOUT.withName("drag_data_received"),
            Constants$root.C_POINTER$LAYOUT.withName("drag_failed"),
            Constants$root.C_POINTER$LAYOUT.withName("popup_menu"),
            Constants$root.C_POINTER$LAYOUT.withName("show_help"),
            Constants$root.C_POINTER$LAYOUT.withName("get_accessible"),
            Constants$root.C_POINTER$LAYOUT.withName("screen_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("can_activate_accel"),
            Constants$root.C_POINTER$LAYOUT.withName("composited_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("query_tooltip"),
            Constants$root.C_POINTER$LAYOUT.withName("compute_expand"),
            Constants$root.C_POINTER$LAYOUT.withName("adjust_size_request"),
            Constants$root.C_POINTER$LAYOUT.withName("adjust_size_allocation"),
            Constants$root.C_POINTER$LAYOUT.withName("style_updated"),
            Constants$root.C_POINTER$LAYOUT.withName("touch_event"),
            Constants$root.C_POINTER$LAYOUT.withName("get_preferred_height_and_baseline_for_width"),
            Constants$root.C_POINTER$LAYOUT.withName("adjust_baseline_request"),
            Constants$root.C_POINTER$LAYOUT.withName("adjust_baseline_allocation"),
            Constants$root.C_POINTER$LAYOUT.withName("queue_draw_region"),
            Constants$root.C_POINTER$LAYOUT.withName("priv"),
            Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved6"),
            Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved7")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("populate_popup"),
        Constants$root.C_POINTER$LAYOUT.withName("activate"),
        Constants$root.C_POINTER$LAYOUT.withName("move_cursor"),
        Constants$root.C_POINTER$LAYOUT.withName("insert_at_cursor"),
        Constants$root.C_POINTER$LAYOUT.withName("delete_from_cursor"),
        Constants$root.C_POINTER$LAYOUT.withName("backspace"),
        Constants$root.C_POINTER$LAYOUT.withName("cut_clipboard"),
        Constants$root.C_POINTER$LAYOUT.withName("copy_clipboard"),
        Constants$root.C_POINTER$LAYOUT.withName("paste_clipboard"),
        Constants$root.C_POINTER$LAYOUT.withName("toggle_overwrite"),
        Constants$root.C_POINTER$LAYOUT.withName("get_text_area_size"),
        Constants$root.C_POINTER$LAYOUT.withName("get_frame_size"),
        Constants$root.C_POINTER$LAYOUT.withName("insert_emoji"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved1"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved2"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved3"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved4"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved5"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved6")
    ).withName("_GtkEntryClass");
    public static MemoryLayout $LAYOUT() {
        return _GtkEntryClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 824);
    }
    static final FunctionDescriptor populate_popup$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle populate_popup$MH = RuntimeHelper.downcallHandle(
        _GtkEntryClass.populate_popup$FUNC, false
    );
    public interface populate_popup {

        void apply(jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1);
        static NativeSymbol allocate(populate_popup fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(populate_popup.class, fi, _GtkEntryClass.populate_popup$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static populate_popup ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("populate_popup::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1) -> {
                try {
                    _GtkEntryClass.populate_popup$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, (jdk.incubator.foreign.Addressable)_x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle populate_popup$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("populate_popup"));
    public static VarHandle populate_popup$VH() {
        return _GtkEntryClass.populate_popup$VH;
    }
    public static MemoryAddress populate_popup$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkEntryClass.populate_popup$VH.get(seg);
    }
    public static void populate_popup$set( MemorySegment seg, MemoryAddress x) {
        _GtkEntryClass.populate_popup$VH.set(seg, x);
    }
    public static MemoryAddress populate_popup$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkEntryClass.populate_popup$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void populate_popup$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkEntryClass.populate_popup$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static populate_popup populate_popup (MemorySegment segment, ResourceScope scope) {
        return populate_popup.ofAddress(populate_popup$get(segment), scope);
    }
    static final FunctionDescriptor activate$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle activate$MH = RuntimeHelper.downcallHandle(
        _GtkEntryClass.activate$FUNC, false
    );
    public interface activate {

        void apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(activate fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(activate.class, fi, _GtkEntryClass.activate$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static activate ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("activate::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    _GtkEntryClass.activate$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle activate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("activate"));
    public static VarHandle activate$VH() {
        return _GtkEntryClass.activate$VH;
    }
    public static MemoryAddress activate$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkEntryClass.activate$VH.get(seg);
    }
    public static void activate$set( MemorySegment seg, MemoryAddress x) {
        _GtkEntryClass.activate$VH.set(seg, x);
    }
    public static MemoryAddress activate$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkEntryClass.activate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void activate$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkEntryClass.activate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static activate activate (MemorySegment segment, ResourceScope scope) {
        return activate.ofAddress(activate$get(segment), scope);
    }
    static final FunctionDescriptor move_cursor$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle move_cursor$MH = RuntimeHelper.downcallHandle(
        _GtkEntryClass.move_cursor$FUNC, false
    );
    public interface move_cursor {

        void apply(jdk.incubator.foreign.MemoryAddress _x0, int _x1, int _x2, int _x3);
        static NativeSymbol allocate(move_cursor fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(move_cursor.class, fi, _GtkEntryClass.move_cursor$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;III)V", scope);
        }
        static move_cursor ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("move_cursor::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, int _x1, int _x2, int _x3) -> {
                try {
                    _GtkEntryClass.move_cursor$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, _x1, _x2, _x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle move_cursor$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("move_cursor"));
    public static VarHandle move_cursor$VH() {
        return _GtkEntryClass.move_cursor$VH;
    }
    public static MemoryAddress move_cursor$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkEntryClass.move_cursor$VH.get(seg);
    }
    public static void move_cursor$set( MemorySegment seg, MemoryAddress x) {
        _GtkEntryClass.move_cursor$VH.set(seg, x);
    }
    public static MemoryAddress move_cursor$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkEntryClass.move_cursor$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void move_cursor$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkEntryClass.move_cursor$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static move_cursor move_cursor (MemorySegment segment, ResourceScope scope) {
        return move_cursor.ofAddress(move_cursor$get(segment), scope);
    }
    static final FunctionDescriptor insert_at_cursor$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle insert_at_cursor$MH = RuntimeHelper.downcallHandle(
        _GtkEntryClass.insert_at_cursor$FUNC, false
    );
    public interface insert_at_cursor {

        void apply(jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1);
        static NativeSymbol allocate(insert_at_cursor fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(insert_at_cursor.class, fi, _GtkEntryClass.insert_at_cursor$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static insert_at_cursor ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("insert_at_cursor::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1) -> {
                try {
                    _GtkEntryClass.insert_at_cursor$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, (jdk.incubator.foreign.Addressable)_x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle insert_at_cursor$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("insert_at_cursor"));
    public static VarHandle insert_at_cursor$VH() {
        return _GtkEntryClass.insert_at_cursor$VH;
    }
    public static MemoryAddress insert_at_cursor$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkEntryClass.insert_at_cursor$VH.get(seg);
    }
    public static void insert_at_cursor$set( MemorySegment seg, MemoryAddress x) {
        _GtkEntryClass.insert_at_cursor$VH.set(seg, x);
    }
    public static MemoryAddress insert_at_cursor$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkEntryClass.insert_at_cursor$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void insert_at_cursor$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkEntryClass.insert_at_cursor$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static insert_at_cursor insert_at_cursor (MemorySegment segment, ResourceScope scope) {
        return insert_at_cursor.ofAddress(insert_at_cursor$get(segment), scope);
    }
    static final FunctionDescriptor delete_from_cursor$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle delete_from_cursor$MH = RuntimeHelper.downcallHandle(
        _GtkEntryClass.delete_from_cursor$FUNC, false
    );
    public interface delete_from_cursor {

        void apply(jdk.incubator.foreign.MemoryAddress _x0, int _x1, int _x2);
        static NativeSymbol allocate(delete_from_cursor fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(delete_from_cursor.class, fi, _GtkEntryClass.delete_from_cursor$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;II)V", scope);
        }
        static delete_from_cursor ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("delete_from_cursor::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, int _x1, int _x2) -> {
                try {
                    _GtkEntryClass.delete_from_cursor$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, _x1, _x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle delete_from_cursor$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("delete_from_cursor"));
    public static VarHandle delete_from_cursor$VH() {
        return _GtkEntryClass.delete_from_cursor$VH;
    }
    public static MemoryAddress delete_from_cursor$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkEntryClass.delete_from_cursor$VH.get(seg);
    }
    public static void delete_from_cursor$set( MemorySegment seg, MemoryAddress x) {
        _GtkEntryClass.delete_from_cursor$VH.set(seg, x);
    }
    public static MemoryAddress delete_from_cursor$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkEntryClass.delete_from_cursor$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void delete_from_cursor$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkEntryClass.delete_from_cursor$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static delete_from_cursor delete_from_cursor (MemorySegment segment, ResourceScope scope) {
        return delete_from_cursor.ofAddress(delete_from_cursor$get(segment), scope);
    }
    static final FunctionDescriptor backspace$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle backspace$MH = RuntimeHelper.downcallHandle(
        _GtkEntryClass.backspace$FUNC, false
    );
    public interface backspace {

        void apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(backspace fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(backspace.class, fi, _GtkEntryClass.backspace$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static backspace ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("backspace::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    _GtkEntryClass.backspace$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle backspace$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("backspace"));
    public static VarHandle backspace$VH() {
        return _GtkEntryClass.backspace$VH;
    }
    public static MemoryAddress backspace$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkEntryClass.backspace$VH.get(seg);
    }
    public static void backspace$set( MemorySegment seg, MemoryAddress x) {
        _GtkEntryClass.backspace$VH.set(seg, x);
    }
    public static MemoryAddress backspace$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkEntryClass.backspace$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void backspace$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkEntryClass.backspace$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static backspace backspace (MemorySegment segment, ResourceScope scope) {
        return backspace.ofAddress(backspace$get(segment), scope);
    }
    static final FunctionDescriptor cut_clipboard$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle cut_clipboard$MH = RuntimeHelper.downcallHandle(
        _GtkEntryClass.cut_clipboard$FUNC, false
    );
    public interface cut_clipboard {

        void apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(cut_clipboard fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(cut_clipboard.class, fi, _GtkEntryClass.cut_clipboard$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static cut_clipboard ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("cut_clipboard::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    _GtkEntryClass.cut_clipboard$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle cut_clipboard$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cut_clipboard"));
    public static VarHandle cut_clipboard$VH() {
        return _GtkEntryClass.cut_clipboard$VH;
    }
    public static MemoryAddress cut_clipboard$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkEntryClass.cut_clipboard$VH.get(seg);
    }
    public static void cut_clipboard$set( MemorySegment seg, MemoryAddress x) {
        _GtkEntryClass.cut_clipboard$VH.set(seg, x);
    }
    public static MemoryAddress cut_clipboard$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkEntryClass.cut_clipboard$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cut_clipboard$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkEntryClass.cut_clipboard$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static cut_clipboard cut_clipboard (MemorySegment segment, ResourceScope scope) {
        return cut_clipboard.ofAddress(cut_clipboard$get(segment), scope);
    }
    static final FunctionDescriptor copy_clipboard$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle copy_clipboard$MH = RuntimeHelper.downcallHandle(
        _GtkEntryClass.copy_clipboard$FUNC, false
    );
    public interface copy_clipboard {

        void apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(copy_clipboard fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(copy_clipboard.class, fi, _GtkEntryClass.copy_clipboard$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static copy_clipboard ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("copy_clipboard::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    _GtkEntryClass.copy_clipboard$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle copy_clipboard$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("copy_clipboard"));
    public static VarHandle copy_clipboard$VH() {
        return _GtkEntryClass.copy_clipboard$VH;
    }
    public static MemoryAddress copy_clipboard$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkEntryClass.copy_clipboard$VH.get(seg);
    }
    public static void copy_clipboard$set( MemorySegment seg, MemoryAddress x) {
        _GtkEntryClass.copy_clipboard$VH.set(seg, x);
    }
    public static MemoryAddress copy_clipboard$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkEntryClass.copy_clipboard$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void copy_clipboard$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkEntryClass.copy_clipboard$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static copy_clipboard copy_clipboard (MemorySegment segment, ResourceScope scope) {
        return copy_clipboard.ofAddress(copy_clipboard$get(segment), scope);
    }
    static final FunctionDescriptor paste_clipboard$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle paste_clipboard$MH = RuntimeHelper.downcallHandle(
        _GtkEntryClass.paste_clipboard$FUNC, false
    );
    public interface paste_clipboard {

        void apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(paste_clipboard fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(paste_clipboard.class, fi, _GtkEntryClass.paste_clipboard$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static paste_clipboard ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("paste_clipboard::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    _GtkEntryClass.paste_clipboard$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle paste_clipboard$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("paste_clipboard"));
    public static VarHandle paste_clipboard$VH() {
        return _GtkEntryClass.paste_clipboard$VH;
    }
    public static MemoryAddress paste_clipboard$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkEntryClass.paste_clipboard$VH.get(seg);
    }
    public static void paste_clipboard$set( MemorySegment seg, MemoryAddress x) {
        _GtkEntryClass.paste_clipboard$VH.set(seg, x);
    }
    public static MemoryAddress paste_clipboard$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkEntryClass.paste_clipboard$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void paste_clipboard$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkEntryClass.paste_clipboard$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static paste_clipboard paste_clipboard (MemorySegment segment, ResourceScope scope) {
        return paste_clipboard.ofAddress(paste_clipboard$get(segment), scope);
    }
    static final FunctionDescriptor toggle_overwrite$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle toggle_overwrite$MH = RuntimeHelper.downcallHandle(
        _GtkEntryClass.toggle_overwrite$FUNC, false
    );
    public interface toggle_overwrite {

        void apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(toggle_overwrite fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(toggle_overwrite.class, fi, _GtkEntryClass.toggle_overwrite$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static toggle_overwrite ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("toggle_overwrite::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    _GtkEntryClass.toggle_overwrite$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle toggle_overwrite$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("toggle_overwrite"));
    public static VarHandle toggle_overwrite$VH() {
        return _GtkEntryClass.toggle_overwrite$VH;
    }
    public static MemoryAddress toggle_overwrite$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkEntryClass.toggle_overwrite$VH.get(seg);
    }
    public static void toggle_overwrite$set( MemorySegment seg, MemoryAddress x) {
        _GtkEntryClass.toggle_overwrite$VH.set(seg, x);
    }
    public static MemoryAddress toggle_overwrite$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkEntryClass.toggle_overwrite$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void toggle_overwrite$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkEntryClass.toggle_overwrite$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static toggle_overwrite toggle_overwrite (MemorySegment segment, ResourceScope scope) {
        return toggle_overwrite.ofAddress(toggle_overwrite$get(segment), scope);
    }
    static final FunctionDescriptor get_text_area_size$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_text_area_size$MH = RuntimeHelper.downcallHandle(
        _GtkEntryClass.get_text_area_size$FUNC, false
    );
    public interface get_text_area_size {

        void apply(jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1, jdk.incubator.foreign.MemoryAddress _x2, jdk.incubator.foreign.MemoryAddress _x3, jdk.incubator.foreign.MemoryAddress _x4);
        static NativeSymbol allocate(get_text_area_size fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_text_area_size.class, fi, _GtkEntryClass.get_text_area_size$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static get_text_area_size ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_text_area_size::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1, jdk.incubator.foreign.MemoryAddress _x2, jdk.incubator.foreign.MemoryAddress _x3, jdk.incubator.foreign.MemoryAddress _x4) -> {
                try {
                    _GtkEntryClass.get_text_area_size$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, (jdk.incubator.foreign.Addressable)_x1, (jdk.incubator.foreign.Addressable)_x2, (jdk.incubator.foreign.Addressable)_x3, (jdk.incubator.foreign.Addressable)_x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_text_area_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_text_area_size"));
    public static VarHandle get_text_area_size$VH() {
        return _GtkEntryClass.get_text_area_size$VH;
    }
    public static MemoryAddress get_text_area_size$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkEntryClass.get_text_area_size$VH.get(seg);
    }
    public static void get_text_area_size$set( MemorySegment seg, MemoryAddress x) {
        _GtkEntryClass.get_text_area_size$VH.set(seg, x);
    }
    public static MemoryAddress get_text_area_size$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkEntryClass.get_text_area_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_text_area_size$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkEntryClass.get_text_area_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_text_area_size get_text_area_size (MemorySegment segment, ResourceScope scope) {
        return get_text_area_size.ofAddress(get_text_area_size$get(segment), scope);
    }
    static final FunctionDescriptor get_frame_size$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_frame_size$MH = RuntimeHelper.downcallHandle(
        _GtkEntryClass.get_frame_size$FUNC, false
    );
    public interface get_frame_size {

        void apply(jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1, jdk.incubator.foreign.MemoryAddress _x2, jdk.incubator.foreign.MemoryAddress _x3, jdk.incubator.foreign.MemoryAddress _x4);
        static NativeSymbol allocate(get_frame_size fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_frame_size.class, fi, _GtkEntryClass.get_frame_size$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static get_frame_size ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_frame_size::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1, jdk.incubator.foreign.MemoryAddress _x2, jdk.incubator.foreign.MemoryAddress _x3, jdk.incubator.foreign.MemoryAddress _x4) -> {
                try {
                    _GtkEntryClass.get_frame_size$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, (jdk.incubator.foreign.Addressable)_x1, (jdk.incubator.foreign.Addressable)_x2, (jdk.incubator.foreign.Addressable)_x3, (jdk.incubator.foreign.Addressable)_x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_frame_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_frame_size"));
    public static VarHandle get_frame_size$VH() {
        return _GtkEntryClass.get_frame_size$VH;
    }
    public static MemoryAddress get_frame_size$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkEntryClass.get_frame_size$VH.get(seg);
    }
    public static void get_frame_size$set( MemorySegment seg, MemoryAddress x) {
        _GtkEntryClass.get_frame_size$VH.set(seg, x);
    }
    public static MemoryAddress get_frame_size$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkEntryClass.get_frame_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_frame_size$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkEntryClass.get_frame_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_frame_size get_frame_size (MemorySegment segment, ResourceScope scope) {
        return get_frame_size.ofAddress(get_frame_size$get(segment), scope);
    }
    static final FunctionDescriptor insert_emoji$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle insert_emoji$MH = RuntimeHelper.downcallHandle(
        _GtkEntryClass.insert_emoji$FUNC, false
    );
    public interface insert_emoji {

        void apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(insert_emoji fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(insert_emoji.class, fi, _GtkEntryClass.insert_emoji$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static insert_emoji ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("insert_emoji::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    _GtkEntryClass.insert_emoji$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle insert_emoji$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("insert_emoji"));
    public static VarHandle insert_emoji$VH() {
        return _GtkEntryClass.insert_emoji$VH;
    }
    public static MemoryAddress insert_emoji$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkEntryClass.insert_emoji$VH.get(seg);
    }
    public static void insert_emoji$set( MemorySegment seg, MemoryAddress x) {
        _GtkEntryClass.insert_emoji$VH.set(seg, x);
    }
    public static MemoryAddress insert_emoji$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkEntryClass.insert_emoji$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void insert_emoji$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkEntryClass.insert_emoji$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static insert_emoji insert_emoji (MemorySegment segment, ResourceScope scope) {
        return insert_emoji.ofAddress(insert_emoji$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_reserved1$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved1$MH = RuntimeHelper.downcallHandle(
        _GtkEntryClass._gtk_reserved1$FUNC, false
    );
    public interface _gtk_reserved1 {

        void apply();
        static NativeSymbol allocate(_gtk_reserved1 fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(_gtk_reserved1.class, fi, _GtkEntryClass._gtk_reserved1$FUNC, "()V", scope);
        }
        static _gtk_reserved1 ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("_gtk_reserved1::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return () -> {
                try {
                    _GtkEntryClass._gtk_reserved1$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved1"));
    public static VarHandle _gtk_reserved1$VH() {
        return _GtkEntryClass._gtk_reserved1$VH;
    }
    public static MemoryAddress _gtk_reserved1$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkEntryClass._gtk_reserved1$VH.get(seg);
    }
    public static void _gtk_reserved1$set( MemorySegment seg, MemoryAddress x) {
        _GtkEntryClass._gtk_reserved1$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved1$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkEntryClass._gtk_reserved1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved1$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkEntryClass._gtk_reserved1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved1 _gtk_reserved1 (MemorySegment segment, ResourceScope scope) {
        return _gtk_reserved1.ofAddress(_gtk_reserved1$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_reserved2$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved2$MH = RuntimeHelper.downcallHandle(
        _GtkEntryClass._gtk_reserved2$FUNC, false
    );
    public interface _gtk_reserved2 {

        void apply();
        static NativeSymbol allocate(_gtk_reserved2 fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(_gtk_reserved2.class, fi, _GtkEntryClass._gtk_reserved2$FUNC, "()V", scope);
        }
        static _gtk_reserved2 ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("_gtk_reserved2::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return () -> {
                try {
                    _GtkEntryClass._gtk_reserved2$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved2"));
    public static VarHandle _gtk_reserved2$VH() {
        return _GtkEntryClass._gtk_reserved2$VH;
    }
    public static MemoryAddress _gtk_reserved2$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkEntryClass._gtk_reserved2$VH.get(seg);
    }
    public static void _gtk_reserved2$set( MemorySegment seg, MemoryAddress x) {
        _GtkEntryClass._gtk_reserved2$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved2$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkEntryClass._gtk_reserved2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved2$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkEntryClass._gtk_reserved2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved2 _gtk_reserved2 (MemorySegment segment, ResourceScope scope) {
        return _gtk_reserved2.ofAddress(_gtk_reserved2$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_reserved3$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved3$MH = RuntimeHelper.downcallHandle(
        _GtkEntryClass._gtk_reserved3$FUNC, false
    );
    public interface _gtk_reserved3 {

        void apply();
        static NativeSymbol allocate(_gtk_reserved3 fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(_gtk_reserved3.class, fi, _GtkEntryClass._gtk_reserved3$FUNC, "()V", scope);
        }
        static _gtk_reserved3 ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("_gtk_reserved3::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return () -> {
                try {
                    _GtkEntryClass._gtk_reserved3$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved3$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved3"));
    public static VarHandle _gtk_reserved3$VH() {
        return _GtkEntryClass._gtk_reserved3$VH;
    }
    public static MemoryAddress _gtk_reserved3$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkEntryClass._gtk_reserved3$VH.get(seg);
    }
    public static void _gtk_reserved3$set( MemorySegment seg, MemoryAddress x) {
        _GtkEntryClass._gtk_reserved3$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved3$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkEntryClass._gtk_reserved3$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved3$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkEntryClass._gtk_reserved3$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved3 _gtk_reserved3 (MemorySegment segment, ResourceScope scope) {
        return _gtk_reserved3.ofAddress(_gtk_reserved3$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_reserved4$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved4$MH = RuntimeHelper.downcallHandle(
        _GtkEntryClass._gtk_reserved4$FUNC, false
    );
    public interface _gtk_reserved4 {

        void apply();
        static NativeSymbol allocate(_gtk_reserved4 fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(_gtk_reserved4.class, fi, _GtkEntryClass._gtk_reserved4$FUNC, "()V", scope);
        }
        static _gtk_reserved4 ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("_gtk_reserved4::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return () -> {
                try {
                    _GtkEntryClass._gtk_reserved4$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved4$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved4"));
    public static VarHandle _gtk_reserved4$VH() {
        return _GtkEntryClass._gtk_reserved4$VH;
    }
    public static MemoryAddress _gtk_reserved4$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkEntryClass._gtk_reserved4$VH.get(seg);
    }
    public static void _gtk_reserved4$set( MemorySegment seg, MemoryAddress x) {
        _GtkEntryClass._gtk_reserved4$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved4$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkEntryClass._gtk_reserved4$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved4$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkEntryClass._gtk_reserved4$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved4 _gtk_reserved4 (MemorySegment segment, ResourceScope scope) {
        return _gtk_reserved4.ofAddress(_gtk_reserved4$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_reserved5$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved5$MH = RuntimeHelper.downcallHandle(
        _GtkEntryClass._gtk_reserved5$FUNC, false
    );
    public interface _gtk_reserved5 {

        void apply();
        static NativeSymbol allocate(_gtk_reserved5 fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(_gtk_reserved5.class, fi, _GtkEntryClass._gtk_reserved5$FUNC, "()V", scope);
        }
        static _gtk_reserved5 ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("_gtk_reserved5::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return () -> {
                try {
                    _GtkEntryClass._gtk_reserved5$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved5$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved5"));
    public static VarHandle _gtk_reserved5$VH() {
        return _GtkEntryClass._gtk_reserved5$VH;
    }
    public static MemoryAddress _gtk_reserved5$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkEntryClass._gtk_reserved5$VH.get(seg);
    }
    public static void _gtk_reserved5$set( MemorySegment seg, MemoryAddress x) {
        _GtkEntryClass._gtk_reserved5$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved5$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkEntryClass._gtk_reserved5$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved5$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkEntryClass._gtk_reserved5$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved5 _gtk_reserved5 (MemorySegment segment, ResourceScope scope) {
        return _gtk_reserved5.ofAddress(_gtk_reserved5$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_reserved6$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved6$MH = RuntimeHelper.downcallHandle(
        _GtkEntryClass._gtk_reserved6$FUNC, false
    );
    public interface _gtk_reserved6 {

        void apply();
        static NativeSymbol allocate(_gtk_reserved6 fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(_gtk_reserved6.class, fi, _GtkEntryClass._gtk_reserved6$FUNC, "()V", scope);
        }
        static _gtk_reserved6 ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("_gtk_reserved6::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return () -> {
                try {
                    _GtkEntryClass._gtk_reserved6$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved6$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved6"));
    public static VarHandle _gtk_reserved6$VH() {
        return _GtkEntryClass._gtk_reserved6$VH;
    }
    public static MemoryAddress _gtk_reserved6$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkEntryClass._gtk_reserved6$VH.get(seg);
    }
    public static void _gtk_reserved6$set( MemorySegment seg, MemoryAddress x) {
        _GtkEntryClass._gtk_reserved6$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved6$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkEntryClass._gtk_reserved6$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved6$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkEntryClass._gtk_reserved6$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved6 _gtk_reserved6 (MemorySegment segment, ResourceScope scope) {
        return _gtk_reserved6.ofAddress(_gtk_reserved6$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


