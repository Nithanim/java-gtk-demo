// Generated by jextract

package gtk3;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
class constants$1113 {

    static final FunctionDescriptor clearerr_unlocked$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle clearerr_unlocked$MH = RuntimeHelper.downcallHandle(
        "clearerr_unlocked",
        constants$1113.clearerr_unlocked$FUNC, false
    );
    static final FunctionDescriptor feof_unlocked$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle feof_unlocked$MH = RuntimeHelper.downcallHandle(
        "feof_unlocked",
        constants$1113.feof_unlocked$FUNC, false
    );
    static final FunctionDescriptor ferror_unlocked$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ferror_unlocked$MH = RuntimeHelper.downcallHandle(
        "ferror_unlocked",
        constants$1113.ferror_unlocked$FUNC, false
    );
    static final FunctionDescriptor perror$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle perror$MH = RuntimeHelper.downcallHandle(
        "perror",
        constants$1113.perror$FUNC, false
    );
    static final FunctionDescriptor fileno$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle fileno$MH = RuntimeHelper.downcallHandle(
        "fileno",
        constants$1113.fileno$FUNC, false
    );
    static final FunctionDescriptor fileno_unlocked$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle fileno_unlocked$MH = RuntimeHelper.downcallHandle(
        "fileno_unlocked",
        constants$1113.fileno_unlocked$FUNC, false
    );
}


