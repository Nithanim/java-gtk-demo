// Generated by jextract

package gtk3;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public interface GObjectGetPropertyFunc {

    void apply(jdk.incubator.foreign.MemoryAddress object, int property_id, jdk.incubator.foreign.MemoryAddress value, jdk.incubator.foreign.MemoryAddress pspec);
    static NativeSymbol allocate(GObjectGetPropertyFunc fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(GObjectGetPropertyFunc.class, fi, constants$465.GObjectGetPropertyFunc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
    }
    static GObjectGetPropertyFunc ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("GObjectGetPropertyFunc::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress object, int property_id, jdk.incubator.foreign.MemoryAddress value, jdk.incubator.foreign.MemoryAddress pspec) -> {
            try {
                constants$465.GObjectGetPropertyFunc$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)object, property_id, (jdk.incubator.foreign.Addressable)value, (jdk.incubator.foreign.Addressable)pspec);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


