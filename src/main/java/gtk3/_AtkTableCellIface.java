// Generated by jextract

package gtk3;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _AtkTableCellIface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("parent"),
        Constants$root.C_POINTER$LAYOUT.withName("get_column_span"),
        Constants$root.C_POINTER$LAYOUT.withName("get_column_header_cells"),
        Constants$root.C_POINTER$LAYOUT.withName("get_position"),
        Constants$root.C_POINTER$LAYOUT.withName("get_row_span"),
        Constants$root.C_POINTER$LAYOUT.withName("get_row_header_cells"),
        Constants$root.C_POINTER$LAYOUT.withName("get_row_column_span"),
        Constants$root.C_POINTER$LAYOUT.withName("get_table")
    ).withName("_AtkTableCellIface");
    public static MemoryLayout $LAYOUT() {
        return _AtkTableCellIface.$struct$LAYOUT;
    }
    public static MemorySegment parent$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor get_column_span$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_column_span$MH = RuntimeHelper.downcallHandle(
        _AtkTableCellIface.get_column_span$FUNC, false
    );
    public interface get_column_span {

        int apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(get_column_span fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_column_span.class, fi, _AtkTableCellIface.get_column_span$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_column_span ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_column_span::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    return (int)_AtkTableCellIface.get_column_span$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_column_span$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_column_span"));
    public static VarHandle get_column_span$VH() {
        return _AtkTableCellIface.get_column_span$VH;
    }
    public static MemoryAddress get_column_span$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableCellIface.get_column_span$VH.get(seg);
    }
    public static void get_column_span$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableCellIface.get_column_span$VH.set(seg, x);
    }
    public static MemoryAddress get_column_span$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableCellIface.get_column_span$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_column_span$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableCellIface.get_column_span$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_column_span get_column_span (MemorySegment segment, ResourceScope scope) {
        return get_column_span.ofAddress(get_column_span$get(segment), scope);
    }
    static final FunctionDescriptor get_column_header_cells$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_column_header_cells$MH = RuntimeHelper.downcallHandle(
        _AtkTableCellIface.get_column_header_cells$FUNC, false
    );
    public interface get_column_header_cells {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(get_column_header_cells fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_column_header_cells.class, fi, _AtkTableCellIface.get_column_header_cells$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_column_header_cells ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_column_header_cells::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_AtkTableCellIface.get_column_header_cells$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_column_header_cells$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_column_header_cells"));
    public static VarHandle get_column_header_cells$VH() {
        return _AtkTableCellIface.get_column_header_cells$VH;
    }
    public static MemoryAddress get_column_header_cells$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableCellIface.get_column_header_cells$VH.get(seg);
    }
    public static void get_column_header_cells$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableCellIface.get_column_header_cells$VH.set(seg, x);
    }
    public static MemoryAddress get_column_header_cells$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableCellIface.get_column_header_cells$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_column_header_cells$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableCellIface.get_column_header_cells$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_column_header_cells get_column_header_cells (MemorySegment segment, ResourceScope scope) {
        return get_column_header_cells.ofAddress(get_column_header_cells$get(segment), scope);
    }
    static final FunctionDescriptor get_position$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_position$MH = RuntimeHelper.downcallHandle(
        _AtkTableCellIface.get_position$FUNC, false
    );
    public interface get_position {

        int apply(jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1, jdk.incubator.foreign.MemoryAddress _x2);
        static NativeSymbol allocate(get_position fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_position.class, fi, _AtkTableCellIface.get_position$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_position ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_position::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1, jdk.incubator.foreign.MemoryAddress _x2) -> {
                try {
                    return (int)_AtkTableCellIface.get_position$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, (jdk.incubator.foreign.Addressable)_x1, (jdk.incubator.foreign.Addressable)_x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_position$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_position"));
    public static VarHandle get_position$VH() {
        return _AtkTableCellIface.get_position$VH;
    }
    public static MemoryAddress get_position$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableCellIface.get_position$VH.get(seg);
    }
    public static void get_position$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableCellIface.get_position$VH.set(seg, x);
    }
    public static MemoryAddress get_position$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableCellIface.get_position$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_position$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableCellIface.get_position$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_position get_position (MemorySegment segment, ResourceScope scope) {
        return get_position.ofAddress(get_position$get(segment), scope);
    }
    static final FunctionDescriptor get_row_span$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_row_span$MH = RuntimeHelper.downcallHandle(
        _AtkTableCellIface.get_row_span$FUNC, false
    );
    public interface get_row_span {

        int apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(get_row_span fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_row_span.class, fi, _AtkTableCellIface.get_row_span$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_row_span ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_row_span::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    return (int)_AtkTableCellIface.get_row_span$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_row_span$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_row_span"));
    public static VarHandle get_row_span$VH() {
        return _AtkTableCellIface.get_row_span$VH;
    }
    public static MemoryAddress get_row_span$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableCellIface.get_row_span$VH.get(seg);
    }
    public static void get_row_span$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableCellIface.get_row_span$VH.set(seg, x);
    }
    public static MemoryAddress get_row_span$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableCellIface.get_row_span$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_row_span$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableCellIface.get_row_span$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_row_span get_row_span (MemorySegment segment, ResourceScope scope) {
        return get_row_span.ofAddress(get_row_span$get(segment), scope);
    }
    static final FunctionDescriptor get_row_header_cells$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_row_header_cells$MH = RuntimeHelper.downcallHandle(
        _AtkTableCellIface.get_row_header_cells$FUNC, false
    );
    public interface get_row_header_cells {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(get_row_header_cells fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_row_header_cells.class, fi, _AtkTableCellIface.get_row_header_cells$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_row_header_cells ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_row_header_cells::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_AtkTableCellIface.get_row_header_cells$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_row_header_cells$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_row_header_cells"));
    public static VarHandle get_row_header_cells$VH() {
        return _AtkTableCellIface.get_row_header_cells$VH;
    }
    public static MemoryAddress get_row_header_cells$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableCellIface.get_row_header_cells$VH.get(seg);
    }
    public static void get_row_header_cells$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableCellIface.get_row_header_cells$VH.set(seg, x);
    }
    public static MemoryAddress get_row_header_cells$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableCellIface.get_row_header_cells$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_row_header_cells$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableCellIface.get_row_header_cells$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_row_header_cells get_row_header_cells (MemorySegment segment, ResourceScope scope) {
        return get_row_header_cells.ofAddress(get_row_header_cells$get(segment), scope);
    }
    static final FunctionDescriptor get_row_column_span$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_row_column_span$MH = RuntimeHelper.downcallHandle(
        _AtkTableCellIface.get_row_column_span$FUNC, false
    );
    public interface get_row_column_span {

        int apply(jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1, jdk.incubator.foreign.MemoryAddress _x2, jdk.incubator.foreign.MemoryAddress _x3, jdk.incubator.foreign.MemoryAddress _x4);
        static NativeSymbol allocate(get_row_column_span fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_row_column_span.class, fi, _AtkTableCellIface.get_row_column_span$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_row_column_span ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_row_column_span::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1, jdk.incubator.foreign.MemoryAddress _x2, jdk.incubator.foreign.MemoryAddress _x3, jdk.incubator.foreign.MemoryAddress _x4) -> {
                try {
                    return (int)_AtkTableCellIface.get_row_column_span$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, (jdk.incubator.foreign.Addressable)_x1, (jdk.incubator.foreign.Addressable)_x2, (jdk.incubator.foreign.Addressable)_x3, (jdk.incubator.foreign.Addressable)_x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_row_column_span$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_row_column_span"));
    public static VarHandle get_row_column_span$VH() {
        return _AtkTableCellIface.get_row_column_span$VH;
    }
    public static MemoryAddress get_row_column_span$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableCellIface.get_row_column_span$VH.get(seg);
    }
    public static void get_row_column_span$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableCellIface.get_row_column_span$VH.set(seg, x);
    }
    public static MemoryAddress get_row_column_span$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableCellIface.get_row_column_span$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_row_column_span$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableCellIface.get_row_column_span$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_row_column_span get_row_column_span (MemorySegment segment, ResourceScope scope) {
        return get_row_column_span.ofAddress(get_row_column_span$get(segment), scope);
    }
    static final FunctionDescriptor get_table$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_table$MH = RuntimeHelper.downcallHandle(
        _AtkTableCellIface.get_table$FUNC, false
    );
    public interface get_table {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(get_table fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_table.class, fi, _AtkTableCellIface.get_table$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_table ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_table::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_AtkTableCellIface.get_table$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_table$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_table"));
    public static VarHandle get_table$VH() {
        return _AtkTableCellIface.get_table$VH;
    }
    public static MemoryAddress get_table$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableCellIface.get_table$VH.get(seg);
    }
    public static void get_table$set( MemorySegment seg, MemoryAddress x) {
        _AtkTableCellIface.get_table$VH.set(seg, x);
    }
    public static MemoryAddress get_table$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkTableCellIface.get_table$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_table$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTableCellIface.get_table$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_table get_table (MemorySegment segment, ResourceScope scope) {
        return get_table.ofAddress(get_table$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


