// Generated by jextract

package gtk3;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _GtkColorChooserInterface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("base_interface"),
        Constants$root.C_POINTER$LAYOUT.withName("get_rgba"),
        Constants$root.C_POINTER$LAYOUT.withName("set_rgba"),
        Constants$root.C_POINTER$LAYOUT.withName("add_palette"),
        Constants$root.C_POINTER$LAYOUT.withName("color_activated"),
        MemoryLayout.sequenceLayout(12, Constants$root.C_POINTER$LAYOUT).withName("padding")
    ).withName("_GtkColorChooserInterface");
    public static MemoryLayout $LAYOUT() {
        return _GtkColorChooserInterface.$struct$LAYOUT;
    }
    public static MemorySegment base_interface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor get_rgba$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_rgba$MH = RuntimeHelper.downcallHandle(
        _GtkColorChooserInterface.get_rgba$FUNC, false
    );
    public interface get_rgba {

        void apply(jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1);
        static NativeSymbol allocate(get_rgba fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_rgba.class, fi, _GtkColorChooserInterface.get_rgba$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static get_rgba ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_rgba::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1) -> {
                try {
                    _GtkColorChooserInterface.get_rgba$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, (jdk.incubator.foreign.Addressable)_x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_rgba$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_rgba"));
    public static VarHandle get_rgba$VH() {
        return _GtkColorChooserInterface.get_rgba$VH;
    }
    public static MemoryAddress get_rgba$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkColorChooserInterface.get_rgba$VH.get(seg);
    }
    public static void get_rgba$set( MemorySegment seg, MemoryAddress x) {
        _GtkColorChooserInterface.get_rgba$VH.set(seg, x);
    }
    public static MemoryAddress get_rgba$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkColorChooserInterface.get_rgba$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_rgba$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkColorChooserInterface.get_rgba$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_rgba get_rgba (MemorySegment segment, ResourceScope scope) {
        return get_rgba.ofAddress(get_rgba$get(segment), scope);
    }
    static final FunctionDescriptor set_rgba$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_rgba$MH = RuntimeHelper.downcallHandle(
        _GtkColorChooserInterface.set_rgba$FUNC, false
    );
    public interface set_rgba {

        void apply(jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1);
        static NativeSymbol allocate(set_rgba fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(set_rgba.class, fi, _GtkColorChooserInterface.set_rgba$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static set_rgba ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("set_rgba::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1) -> {
                try {
                    _GtkColorChooserInterface.set_rgba$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, (jdk.incubator.foreign.Addressable)_x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_rgba$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_rgba"));
    public static VarHandle set_rgba$VH() {
        return _GtkColorChooserInterface.set_rgba$VH;
    }
    public static MemoryAddress set_rgba$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkColorChooserInterface.set_rgba$VH.get(seg);
    }
    public static void set_rgba$set( MemorySegment seg, MemoryAddress x) {
        _GtkColorChooserInterface.set_rgba$VH.set(seg, x);
    }
    public static MemoryAddress set_rgba$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkColorChooserInterface.set_rgba$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_rgba$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkColorChooserInterface.set_rgba$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_rgba set_rgba (MemorySegment segment, ResourceScope scope) {
        return set_rgba.ofAddress(set_rgba$get(segment), scope);
    }
    static final FunctionDescriptor add_palette$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle add_palette$MH = RuntimeHelper.downcallHandle(
        _GtkColorChooserInterface.add_palette$FUNC, false
    );
    public interface add_palette {

        void apply(jdk.incubator.foreign.MemoryAddress _x0, int _x1, int _x2, int _x3, jdk.incubator.foreign.MemoryAddress _x4);
        static NativeSymbol allocate(add_palette fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(add_palette.class, fi, _GtkColorChooserInterface.add_palette$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static add_palette ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("add_palette::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, int _x1, int _x2, int _x3, jdk.incubator.foreign.MemoryAddress _x4) -> {
                try {
                    _GtkColorChooserInterface.add_palette$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, _x1, _x2, _x3, (jdk.incubator.foreign.Addressable)_x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle add_palette$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("add_palette"));
    public static VarHandle add_palette$VH() {
        return _GtkColorChooserInterface.add_palette$VH;
    }
    public static MemoryAddress add_palette$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkColorChooserInterface.add_palette$VH.get(seg);
    }
    public static void add_palette$set( MemorySegment seg, MemoryAddress x) {
        _GtkColorChooserInterface.add_palette$VH.set(seg, x);
    }
    public static MemoryAddress add_palette$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkColorChooserInterface.add_palette$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void add_palette$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkColorChooserInterface.add_palette$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static add_palette add_palette (MemorySegment segment, ResourceScope scope) {
        return add_palette.ofAddress(add_palette$get(segment), scope);
    }
    static final FunctionDescriptor color_activated$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle color_activated$MH = RuntimeHelper.downcallHandle(
        _GtkColorChooserInterface.color_activated$FUNC, false
    );
    public interface color_activated {

        void apply(jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1);
        static NativeSymbol allocate(color_activated fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(color_activated.class, fi, _GtkColorChooserInterface.color_activated$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static color_activated ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("color_activated::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1) -> {
                try {
                    _GtkColorChooserInterface.color_activated$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, (jdk.incubator.foreign.Addressable)_x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle color_activated$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("color_activated"));
    public static VarHandle color_activated$VH() {
        return _GtkColorChooserInterface.color_activated$VH;
    }
    public static MemoryAddress color_activated$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkColorChooserInterface.color_activated$VH.get(seg);
    }
    public static void color_activated$set( MemorySegment seg, MemoryAddress x) {
        _GtkColorChooserInterface.color_activated$VH.set(seg, x);
    }
    public static MemoryAddress color_activated$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkColorChooserInterface.color_activated$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void color_activated$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkColorChooserInterface.color_activated$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static color_activated color_activated (MemorySegment segment, ResourceScope scope) {
        return color_activated.ofAddress(color_activated$get(segment), scope);
    }
    public static MemorySegment padding$slice(MemorySegment seg) {
        return seg.asSlice(48, 96);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


