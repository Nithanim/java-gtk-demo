// Generated by jextract

package gtk3;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public interface AtkKeySnoopFunc {

    int apply(jdk.incubator.foreign.MemoryAddress event, jdk.incubator.foreign.MemoryAddress user_data);
    static NativeSymbol allocate(AtkKeySnoopFunc fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(AtkKeySnoopFunc.class, fi, constants$1347.AtkKeySnoopFunc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
    }
    static AtkKeySnoopFunc ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("AtkKeySnoopFunc::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress event, jdk.incubator.foreign.MemoryAddress user_data) -> {
            try {
                return (int)constants$1348.AtkKeySnoopFunc$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)event, (jdk.incubator.foreign.Addressable)user_data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


