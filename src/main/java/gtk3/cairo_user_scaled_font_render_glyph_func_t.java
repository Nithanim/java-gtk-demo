// Generated by jextract

package gtk3;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public interface cairo_user_scaled_font_render_glyph_func_t {

    int apply(jdk.incubator.foreign.MemoryAddress scaled_font, long glyph, jdk.incubator.foreign.MemoryAddress cr, jdk.incubator.foreign.MemoryAddress extents);
    static NativeSymbol allocate(cairo_user_scaled_font_render_glyph_func_t fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(cairo_user_scaled_font_render_glyph_func_t.class, fi, constants$1143.cairo_user_scaled_font_render_glyph_func_t$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
    }
    static cairo_user_scaled_font_render_glyph_func_t ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("cairo_user_scaled_font_render_glyph_func_t::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress scaled_font, long glyph, jdk.incubator.foreign.MemoryAddress cr, jdk.incubator.foreign.MemoryAddress extents) -> {
            try {
                return (int)constants$1143.cairo_user_scaled_font_render_glyph_func_t$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)scaled_font, glyph, (jdk.incubator.foreign.Addressable)cr, (jdk.incubator.foreign.Addressable)extents);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


