// Generated by jextract

package gtk3;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _GtkStyleProviderIface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("g_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("get_style"),
        Constants$root.C_POINTER$LAYOUT.withName("get_style_property"),
        Constants$root.C_POINTER$LAYOUT.withName("get_icon_factory")
    ).withName("_GtkStyleProviderIface");
    public static MemoryLayout $LAYOUT() {
        return _GtkStyleProviderIface.$struct$LAYOUT;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor get_style$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_style$MH = RuntimeHelper.downcallHandle(
        _GtkStyleProviderIface.get_style$FUNC, false
    );
    public interface get_style {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1);
        static NativeSymbol allocate(get_style fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_style.class, fi, _GtkStyleProviderIface.get_style$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_style ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_style::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_GtkStyleProviderIface.get_style$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, (jdk.incubator.foreign.Addressable)_x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_style$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_style"));
    public static VarHandle get_style$VH() {
        return _GtkStyleProviderIface.get_style$VH;
    }
    public static MemoryAddress get_style$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkStyleProviderIface.get_style$VH.get(seg);
    }
    public static void get_style$set( MemorySegment seg, MemoryAddress x) {
        _GtkStyleProviderIface.get_style$VH.set(seg, x);
    }
    public static MemoryAddress get_style$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkStyleProviderIface.get_style$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_style$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkStyleProviderIface.get_style$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_style get_style (MemorySegment segment, ResourceScope scope) {
        return get_style.ofAddress(get_style$get(segment), scope);
    }
    static final FunctionDescriptor get_style_property$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_style_property$MH = RuntimeHelper.downcallHandle(
        _GtkStyleProviderIface.get_style_property$FUNC, false
    );
    public interface get_style_property {

        int apply(jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1, int _x2, jdk.incubator.foreign.MemoryAddress _x3, jdk.incubator.foreign.MemoryAddress _x4);
        static NativeSymbol allocate(get_style_property fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_style_property.class, fi, _GtkStyleProviderIface.get_style_property$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_style_property ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_style_property::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1, int _x2, jdk.incubator.foreign.MemoryAddress _x3, jdk.incubator.foreign.MemoryAddress _x4) -> {
                try {
                    return (int)_GtkStyleProviderIface.get_style_property$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, (jdk.incubator.foreign.Addressable)_x1, _x2, (jdk.incubator.foreign.Addressable)_x3, (jdk.incubator.foreign.Addressable)_x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_style_property$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_style_property"));
    public static VarHandle get_style_property$VH() {
        return _GtkStyleProviderIface.get_style_property$VH;
    }
    public static MemoryAddress get_style_property$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkStyleProviderIface.get_style_property$VH.get(seg);
    }
    public static void get_style_property$set( MemorySegment seg, MemoryAddress x) {
        _GtkStyleProviderIface.get_style_property$VH.set(seg, x);
    }
    public static MemoryAddress get_style_property$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkStyleProviderIface.get_style_property$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_style_property$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkStyleProviderIface.get_style_property$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_style_property get_style_property (MemorySegment segment, ResourceScope scope) {
        return get_style_property.ofAddress(get_style_property$get(segment), scope);
    }
    static final FunctionDescriptor get_icon_factory$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_icon_factory$MH = RuntimeHelper.downcallHandle(
        _GtkStyleProviderIface.get_icon_factory$FUNC, false
    );
    public interface get_icon_factory {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1);
        static NativeSymbol allocate(get_icon_factory fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_icon_factory.class, fi, _GtkStyleProviderIface.get_icon_factory$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_icon_factory ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_icon_factory::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_GtkStyleProviderIface.get_icon_factory$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, (jdk.incubator.foreign.Addressable)_x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_icon_factory$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_icon_factory"));
    public static VarHandle get_icon_factory$VH() {
        return _GtkStyleProviderIface.get_icon_factory$VH;
    }
    public static MemoryAddress get_icon_factory$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkStyleProviderIface.get_icon_factory$VH.get(seg);
    }
    public static void get_icon_factory$set( MemorySegment seg, MemoryAddress x) {
        _GtkStyleProviderIface.get_icon_factory$VH.set(seg, x);
    }
    public static MemoryAddress get_icon_factory$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkStyleProviderIface.get_icon_factory$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_icon_factory$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkStyleProviderIface.get_icon_factory$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_icon_factory get_icon_factory (MemorySegment segment, ResourceScope scope) {
        return get_icon_factory.ofAddress(get_icon_factory$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


