// Generated by jextract

package gtk3;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public interface GDBusSignalCallback {

    void apply(jdk.incubator.foreign.MemoryAddress connection, jdk.incubator.foreign.MemoryAddress sender_name, jdk.incubator.foreign.MemoryAddress object_path, jdk.incubator.foreign.MemoryAddress interface_name, jdk.incubator.foreign.MemoryAddress signal_name, jdk.incubator.foreign.MemoryAddress parameters, jdk.incubator.foreign.MemoryAddress user_data);
    static NativeSymbol allocate(GDBusSignalCallback fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(GDBusSignalCallback.class, fi, constants$597.GDBusSignalCallback$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
    }
    static GDBusSignalCallback ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("GDBusSignalCallback::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress connection, jdk.incubator.foreign.MemoryAddress sender_name, jdk.incubator.foreign.MemoryAddress object_path, jdk.incubator.foreign.MemoryAddress interface_name, jdk.incubator.foreign.MemoryAddress signal_name, jdk.incubator.foreign.MemoryAddress parameters, jdk.incubator.foreign.MemoryAddress user_data) -> {
            try {
                constants$597.GDBusSignalCallback$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)connection, (jdk.incubator.foreign.Addressable)sender_name, (jdk.incubator.foreign.Addressable)object_path, (jdk.incubator.foreign.Addressable)interface_name, (jdk.incubator.foreign.Addressable)signal_name, (jdk.incubator.foreign.Addressable)parameters, (jdk.incubator.foreign.Addressable)user_data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


