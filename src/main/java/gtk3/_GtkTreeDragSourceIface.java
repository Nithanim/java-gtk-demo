// Generated by jextract

package gtk3;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _GtkTreeDragSourceIface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("g_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("row_draggable"),
        Constants$root.C_POINTER$LAYOUT.withName("drag_data_get"),
        Constants$root.C_POINTER$LAYOUT.withName("drag_data_delete")
    ).withName("_GtkTreeDragSourceIface");
    public static MemoryLayout $LAYOUT() {
        return _GtkTreeDragSourceIface.$struct$LAYOUT;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor row_draggable$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle row_draggable$MH = RuntimeHelper.downcallHandle(
        _GtkTreeDragSourceIface.row_draggable$FUNC, false
    );
    public interface row_draggable {

        int apply(jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1);
        static NativeSymbol allocate(row_draggable fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(row_draggable.class, fi, _GtkTreeDragSourceIface.row_draggable$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static row_draggable ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("row_draggable::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1) -> {
                try {
                    return (int)_GtkTreeDragSourceIface.row_draggable$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, (jdk.incubator.foreign.Addressable)_x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle row_draggable$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("row_draggable"));
    public static VarHandle row_draggable$VH() {
        return _GtkTreeDragSourceIface.row_draggable$VH;
    }
    public static MemoryAddress row_draggable$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkTreeDragSourceIface.row_draggable$VH.get(seg);
    }
    public static void row_draggable$set( MemorySegment seg, MemoryAddress x) {
        _GtkTreeDragSourceIface.row_draggable$VH.set(seg, x);
    }
    public static MemoryAddress row_draggable$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkTreeDragSourceIface.row_draggable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void row_draggable$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkTreeDragSourceIface.row_draggable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static row_draggable row_draggable (MemorySegment segment, ResourceScope scope) {
        return row_draggable.ofAddress(row_draggable$get(segment), scope);
    }
    static final FunctionDescriptor drag_data_get$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle drag_data_get$MH = RuntimeHelper.downcallHandle(
        _GtkTreeDragSourceIface.drag_data_get$FUNC, false
    );
    public interface drag_data_get {

        int apply(jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1, jdk.incubator.foreign.MemoryAddress _x2);
        static NativeSymbol allocate(drag_data_get fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(drag_data_get.class, fi, _GtkTreeDragSourceIface.drag_data_get$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static drag_data_get ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("drag_data_get::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1, jdk.incubator.foreign.MemoryAddress _x2) -> {
                try {
                    return (int)_GtkTreeDragSourceIface.drag_data_get$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, (jdk.incubator.foreign.Addressable)_x1, (jdk.incubator.foreign.Addressable)_x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle drag_data_get$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("drag_data_get"));
    public static VarHandle drag_data_get$VH() {
        return _GtkTreeDragSourceIface.drag_data_get$VH;
    }
    public static MemoryAddress drag_data_get$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkTreeDragSourceIface.drag_data_get$VH.get(seg);
    }
    public static void drag_data_get$set( MemorySegment seg, MemoryAddress x) {
        _GtkTreeDragSourceIface.drag_data_get$VH.set(seg, x);
    }
    public static MemoryAddress drag_data_get$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkTreeDragSourceIface.drag_data_get$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void drag_data_get$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkTreeDragSourceIface.drag_data_get$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static drag_data_get drag_data_get (MemorySegment segment, ResourceScope scope) {
        return drag_data_get.ofAddress(drag_data_get$get(segment), scope);
    }
    static final FunctionDescriptor drag_data_delete$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle drag_data_delete$MH = RuntimeHelper.downcallHandle(
        _GtkTreeDragSourceIface.drag_data_delete$FUNC, false
    );
    public interface drag_data_delete {

        int apply(jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1);
        static NativeSymbol allocate(drag_data_delete fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(drag_data_delete.class, fi, _GtkTreeDragSourceIface.drag_data_delete$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static drag_data_delete ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("drag_data_delete::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1) -> {
                try {
                    return (int)_GtkTreeDragSourceIface.drag_data_delete$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, (jdk.incubator.foreign.Addressable)_x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle drag_data_delete$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("drag_data_delete"));
    public static VarHandle drag_data_delete$VH() {
        return _GtkTreeDragSourceIface.drag_data_delete$VH;
    }
    public static MemoryAddress drag_data_delete$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkTreeDragSourceIface.drag_data_delete$VH.get(seg);
    }
    public static void drag_data_delete$set( MemorySegment seg, MemoryAddress x) {
        _GtkTreeDragSourceIface.drag_data_delete$VH.set(seg, x);
    }
    public static MemoryAddress drag_data_delete$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GtkTreeDragSourceIface.drag_data_delete$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void drag_data_delete$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkTreeDragSourceIface.drag_data_delete$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static drag_data_delete drag_data_delete (MemorySegment segment, ResourceScope scope) {
        return drag_data_delete.ofAddress(drag_data_delete$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


