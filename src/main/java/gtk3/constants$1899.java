// Generated by jextract

package gtk3;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
class constants$1899 {

    static final FunctionDescriptor GtkPrintSettingsFunc$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GtkPrintSettingsFunc$MH = RuntimeHelper.downcallHandle(
        constants$1899.GtkPrintSettingsFunc$FUNC, false
    );
    static final FunctionDescriptor gtk_print_settings_get_type$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT);
    static final MethodHandle gtk_print_settings_get_type$MH = RuntimeHelper.downcallHandle(
        "gtk_print_settings_get_type",
        constants$1899.gtk_print_settings_get_type$FUNC, false
    );
    static final FunctionDescriptor gtk_print_settings_new$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT);
    static final MethodHandle gtk_print_settings_new$MH = RuntimeHelper.downcallHandle(
        "gtk_print_settings_new",
        constants$1899.gtk_print_settings_new$FUNC, false
    );
    static final FunctionDescriptor gtk_print_settings_copy$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle gtk_print_settings_copy$MH = RuntimeHelper.downcallHandle(
        "gtk_print_settings_copy",
        constants$1899.gtk_print_settings_copy$FUNC, false
    );
    static final FunctionDescriptor gtk_print_settings_new_from_file$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle gtk_print_settings_new_from_file$MH = RuntimeHelper.downcallHandle(
        "gtk_print_settings_new_from_file",
        constants$1899.gtk_print_settings_new_from_file$FUNC, false
    );
}


