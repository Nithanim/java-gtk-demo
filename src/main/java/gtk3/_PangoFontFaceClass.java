// Generated by jextract

package gtk3;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _PangoFontFaceClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("get_face_name"),
        Constants$root.C_POINTER$LAYOUT.withName("describe"),
        Constants$root.C_POINTER$LAYOUT.withName("list_sizes"),
        Constants$root.C_POINTER$LAYOUT.withName("is_synthesized"),
        Constants$root.C_POINTER$LAYOUT.withName("get_family"),
        Constants$root.C_POINTER$LAYOUT.withName("_pango_reserved3"),
        Constants$root.C_POINTER$LAYOUT.withName("_pango_reserved4")
    ).withName("_PangoFontFaceClass");
    public static MemoryLayout $LAYOUT() {
        return _PangoFontFaceClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor get_face_name$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_face_name$MH = RuntimeHelper.downcallHandle(
        _PangoFontFaceClass.get_face_name$FUNC, false
    );
    public interface get_face_name {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(get_face_name fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_face_name.class, fi, _PangoFontFaceClass.get_face_name$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_face_name ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_face_name::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_PangoFontFaceClass.get_face_name$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_face_name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_face_name"));
    public static VarHandle get_face_name$VH() {
        return _PangoFontFaceClass.get_face_name$VH;
    }
    public static MemoryAddress get_face_name$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontFaceClass.get_face_name$VH.get(seg);
    }
    public static void get_face_name$set( MemorySegment seg, MemoryAddress x) {
        _PangoFontFaceClass.get_face_name$VH.set(seg, x);
    }
    public static MemoryAddress get_face_name$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontFaceClass.get_face_name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_face_name$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoFontFaceClass.get_face_name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_face_name get_face_name (MemorySegment segment, ResourceScope scope) {
        return get_face_name.ofAddress(get_face_name$get(segment), scope);
    }
    static final FunctionDescriptor describe$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle describe$MH = RuntimeHelper.downcallHandle(
        _PangoFontFaceClass.describe$FUNC, false
    );
    public interface describe {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(describe fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(describe.class, fi, _PangoFontFaceClass.describe$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static describe ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("describe::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_PangoFontFaceClass.describe$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle describe$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("describe"));
    public static VarHandle describe$VH() {
        return _PangoFontFaceClass.describe$VH;
    }
    public static MemoryAddress describe$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontFaceClass.describe$VH.get(seg);
    }
    public static void describe$set( MemorySegment seg, MemoryAddress x) {
        _PangoFontFaceClass.describe$VH.set(seg, x);
    }
    public static MemoryAddress describe$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontFaceClass.describe$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void describe$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoFontFaceClass.describe$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static describe describe (MemorySegment segment, ResourceScope scope) {
        return describe.ofAddress(describe$get(segment), scope);
    }
    static final FunctionDescriptor list_sizes$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle list_sizes$MH = RuntimeHelper.downcallHandle(
        _PangoFontFaceClass.list_sizes$FUNC, false
    );
    public interface list_sizes {

        void apply(jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1, jdk.incubator.foreign.MemoryAddress _x2);
        static NativeSymbol allocate(list_sizes fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(list_sizes.class, fi, _PangoFontFaceClass.list_sizes$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static list_sizes ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("list_sizes::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1, jdk.incubator.foreign.MemoryAddress _x2) -> {
                try {
                    _PangoFontFaceClass.list_sizes$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, (jdk.incubator.foreign.Addressable)_x1, (jdk.incubator.foreign.Addressable)_x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle list_sizes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("list_sizes"));
    public static VarHandle list_sizes$VH() {
        return _PangoFontFaceClass.list_sizes$VH;
    }
    public static MemoryAddress list_sizes$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontFaceClass.list_sizes$VH.get(seg);
    }
    public static void list_sizes$set( MemorySegment seg, MemoryAddress x) {
        _PangoFontFaceClass.list_sizes$VH.set(seg, x);
    }
    public static MemoryAddress list_sizes$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontFaceClass.list_sizes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void list_sizes$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoFontFaceClass.list_sizes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static list_sizes list_sizes (MemorySegment segment, ResourceScope scope) {
        return list_sizes.ofAddress(list_sizes$get(segment), scope);
    }
    static final FunctionDescriptor is_synthesized$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle is_synthesized$MH = RuntimeHelper.downcallHandle(
        _PangoFontFaceClass.is_synthesized$FUNC, false
    );
    public interface is_synthesized {

        int apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(is_synthesized fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(is_synthesized.class, fi, _PangoFontFaceClass.is_synthesized$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static is_synthesized ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("is_synthesized::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    return (int)_PangoFontFaceClass.is_synthesized$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle is_synthesized$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("is_synthesized"));
    public static VarHandle is_synthesized$VH() {
        return _PangoFontFaceClass.is_synthesized$VH;
    }
    public static MemoryAddress is_synthesized$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontFaceClass.is_synthesized$VH.get(seg);
    }
    public static void is_synthesized$set( MemorySegment seg, MemoryAddress x) {
        _PangoFontFaceClass.is_synthesized$VH.set(seg, x);
    }
    public static MemoryAddress is_synthesized$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontFaceClass.is_synthesized$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_synthesized$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoFontFaceClass.is_synthesized$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static is_synthesized is_synthesized (MemorySegment segment, ResourceScope scope) {
        return is_synthesized.ofAddress(is_synthesized$get(segment), scope);
    }
    static final FunctionDescriptor get_family$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_family$MH = RuntimeHelper.downcallHandle(
        _PangoFontFaceClass.get_family$FUNC, false
    );
    public interface get_family {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(get_family fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_family.class, fi, _PangoFontFaceClass.get_family$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_family ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_family::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_PangoFontFaceClass.get_family$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_family$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_family"));
    public static VarHandle get_family$VH() {
        return _PangoFontFaceClass.get_family$VH;
    }
    public static MemoryAddress get_family$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontFaceClass.get_family$VH.get(seg);
    }
    public static void get_family$set( MemorySegment seg, MemoryAddress x) {
        _PangoFontFaceClass.get_family$VH.set(seg, x);
    }
    public static MemoryAddress get_family$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontFaceClass.get_family$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_family$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoFontFaceClass.get_family$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_family get_family (MemorySegment segment, ResourceScope scope) {
        return get_family.ofAddress(get_family$get(segment), scope);
    }
    static final FunctionDescriptor _pango_reserved3$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _pango_reserved3$MH = RuntimeHelper.downcallHandle(
        _PangoFontFaceClass._pango_reserved3$FUNC, false
    );
    public interface _pango_reserved3 {

        void apply();
        static NativeSymbol allocate(_pango_reserved3 fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(_pango_reserved3.class, fi, _PangoFontFaceClass._pango_reserved3$FUNC, "()V", scope);
        }
        static _pango_reserved3 ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("_pango_reserved3::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return () -> {
                try {
                    _PangoFontFaceClass._pango_reserved3$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _pango_reserved3$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_pango_reserved3"));
    public static VarHandle _pango_reserved3$VH() {
        return _PangoFontFaceClass._pango_reserved3$VH;
    }
    public static MemoryAddress _pango_reserved3$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontFaceClass._pango_reserved3$VH.get(seg);
    }
    public static void _pango_reserved3$set( MemorySegment seg, MemoryAddress x) {
        _PangoFontFaceClass._pango_reserved3$VH.set(seg, x);
    }
    public static MemoryAddress _pango_reserved3$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontFaceClass._pango_reserved3$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _pango_reserved3$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoFontFaceClass._pango_reserved3$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _pango_reserved3 _pango_reserved3 (MemorySegment segment, ResourceScope scope) {
        return _pango_reserved3.ofAddress(_pango_reserved3$get(segment), scope);
    }
    static final FunctionDescriptor _pango_reserved4$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _pango_reserved4$MH = RuntimeHelper.downcallHandle(
        _PangoFontFaceClass._pango_reserved4$FUNC, false
    );
    public interface _pango_reserved4 {

        void apply();
        static NativeSymbol allocate(_pango_reserved4 fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(_pango_reserved4.class, fi, _PangoFontFaceClass._pango_reserved4$FUNC, "()V", scope);
        }
        static _pango_reserved4 ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("_pango_reserved4::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return () -> {
                try {
                    _PangoFontFaceClass._pango_reserved4$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _pango_reserved4$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_pango_reserved4"));
    public static VarHandle _pango_reserved4$VH() {
        return _PangoFontFaceClass._pango_reserved4$VH;
    }
    public static MemoryAddress _pango_reserved4$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontFaceClass._pango_reserved4$VH.get(seg);
    }
    public static void _pango_reserved4$set( MemorySegment seg, MemoryAddress x) {
        _PangoFontFaceClass._pango_reserved4$VH.set(seg, x);
    }
    public static MemoryAddress _pango_reserved4$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoFontFaceClass._pango_reserved4$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _pango_reserved4$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoFontFaceClass._pango_reserved4$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _pango_reserved4 _pango_reserved4 (MemorySegment segment, ResourceScope scope) {
        return _pango_reserved4.ofAddress(_pango_reserved4$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


