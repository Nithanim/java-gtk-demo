// Generated by jextract

package gtk3;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _PangoEngineShapeClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
                ).withName("g_type_class"),
                Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
                Constants$root.C_POINTER$LAYOUT.withName("constructor"),
                Constants$root.C_POINTER$LAYOUT.withName("set_property"),
                Constants$root.C_POINTER$LAYOUT.withName("get_property"),
                Constants$root.C_POINTER$LAYOUT.withName("dispose"),
                Constants$root.C_POINTER$LAYOUT.withName("finalize"),
                Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
                Constants$root.C_POINTER$LAYOUT.withName("notify"),
                Constants$root.C_POINTER$LAYOUT.withName("constructed"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
                MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
            ).withName("parent_class")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("script_shape"),
        Constants$root.C_POINTER$LAYOUT.withName("covers")
    ).withName("_PangoEngineShapeClass");
    public static MemoryLayout $LAYOUT() {
        return _PangoEngineShapeClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor script_shape$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle script_shape$MH = RuntimeHelper.downcallHandle(
        _PangoEngineShapeClass.script_shape$FUNC, false
    );
    public interface script_shape {

        void apply(jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1, jdk.incubator.foreign.MemoryAddress _x2, int _x3, jdk.incubator.foreign.MemoryAddress _x4, jdk.incubator.foreign.MemoryAddress _x5, jdk.incubator.foreign.MemoryAddress _x6, int _x7);
        static NativeSymbol allocate(script_shape fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(script_shape.class, fi, _PangoEngineShapeClass.script_shape$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V", scope);
        }
        static script_shape ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("script_shape::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1, jdk.incubator.foreign.MemoryAddress _x2, int _x3, jdk.incubator.foreign.MemoryAddress _x4, jdk.incubator.foreign.MemoryAddress _x5, jdk.incubator.foreign.MemoryAddress _x6, int _x7) -> {
                try {
                    _PangoEngineShapeClass.script_shape$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, (jdk.incubator.foreign.Addressable)_x1, (jdk.incubator.foreign.Addressable)_x2, _x3, (jdk.incubator.foreign.Addressable)_x4, (jdk.incubator.foreign.Addressable)_x5, (jdk.incubator.foreign.Addressable)_x6, _x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle script_shape$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("script_shape"));
    public static VarHandle script_shape$VH() {
        return _PangoEngineShapeClass.script_shape$VH;
    }
    public static MemoryAddress script_shape$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoEngineShapeClass.script_shape$VH.get(seg);
    }
    public static void script_shape$set( MemorySegment seg, MemoryAddress x) {
        _PangoEngineShapeClass.script_shape$VH.set(seg, x);
    }
    public static MemoryAddress script_shape$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoEngineShapeClass.script_shape$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void script_shape$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoEngineShapeClass.script_shape$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static script_shape script_shape (MemorySegment segment, ResourceScope scope) {
        return script_shape.ofAddress(script_shape$get(segment), scope);
    }
    static final FunctionDescriptor covers$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle covers$MH = RuntimeHelper.downcallHandle(
        _PangoEngineShapeClass.covers$FUNC, false
    );
    public interface covers {

        int apply(jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1, jdk.incubator.foreign.MemoryAddress _x2, int _x3);
        static NativeSymbol allocate(covers fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(covers.class, fi, _PangoEngineShapeClass.covers$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static covers ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("covers::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1, jdk.incubator.foreign.MemoryAddress _x2, int _x3) -> {
                try {
                    return (int)_PangoEngineShapeClass.covers$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, (jdk.incubator.foreign.Addressable)_x1, (jdk.incubator.foreign.Addressable)_x2, _x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle covers$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("covers"));
    public static VarHandle covers$VH() {
        return _PangoEngineShapeClass.covers$VH;
    }
    public static MemoryAddress covers$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoEngineShapeClass.covers$VH.get(seg);
    }
    public static void covers$set( MemorySegment seg, MemoryAddress x) {
        _PangoEngineShapeClass.covers$VH.set(seg, x);
    }
    public static MemoryAddress covers$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PangoEngineShapeClass.covers$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void covers$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoEngineShapeClass.covers$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static covers covers (MemorySegment segment, ResourceScope scope) {
        return covers.ofAddress(covers$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


