// Generated by jextract

package gtk3;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _AtkImageIface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("parent"),
        Constants$root.C_POINTER$LAYOUT.withName("get_image_position"),
        Constants$root.C_POINTER$LAYOUT.withName("get_image_description"),
        Constants$root.C_POINTER$LAYOUT.withName("get_image_size"),
        Constants$root.C_POINTER$LAYOUT.withName("set_image_description"),
        Constants$root.C_POINTER$LAYOUT.withName("get_image_locale")
    ).withName("_AtkImageIface");
    public static MemoryLayout $LAYOUT() {
        return _AtkImageIface.$struct$LAYOUT;
    }
    public static MemorySegment parent$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor get_image_position$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle get_image_position$MH = RuntimeHelper.downcallHandle(
        _AtkImageIface.get_image_position$FUNC, false
    );
    public interface get_image_position {

        void apply(jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1, jdk.incubator.foreign.MemoryAddress _x2, int _x3);
        static NativeSymbol allocate(get_image_position fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_image_position.class, fi, _AtkImageIface.get_image_position$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V", scope);
        }
        static get_image_position ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_image_position::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1, jdk.incubator.foreign.MemoryAddress _x2, int _x3) -> {
                try {
                    _AtkImageIface.get_image_position$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, (jdk.incubator.foreign.Addressable)_x1, (jdk.incubator.foreign.Addressable)_x2, _x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_image_position$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_image_position"));
    public static VarHandle get_image_position$VH() {
        return _AtkImageIface.get_image_position$VH;
    }
    public static MemoryAddress get_image_position$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkImageIface.get_image_position$VH.get(seg);
    }
    public static void get_image_position$set( MemorySegment seg, MemoryAddress x) {
        _AtkImageIface.get_image_position$VH.set(seg, x);
    }
    public static MemoryAddress get_image_position$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkImageIface.get_image_position$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_image_position$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkImageIface.get_image_position$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_image_position get_image_position (MemorySegment segment, ResourceScope scope) {
        return get_image_position.ofAddress(get_image_position$get(segment), scope);
    }
    static final FunctionDescriptor get_image_description$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_image_description$MH = RuntimeHelper.downcallHandle(
        _AtkImageIface.get_image_description$FUNC, false
    );
    public interface get_image_description {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(get_image_description fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_image_description.class, fi, _AtkImageIface.get_image_description$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_image_description ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_image_description::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_AtkImageIface.get_image_description$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_image_description$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_image_description"));
    public static VarHandle get_image_description$VH() {
        return _AtkImageIface.get_image_description$VH;
    }
    public static MemoryAddress get_image_description$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkImageIface.get_image_description$VH.get(seg);
    }
    public static void get_image_description$set( MemorySegment seg, MemoryAddress x) {
        _AtkImageIface.get_image_description$VH.set(seg, x);
    }
    public static MemoryAddress get_image_description$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkImageIface.get_image_description$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_image_description$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkImageIface.get_image_description$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_image_description get_image_description (MemorySegment segment, ResourceScope scope) {
        return get_image_description.ofAddress(get_image_description$get(segment), scope);
    }
    static final FunctionDescriptor get_image_size$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_image_size$MH = RuntimeHelper.downcallHandle(
        _AtkImageIface.get_image_size$FUNC, false
    );
    public interface get_image_size {

        void apply(jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1, jdk.incubator.foreign.MemoryAddress _x2);
        static NativeSymbol allocate(get_image_size fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_image_size.class, fi, _AtkImageIface.get_image_size$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static get_image_size ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_image_size::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1, jdk.incubator.foreign.MemoryAddress _x2) -> {
                try {
                    _AtkImageIface.get_image_size$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, (jdk.incubator.foreign.Addressable)_x1, (jdk.incubator.foreign.Addressable)_x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_image_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_image_size"));
    public static VarHandle get_image_size$VH() {
        return _AtkImageIface.get_image_size$VH;
    }
    public static MemoryAddress get_image_size$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkImageIface.get_image_size$VH.get(seg);
    }
    public static void get_image_size$set( MemorySegment seg, MemoryAddress x) {
        _AtkImageIface.get_image_size$VH.set(seg, x);
    }
    public static MemoryAddress get_image_size$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkImageIface.get_image_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_image_size$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkImageIface.get_image_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_image_size get_image_size (MemorySegment segment, ResourceScope scope) {
        return get_image_size.ofAddress(get_image_size$get(segment), scope);
    }
    static final FunctionDescriptor set_image_description$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_image_description$MH = RuntimeHelper.downcallHandle(
        _AtkImageIface.set_image_description$FUNC, false
    );
    public interface set_image_description {

        int apply(jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1);
        static NativeSymbol allocate(set_image_description fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(set_image_description.class, fi, _AtkImageIface.set_image_description$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static set_image_description ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("set_image_description::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, jdk.incubator.foreign.MemoryAddress _x1) -> {
                try {
                    return (int)_AtkImageIface.set_image_description$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, (jdk.incubator.foreign.Addressable)_x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_image_description$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_image_description"));
    public static VarHandle set_image_description$VH() {
        return _AtkImageIface.set_image_description$VH;
    }
    public static MemoryAddress set_image_description$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkImageIface.set_image_description$VH.get(seg);
    }
    public static void set_image_description$set( MemorySegment seg, MemoryAddress x) {
        _AtkImageIface.set_image_description$VH.set(seg, x);
    }
    public static MemoryAddress set_image_description$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkImageIface.set_image_description$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_image_description$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkImageIface.set_image_description$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_image_description set_image_description (MemorySegment segment, ResourceScope scope) {
        return set_image_description.ofAddress(set_image_description$get(segment), scope);
    }
    static final FunctionDescriptor get_image_locale$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_image_locale$MH = RuntimeHelper.downcallHandle(
        _AtkImageIface.get_image_locale$FUNC, false
    );
    public interface get_image_locale {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress _x0);
        static NativeSymbol allocate(get_image_locale fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_image_locale.class, fi, _AtkImageIface.get_image_locale$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_image_locale ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_image_locale::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_AtkImageIface.get_image_locale$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_image_locale$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_image_locale"));
    public static VarHandle get_image_locale$VH() {
        return _AtkImageIface.get_image_locale$VH;
    }
    public static MemoryAddress get_image_locale$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkImageIface.get_image_locale$VH.get(seg);
    }
    public static void get_image_locale$set( MemorySegment seg, MemoryAddress x) {
        _AtkImageIface.get_image_locale$VH.set(seg, x);
    }
    public static MemoryAddress get_image_locale$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_AtkImageIface.get_image_locale$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_image_locale$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkImageIface.get_image_locale$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_image_locale get_image_locale (MemorySegment segment, ResourceScope scope) {
        return get_image_locale.ofAddress(get_image_locale$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


