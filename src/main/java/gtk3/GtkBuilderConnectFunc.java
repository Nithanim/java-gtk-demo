// Generated by jextract

package gtk3;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public interface GtkBuilderConnectFunc {

    void apply(jdk.incubator.foreign.MemoryAddress builder, jdk.incubator.foreign.MemoryAddress object, jdk.incubator.foreign.MemoryAddress signal_name, jdk.incubator.foreign.MemoryAddress handler_name, jdk.incubator.foreign.MemoryAddress connect_object, int flags, jdk.incubator.foreign.MemoryAddress user_data);
    static NativeSymbol allocate(GtkBuilderConnectFunc fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(GtkBuilderConnectFunc.class, fi, constants$1338.GtkBuilderConnectFunc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)V", scope);
    }
    static GtkBuilderConnectFunc ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("GtkBuilderConnectFunc::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress builder, jdk.incubator.foreign.MemoryAddress object, jdk.incubator.foreign.MemoryAddress signal_name, jdk.incubator.foreign.MemoryAddress handler_name, jdk.incubator.foreign.MemoryAddress connect_object, int flags, jdk.incubator.foreign.MemoryAddress user_data) -> {
            try {
                constants$1338.GtkBuilderConnectFunc$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)builder, (jdk.incubator.foreign.Addressable)object, (jdk.incubator.foreign.Addressable)signal_name, (jdk.incubator.foreign.Addressable)handler_name, (jdk.incubator.foreign.Addressable)connect_object, flags, (jdk.incubator.foreign.Addressable)user_data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


